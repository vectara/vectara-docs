openapi: 3.0.0
info:
  title: Vectara REST API
  version: 1.0.0
  termsOfService: https://vectara.com/legal/online-customer-agreement/
  x-logo:
    url: https://docs.vectara.com/img/vectara_wordmark.png
    altText: Vectara
  x-dark-logo:
    url: https://docs.vectara.com/img/vectara_wordmark_light.png
    altText: Vectara
  contact:
    name: Vectara Support
    email: support@vectara.com
    url: http://support.vectara.com/
  description: |-
    Vectara is a neural search platform, built for developers to get the most out of their data.

    You can sign up for an account at [https://vectara.com](https://vectara.com).
tags:
  - name: AdminService
    description: Administrative services, such as creating or deleting corpora
  - name: IndexService
    description: Indexing operations, such as creating and deleting documents
  - name: QueryService
    description: Query operations, such as performing a standard search
# add file upload API and auth options for other APIs
paths:
  /v1/create-corpus:
    post:
      operationId: CreateCorpus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminCreateCorpusResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminCreateCorpusRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Create Corpus
  /v1/delete-corpus:
    post:
      operationId: DeleteCorpus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminDeleteCorpusResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminDeleteCorpusRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Delete Corpus
  /v1/delete-doc:
    post:
      operationId: Delete
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectaraDeleteDocumentResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vectaraDeleteDocumentRequest"
        description: Request to delete a document from an index.
        required: true
      tags:
        - IndexService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Delete
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/index:
    post:
      operationId: Index
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectaraIndexDocumentResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vectaraIndexDocumentRequest"
            examples:
              BookExample:
                value:
                  customerId: 123456
                  corpusId: 1
                  document:
                    documentId: "isbn-9781405053976"
                    title: "The Hitchhiker's Guide to the Galaxy"
                    description: "A great book with the answer to life, the universe, and everything"
                    metadataJson: '{"author": "Douglas Adams"}'
                    section:
                      - title: Intro
                        text: "Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun."
                        metadataJson: '{"page": 1}'
                      - title: The answer
                        text: "The Answer to the Great Question ... Of Life, the Universe and Everything ... Is ... Forty-two."
                        metadataJson: '{"speaker": "Deep Thought"}'
              ReviewExample:
                value:
                  customerId: 234567
                  corpusId: 2
                  document:
                    documentId: "review-f876-1937-90d6-a7e9"
                    title: "The Fusion Mug: The Hottest Way to Burn Your Mouth and Your Wallet"
                    description: "Have you ever wanted to combine the pleasure of drinking coffee with the thrill of nuclear fusion? Look no further than the Fusion Mug!"
                    metadataJson: '{"author": "George P Burdell"}'
                    section:
                      - title: Intro
                        text: "This revolutionary mug promises to keep your coffee piping hot for millennia, thanks to its built-in fusion reactor. Yes, you read that right - a real, honest-to-goodness fusion reactor! What could possibly go wrong?"
                        metadataJson: '{"section": "intro"}'
                      - title: Main Benefit
                        text: "Let me tell you, folks, this mug is a game-changer. The fusion reactor heats up your coffee to the perfect temperature in seconds, without any of that annoying waiting around for your drip pot to do its thing. And the taste? Oh, man. It's like the coffee beans themselves were infused with pure energy from the heart of the sun. I've never tasted anything like it."
                        metadataJson: '{"section": "benefit1"}'
                      - title: Counterpoint
                        text: "Now, I know what you're thinking... 'But George, isn't nuclear fusion dangerous? Won't it give me cancer or something?' Ha! That's just the kind of paranoia that keeps people from truly experiencing life. Sure, there might be some minor risks involved, but come on. What's a little radiation poisoning compared to the pure, unadulterated joy of a perfect cup of coffee?"
                        metadataJson: '{"section": "counterpoint"}'
                      - title: Conclusion
                        text: "In conclusion, if you're not using the Fusion-Powered Perfection mug to drink your coffee, you might as well be drinking mud. This mug is the ultimate in technological sophistication and gourmet taste. It will make your coffee so good that you'll never want to drink anything else again. And if you're worried about the so-called 'risks' of using a fusion reactor to heat your beverage, well, maybe you're just not cut out for the high-stakes world of elite coffee connoisseurship. So go ahead and stick with your bland, boring, non-nuclear coffee mugs. We'll be over here, sipping the sweet nectar of the gods from our Fusion-Powered Perfection mugs."
                        metadataJson: '{"section": "conclusion"}'
        required: true
      tags:
        - IndexService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Index
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/list-corpora:
    post:
      operationId: ListCorpora
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminListCorporaResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminListCorporaRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: List Corpora
  /v1/query:
    post:
      operationId: Query
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/servingBatchQueryResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/servingBatchQueryRequest"
      tags:
        - QueryService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Query
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/reset-corpus:
    post:
      operationId: ResetCorpus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminResetCorpusResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminResetCorpusRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Reset Corpus
  /v1/core/index:
    post:
      operationId: CoreIndex
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectaraIndexCoreDocumentResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vectaraIndexCoreDocumentRequest"
        description: Request to index a document.
        required: true
      tags:
        - IndexService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      description: Low level indexing API
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/upload:
    post:
      operationId: FileUpload
      description: File Upload
      tags:
        - IndexService
      security:
        - ApiKeyAuth: []
        - oAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                doc_metadata:
                  description: A JSON string of any additional metadata you want attached to the file.
                  type: string
                file:
                  description: The file to be indexed into Vectara.
                  type: string
                  format: binary
              required:
                - file
      parameters:
        - in: query
          name: c
          required: true
          description: Customer ID
          schema:
            type: integer
        - in: query
          name: o
          required: true
          description: Corpus ID
          schema:
            type: integer
          example: 1
          minimum: 1
        - in: query
          name: d
          required: false
          description: If true, the server returns the extracted document that was indexed
          default: false
          schema:
            type: boolean
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: object
                    properties:
                      status:
                        type: object
                      quotaConsumed:
                        type: object
                        properties:
                          numChars:
                            type: string
                            description: The number of characters Vectara indexed from the file uploaded.
                          numMetadataChars:
                            type: string
                            description: The number of metadata characters Vectara indexed from the file uploaded.
        "400":
          description: An invalid request was sent.  e.g. one or more parameters was missing, or the corpus does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    description: Returned HTTP code
        "401":
          description: The request was not authenticated
        "403":
          description: The caller is not authorized to add documents to the corpus
        "409":
          description: |-
            A document already exists in the corpus with the same document ID, yet the contents of the indexed document are different than the file being uploaded.
            Since the indexer is idempotent, the same document (identified by the document ID) can be uploaded multiple times.
            The indexer does not support updates yet, so an error is returned when a different document is uploaded for the same document ID
            Note that when a raw file is uploaded, the file name is used as the document ID.
        "507":
          description: There is no more indexing quota left for the corpus or customer to index more documents.  Upgrade your account, add a credit card, or contact sales.
components:
  requestBodies:
    servingBatchQueryRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/servingBatchQueryRequest"
      required: true
  schemas:
    CorpusKeySemantics:
      type: string
      enum:
        - DEFAULT
        - QUERY
        - RESPONSE
      default: DEFAULT
      description: >-
        Semantics controls the interpretation of the query string by the

        server, and can be used to override the default semantics assigned

        in the corpus definition.





         - DEFAULT: Use corpus-assigned semantics.  This is the most common setting.
         - QUERY: Use query semantics.  This is also common.
         - RESPONSE: Use response semantics.  Usage of this is rare.
    QueryRequestContextConfig:
      type: object
      properties:
        charsBefore:
          type: integer
          format: int32
          example: 30
          description: >-
            chars_before is used for showing the end user the characters leading up

            to the result snippet.  This can help the end-user understand the

            context of that result. Ignored if sentences_before is set.
        charsAfter:
          type: integer
          format: int32
          example: 30
          description: >-
            chars_after is used for showing the end user the characters after the

            result snippet.  This can help the end-user understand the context of

            that result. Ignored if sentences_before is set.
        sentencesBefore:
          type: integer
          format: int32
          example: 3
          description: >-
            sentences_before is used for showing the end user the sentences leading

            up to the result snippet.  This can help the end-user understand the

            context of that result.
        sentencesAfter:
          type: integer
          format: int32
          example: 3
          description: >-
            sentences_after is used for showing the end user the sentences leading

            up to the result snippet.  This can help the end-user understand the

            context of that result.
        startTag:
          type: string
          example: <b>
          description: >-
            The tag that wraps the snippet at the start. Often this is used to

            provide a start HTML/XML tag or some other delimiter you can use in an

            application to understand where to provide highlighting in your UI and

            understand where the context before ends and the snippet begins.
        endTag:
          type: string
          example: </b>
          description: >-
            The tag that wraps the snippet at the end. Often this is used to provide

            a start HTML/XML tag or some other delimiter you can use in an

            application to understand where to provide highlighting in your UI and

            understand where the snippet ends and the context after begins.
    QueryRequestRerankingConfig:
      type: object
      properties:
        rerankerId:
          type: integer
          format: int64
          title: |-
            Which reranking model to use if reranking.  Currently, the only ID
            available is ID 272725717
          enum: [272725717]
          example: 272725717
      description: Configuration options to apply to the reranking.
    adminCorpus:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: |-
            The Corpus ID.
            This value is ignored during Corpus creation.
        name:
          type: string
          description: The name of the corpus.
        description:
          type: string
          description: A description for the corpus.
        dtProvision:
          type: string
          format: int64
          description: |-
            The time at which the corpus was provisioned.
            This value is ignored during Corpus creation.
        enabled:
          type: boolean
          description: |-
            Whether the corpus is enabled for use or not.
            This value is ignored during Corpus creation.
        swapQenc:
          type: boolean
        swapIenc:
          type: boolean
          description: >-
            The default query encoder is designed for normal question-answering types

            of queries when the text contains the answer.  Swapping the index encoder

            is generally rare, but can be used to help directly match questions to

            questions.  This can be useful if you have a FAQ dataset and you want to

            directly match the user question to the question in the FAQ.
        textless:
          type: boolean
          description: >-
            When a corpus is "textless", Vectara does not store the original text.

            Instead, Vectara converts the text to vectors and only retains metadata.
        encrypted:
          type: boolean
          description: Encryption is on by default and cannot be turned off.
        encoderId:
          type: string
          format: uint64
          description: >-
            This is an advanced setting for changing the underlying model type.  The

            default value is "1", which is Vectara's high-performing global model.

            Underlying models may be swapped for some paying customers by contacting

            our support team.
        metadataMaxBytes:
          type: integer
          format: int64
          description: An optional maximum size of the metadata that each document can contain.
        customDimensions:
          type: array
          items:
            $ref: "#/components/schemas/adminDimension"
        filterAttributes:
          type: array
          items:
            $ref: "#/components/schemas/adminFilterAttribute"
    adminCreateCorpusRequest:
      type: object
      properties:
        corpus:
          $ref: "#/components/schemas/adminCorpus"
    adminCreateCorpusResponse:
      type: object
      properties:
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID that was created.
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    adminDeleteCorpusRequest:
      type: object
      example:
        corpusId: 1
      properties:
        customerId:
          type: integer
          format: int64
          description: The Customer ID that contains the corpus to be deleted.
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID to be deleted.
          minimum: 1
      required:
        - customerId
        - corpusId
    adminDeleteCorpusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    adminDimension:
      type: object
      properties:
        name:
          type: string
          description: |-
            The name of the custom dimension.  The maximum length of the name is
            8 characters.
        description:
          type: string
          description: A description for the custom dimension.
        servingDefault:
          type: number
          format: double
          description: >-
            The default weight to give this dimension when running queries. A value of

            0.0, for example, gives it no weight at all.
        indexingDefault:
          type: number
          format: double
          description: The default value to give to documents for this custom dimension.
      description: >-
        A custom dimension is additional numeric metadata that you want to affect

        Vectara's scoring.  For example, these could be "number of stars" ratings,

        or other business metrics like a product's margins that you want to use

        to boost where a result is in the list.
    adminFilterAttribute:
      type: object
      properties:
        name:
          type: string
          description: Name of the field, as seen in metadata.
        description:
          type: string
          description: An optional description.
        indexed:
          type: boolean
          description: Whether the field is indexed for maximum query speed.
        type:
          $ref: "#/components/schemas/adminFilterAttributeType"
        level:
          $ref: "#/components/schemas/adminFilterAttributeLevel"
      description: Defines metadata fields that can be used in predicate queries.
    adminFilterAttributeLevel:
      type: string
      enum:
        - FILTER_ATTRIBUTE_LEVEL__UNDEFINED
        - FILTER_ATTRIBUTE_LEVEL__DOCUMENT
        - FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART
      default: FILTER_ATTRIBUTE_LEVEL__UNDEFINED
      title: |-
        - FILTER_ATTRIBUTE_LEVEL__DOCUMENT: Document-level attribute
         - FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART: Part-level attribute
    adminFilterAttributeType:
      type: string
      enum:
        - FILTER_ATTRIBUTE_TYPE__UNDEFINED
        - FILTER_ATTRIBUTE_TYPE__INTEGER
        - FILTER_ATTRIBUTE_TYPE__INTEGER_LIST
        - FILTER_ATTRIBUTE_TYPE__REAL
        - FILTER_ATTRIBUTE_TYPE__REAL_LIST
        - FILTER_ATTRIBUTE_TYPE__TEXT
        - FILTER_ATTRIBUTE_TYPE__TEXT_LIST
        - FILTER_ATTRIBUTE_TYPE__BOOLEAN
      default: FILTER_ATTRIBUTE_TYPE__UNDEFINED
    adminListCorporaRequest:
      type: object
      example:
        numResults: 10
        filter: "[Tt][Ee][Ss][Tt]"
      properties:
        filter:
          type: string
          example: "[Tt][Ee][Ss][Tt]"
          description: A regex over the names and descriptions to match corpora against.
        numResults:
          type: integer
          format: int64
          description: The maximum results to return.
          minimum: 1
        pageKey:
          type: string
          format: byte
          description: A key that is passed in to retrieve a specific page of results.
      required:
        - numResults
    adminListCorporaResponse:
      type: object
      properties:
        corpus:
          type: array
          items:
            $ref: "#/components/schemas/adminCorpus"
        pageKey:
          type: string
          format: byte
          description: |-
            A key that is passed into a subsequent result in order to
            retrieve the next page of results.
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    adminResetCorpusRequest:
      type: object
      example:
        corpusId: 1
      properties:
        customerId:
          type: integer
          format: int64
          description: The Customer ID that contains the corpus to be reset.
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID to be reset.
          minimum: 1
      required:
        - customerId
        - corpusId
    adminResetCorpusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    comvectaraStatus:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/vectaraStatusCode"
        statusDetail:
          type: string
    googlerpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
    indexingSection:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: >-
            Optionally, the unique ID of this section. If set, it will be returned as

            metadata in query results.
        title:
          type: string
          description: Optionally, the title of the section. This may be empty.
        text:
          type: string
          description: The text of the section. This should never be empty.
        metadataJson:
          type: string
          description: >-
            Metadata about this section. This should be a json string. It is passed

            through the system, without being used at indexing time. It can be

            retrieved at query time.
        customDims:
          type: array
          items:
            $ref: "#/components/schemas/vectaraindexingCustomDimension"
          description: >-
            A list of custom dimension values that are included in the generated

            representation of all subsections (i.e. sections contains by this section).
        section:
          type: array
          items:
            $ref: "#/components/schemas/indexingSection"
          description: A list of subsections.
      description: A section within a structured document.
    protobufAny:
      type: object
      properties:
        "@type":
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that they

            expect it to use in the context of Any. However, for URLs which use the

            scheme `http`, `https`, or no scheme, one can optionally set up a type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]





              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the





              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
      additionalProperties: {}
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.






            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.






            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.






            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go






             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:






            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):






            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    servingAttribute:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    servingBatchQueryRequest:
      type: object
      properties:
        query:
          type: array
          items:
            $ref: "#/components/schemas/servingQueryRequest"
    servingBatchQueryResponse:
      type: object
      properties:
        responseSet:
          type: array
          items:
            $ref: "#/components/schemas/servingResponseSet"
          description: >-
            The response sets for queries within the batch. If using synchronous APIs

            for querying, the response set will be included directly in the response.

            However, if using the streaming APIs for query, the response set messages

            only set the future_id field. Later, as response sets are computed and

            returned over the stream, the future_id within the summary can be used for

            correlation.
        status:
          type: array
          items:
            $ref: "#/components/schemas/comvectaraStatus"
        metrics:
          $ref: "#/components/schemas/servingPerformanceMetrics"
    servingCorpusKey:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          description: The Customer ID.
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID.
          minimum: 1
          example: 1
        semantics:
          $ref: "#/components/schemas/CorpusKeySemantics"
        dim:
          type: array
          items:
            $ref: "#/components/schemas/vectaraservingCustomDimension"
          description: Weights on custom dimensions for the corpus.
        metadataFilter:
          type: string
          example: "part.lang = 'eng'"
        lexicalInterpolationConfig:
          $ref: "#/components/schemas/servingLinearInterpolation"
      required: ['customerId', 'corpusId']
    servingLinearInterpolation:
      type: object
      properties:
        lambda:
          type: number
          format: float
          title: >-
            Controls the weight given to lexical matches. The final score, S, is then:




                S = (lambda) * (lexical score) + (1 - lambda) * (dense score)
      description: Configuration for a linear interpolation.
    servingPerformanceMetrics:
      type: object
      properties:
        queryEncodeMs:
          type: integer
          format: int64
          description: How long it took to encode the query.
        retrievalMs:
          type: integer
          format: int64
          description: How long it took to retrieve relevant results.
        userdataRetrievalMs:
          type: integer
          format: int64
          description: How long it took to retrieve user data.
        rerankMs:
          type: integer
          format: int64
          description: How long it took to rerank the results.
      description: Basic performance metrics that can be attached to a server response.
    servingQueryRequest:
      type: object
      properties:
        query:
          type: string
          description: The query text to use from the end user.
          example: "What is the answer to the life, the universe, and everything?"
        start:
          type: integer
          format: int64
          title: The start position in the result set
          minimum: 0
        numResults:
          type: integer
          format: int64
          description: The number of results to return.
          minimum: 1
          example: 10
        contextConfig:
          $ref: "#/components/schemas/QueryRequestContextConfig"
        corpusKey:
          type: array
          items:
            $ref: "#/components/schemas/servingCorpusKey"
          description: |-
            The query is run on all these corpora, and the results are
            merged together in the response, ranked by score.
        rerankingConfig:
          $ref: "#/components/schemas/QueryRequestRerankingConfig"
        summary:
          type: array
          items:
            $ref: "#/components/schemas/servingSummarizationRequest"
          description: Optionally, one or more requests to summarize the results.
      required: ['numResults', 'corpusKey']
    servingQueryResponsePart:
      type: object
      properties:
        batchQueryResponse:
          $ref: "#/components/schemas/servingBatchQueryResponse"
        responseSet:
          $ref: "#/components/schemas/servingResponseSet"
        summary:
          $ref: "#/components/schemas/servingSummary"
        status:
          type: array
          items:
            $ref: "#/components/schemas/comvectaraStatus"
          description: A status code at the level of a BatchQueryResponse.
      description: |-
        This message contains individual partial results that are returned
        asynchronously by the streaming interface.
    servingResponseSet:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: "#/components/schemas/vectaraservingResponse"
        status:
          type: array
          items:
            $ref: "#/components/schemas/comvectaraStatus"
          description: Potentially multiple warnings.
        document:
          type: array
          items:
            $ref: "#/components/schemas/servingResponseSetDocument"
        summary:
          type: array
          items:
            $ref: "#/components/schemas/servingSummary"
          description: >-
            A summary. If using synchronous APIs for querying, the summary will be

            included directly in this response. However, if using the streaming APIs

            for query, the summary messages only set the future_id field. Later, as

            summary results are computed and returned over the stream, the future_id

            within the summary can be used for correlation.
        futureId:
          type: integer
          format: int32
          description: Populated for streaming requests only.
    servingResponseSetDocument:
      type: object
      properties:
        id:
          type: string
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/servingAttribute"
    servingSummarizationRequest:
      type: object
      properties:
        summarizerPromptName:
          type: string
          description: The name of the summarizer+prompt combination to use for summarization.
        maxSummarizedResults:
          type: integer
          format: int64
          description: Maximum number of results to summarize.
        responseLang:
          type: string
          description: >-
            ISO 639-1 or ISO 639-3 language code for the response, or "auto" to indicate that

            the auto-detected language of the incoming query should be used.
    servingSummary:
      type: object
      properties:
        text:
          type: string
          description: The summary text.
        lang:
          type: string
          description: >-
            ISO 639 language code of the summary. If the requested language was set to "AUTO", the

            summary language is the same as the auto-detected language of the query.
        status:
          type: array
          items:
            $ref: "#/components/schemas/comvectaraStatus"
          description: >-
            Statuses are marked “repeated” for consistency and flexibility. A failed

            summary should bubble up into the status code of the entire ResponseSet.
        futureId:
          type: integer
          format: int32
          description: Populated for streaming requests only.
    vectaraDeleteDocumentRequest:
      type: object
      properties:
        customerId:
          type: string
          format: int64
          description: The Customer ID to issue the request for.
        corpusId:
          type: string
          format: int64
          description: The Corpus ID that contains the document.
          minimum: 1
          example: 1
        documentId:
          type: string
          description: The Document ID to be deleted.
      description: Request to delete a document from an index.
      required: ['customerId', 'corpusId', 'documentId']
    vectaraDeleteDocumentResponse:
      type: object
    vectaraIndexDocumentRequest:
      type: object
      properties:
        customerId:
          type: string
          format: int64
        corpusId:
          type: string
          format: int64
          minimum: 1
          example: 1
          # add required headers
        document:
          $ref: "#/components/schemas/vectaraindexingDocument"
      required: ['customerId', 'corpusId', 'document']
    vectaraIndexDocumentResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
        quotaConsumed:
          $ref: "#/components/schemas/vectaraStorageQuota"
    vectaraStatusCode:
      type: string
      enum:
        - OK
        - FAILURE
        - UNKNOWN
        - INVALID_ARGUMENT
        - DEADLINE_EXCEEDED
        - ALREADY_EXISTS
        - PERMISSION_DENIED
        - RESOURCE_EXHAUSTED
        - FAILED_PRECONDITION
        - ABORTED
        - OUT_OF_RANGE
        - UNIMPLEMENTED
        - INTERNAL
        - UNAVAILABLE
        - DATA_LOSS
        - UNAUTHENTICATED
        - BAD_REQUEST
        - UNAUTHORIZED
        - FORBIDDEN
        - NOT_FOUND
        - METHOD_NOT_ALLOWED
        - CONFLICT
        - UNSUPPORTED_MEDIA_TYPE
        - TOO_MANY_REQUESTS
        - INTERNAL_SERVER_ERROR
        - NOT_IMPLEMENTED
        - SERVICE_UNAVAILABLE
        - INSUFFICIENT_STORAGE
        - UNPARSEABLE_RESPONSE
        - DISABLED_CUSTOMER
        - INVALID_CUSTOMER_ID
        - DISABLED_CORPUS
        - INVALID_CORPUS_ID
        - DISABLED_API_KEY
        - EXPIRED_API_KEY
        - INVALID_API_KEY
        - CMK_INACCESSIBLE
        - QRY__DISABLED_CORPUS
        - QRY__DOCUMENT_DB_FAILURE
        - QRY__ENCODER_FAILURE
        - QRY__INTERRUPTED
        - QRY__INVALID_CORPUS
        - QRY__INVALID_START
        - QRY__INVALID_NUM_RESULTS
        - QRY__INVALID_CONTEXT
        - QRY__MISSING_QUERY
        - QRY__MISSING_CORPUS
        - QRY__TIMEOUT
        - QRY__TOO_MANY_CORPORA
        - QRY__TOO_MANY_QUERIES
        - QRY__VECTOR_INDEX_FAILURE
        - QRY__INVALID_DIMENSION
        - QRY__INVALID_CLIENTKEY
        - QRY__DECRYPTION_FAILURE
        - QRY__INVALID_RERANKER
        - QRY__PARTIAL_RERANK
        - QRY__RERANK_FAILURE
        - QRY__TOO_MANY_RESULT_ROWS
        - QRY__PARTIAL_RETRIEVAL
        - QRY__SMRY__INVALID_SUMMARIZER_PROMPT
        - QRY__SMRY__INVALID_SUMMARY_LANG
        - QRY__SMRY__UNSUPPORTED_SUMMARY_LANG
        - QRY__SMRY__PARTIAL_SUMMARY
        - QRY__SMRY__NO_QUERY_RESULTS
        - QRY__GEN__NO_QUERY_RESULTS
        - QRY__GEN__UNPARSEABLE_MODEL_PARAMS
        - CX_SPECS__INVALID_JSON
        - CX_SPECS__UNREGISTERED_TYPE
        - CX_SPECS__MISSING_SPEC
        - CX_SPECS__MISSING_TYPE
        - CX_SPECS__UNPARSEABLE_SPEC
        - ADM__INVALID_CUSTOMER_ID
        - ADM__INVALID_CORPUS_ID
        - ADM__INVALID_ENCODER_ID
        - ADM__INVALID_ROLE_ID
        - ADM__ROLE_ALREADY_EXISTS
        - ADM__ONLY_ONE_OWNER_SUPPORTED
        - ADM__INVALID_PERMISSION
        - ADM__ROLECREATION_FAILURE
        - ADM__USER_EMAIL_NOT_AVAIALBLE
        - ADM__USERNAME_NOT_AVAILABLE
        - ADM__SIGNUP_MISSING_NAME
        - ADM__SIGNUP_MISSING_ORG
        - ADM__SIGNUP_MISSING_EMAIL
        - ADM__SIGNUP_MISSING_PAYMENT
        - ADM__SIGNUP_MISSING_PLAN
        - ADM__SIGNUP_MISSING_PASSWORD
        - ADM__SIGNUP_INVALID_NAME
        - ADM__SIGNUP_INVALID_ORG
        - ADM__SIGNUP_INVALID_EMAIL
        - ADM__SIGNUP_INVALID_PAYMENT
        - ADM__SIGNUP_INVALID_PLAN
        - ADM__SIGNUP_INVALID_PASSWORD
        - ADM__SIGNUP_INVALID_ACCOUNT_ALIAS
        - ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE
        - ADM__SIGNUP_MISSING_COUNTRY_CODE
        - ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE
        - ADM__CUST_MARK_DELETE_FAILED
        - ADM__CUST_FAISS_DEALLOC_FAILED
        - ADM__CORPUS_LIMIT_REACHED
        - ADM__STRIPE_CARD_DECLINED
        - ADM__STRIPE_PROCESSING_ERROR
        - ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND
        - ADM__EMAIL_NOT_VALIDATED
        - ADM__CHANGE_PLAN__NO_CURRENT_PLAN
        - ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE
        - ADM__CHANGE_PLAN__INVALID_PLAN_ID
        - ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE
        - ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE
        - ADM__CHANGE_PLAN__CONFLICTING_CHANGE
        - SCM__MISCONFIGURED_CONNECTION
        - STATS_DB_READ_FAILURE
        - VDB__TEXT_READ_FAILURE
        - REBUILD__LOW_RECALL
        - REBUILD__INDEX_UPLOAD_FAILURE
        - REBUILD__UPDATE_JOURNAL_FAILURE
        - REBUILD__UPDATE_FAISSPARAMS_FAILURE
        - REBUILD__NO_DATA
        - REBUILD__EVALUATION
        - IDX__TRANSIENT_PARTIAL_DELETION_FAILURE
        - IDX__PERMANENT_PARTIAL_DELETION_FAILURE
      default: OK
    vectaraStorageQuota:
      type: object
      properties:
        numChars:
          type: string
          format: int64
          description: The number of chars from the document that consumed the storage quota.
        numMetadataChars:
          type: string
          format: int64
          description: >-
            The number of chars in the metadata of the document that consumed the

            storage quota.
      title: |-
        Encapsulates storage quota consumed by indexed documents.
        NextId: 3
    vectaraindexingCustomDimension:
      type: object
      properties:
        name:
          type: string
          description: The name of the dimension.
        value:
          type: number
          format: double
          description: The value of the dimension.
      description: The value of a custom dimension. A valid list of custom dimensions is defined ahead of time for a corpus.
    vectaraindexingDocument:
      type: object
      properties:
        documentId:
          type: string
          description: Client assigned document ID to this document.
        title:
          type: string
          description: The title of the document.
        description:
          type: string
          description: An optional description for the document.
        metadataJson:
          type: string
          description: "Metadata about the document. This is a string containing a JSON\nobject. It can be an arbitrary object except that any keys \nthat match a metadata filter of the corpus must have the\nsame value type as metadata filter's value type.\n\nA query can use this object to filter if the object's key/value pair\nhas been defined as a metadata filter.\n\nThe whole object will be in the query result."
        customDims:
          type: array
          items:
            $ref: "#/components/schemas/vectaraindexingCustomDimension"
          description: |-
            A list of custom dimension values that are included in the generated
            representation of all sections.
        section:
          type: array
          items:
            $ref: "#/components/schemas/indexingSection"
          description: |-
            The actual content of the document, structured as a repeating list
            of sections.
      description: A document to index.
    vectaraservingCustomDimension:
      type: object
      properties:
        name:
          type: string
        weight:
          type: number
          format: double
      description: Defined the weight of a custom dimension at query time.
    vectaraservingResponse:
      type: object
      properties:
        text:
          type: string
        score:
          type: number
          format: float
          description: The score used for ranking results.  The higher the score, the better the match.
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/servingAttribute"
        documentIndex:
          type: integer
          format: int64
          description: Use this ID to find the document in the ResponseSet.
        corpusKey:
          $ref: "#/components/schemas/servingCorpusKey"
    indexingCoreDocument:
      type: object
      properties:
        documentId:
          type: string
          description: A document ID to assign to this document.
        metadataJson:
          type: string
          description: |-
            Metadata about the document. This should be a json string. It can be
            retrieved at query time.
        parts:
          type: array
          items:
            $ref: "#/components/schemas/indexingCoreDocumentPart"
          description: All parts of this document.
        defaultPartContext:
          type: string
          description: >-
            This field provides a way to specify a blanket context for all parts. If

            the context in a part is empty, this context will be used.
        customDims:
          type: array
          items:
            $ref: "#/components/schemas/vectaraindexingCustomDimension"
          description: |-
            A list of custom dimension values that are included in the generated
            representation of all parts.
      description: A document to index.
    indexingCoreDocumentPart:
      type: object
      properties:
        text:
          type: string
          description: A part of the document. e.g., a sentence.
        context:
          type: string
          description: Context of the part.
        metadataJson:
          type: string
          description: >-
            Metadata about this part of the document. This should be a json string.

            It is passed through the system, without being used at indexing time. It

            can be retrieved at query time.
        customDims:
          type: array
          items:
            $ref: "#/components/schemas/vectaraindexingCustomDimension"
          title: >-
            A list of custom dimension values that are included in the generated

            representation of this part.  These are optional and take on the corpus

            default custom dimension value if not explicitly provided for the document
      description: Part of a document. A document consists of several such parts.
    vectaraIndexCoreDocumentRequest:
      type: object
      properties:
        customerId:
          type: string
          format: int64
          description: The Customer ID to issue the request for.
        corpusId:
          type: string
          format: int64
          description: The Corpus ID to index the document into.
        document:
          $ref: "#/components/schemas/indexingCoreDocument"
      description: Request to index a document.
    vectaraIndexCoreDocumentResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
        quotaConsumed:
          $ref: "#/components/schemas/vectaraStorageQuota"
  securitySchemes:
    oAuth:
      type: oauth2
      description: OAuth2 access to Vectara
      flows:
        clientCredentials:
          tokenUrl: https://vectara-prod-YOUR_VECTARA_CUSTOMER_ID.auth.us-west-2.amazoncognito.com/oauth2/token
          scopes: {}
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      # defaults
  parameters:
    customerIdentifier:
      in: header
      name: customer-id
      required: true
      description: The Customer ID to use for the request.
      schema:
        type: integer
# add oauth and api key security
security:
  - oAuth: []
# add server endpoint
servers:
  - url: https://api.vectara.io
