openapi: 3.0.0
info:
  title: Vectara REST API
  version: 1.0.0
  termsOfService: https://vectara.com/legal/online-customer-agreement/
  x-logo:
    url: https://docs.vectara.com/img/vectara_wordmark.png
    altText: Vectara
  x-dark-logo:
    url: https://docs.vectara.com/img/vectara_wordmark_light.png
    altText: Vectara
  contact:
    name: Vectara Support
    email: support@vectara.com
    url: http://support.vectara.com/
  description: |-
    Vectara is a neural search platform, built for developers to get the most out of their data.

    You can sign up for an account at [https://vectara.com](https://vectara.com).
# add file upload API
paths:
  /v1/create-corpus:
    post:
      operationId: CreateCorpus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminCreateCorpusResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminCreateCorpusRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
  /v1/delete-corpus:
    post:
      operationId: DeleteCorpus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminDeleteCorpusResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminDeleteCorpusRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
  /v1/delete-doc:
    post:
      operationId: Delete
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectaraDeleteDocumentResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vectaraDeleteDocumentRequest"
        required: true
      tags:
        - IndexService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/index:
    post:
      operationId: Index
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vectaraIndexDocumentResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vectaraIndexDocumentRequest"
        required: true
      tags:
        - IndexService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/list-corpora:
    post:
      operationId: ListCorpora
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminListCorporaResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminListCorporaRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
  /v1/query:
    post:
      operationId: Query
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/servingBatchQueryResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/servingBatchQueryRequest"
      tags:
        - QueryService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/reset-corpus:
    post:
      operationId: ResetCorpus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/adminResetCorpusResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/adminResetCorpusRequest"
        required: true
      tags:
        - AdminService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
  /v1/stream-query:
    post:
      operationId: StreamQuery
      responses:
        "200":
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/servingResponseSet"
                  error:
                    $ref: "#/components/schemas/googlerpcStatus"
                title: Stream result of servingResponseSet
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/googlerpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/servingBatchQueryRequest"
      tags:
        - QueryService
      parameters:
        - $ref: '#/components/parameters/customerIdentifier'
      security:
        - ApiKeyAuth: []
        - oAuth: []
  /v1/upload:
    post:
      operationId: FileUpload
      tags:
        - IndexService
      security:
        - ApiKeyAuth: []
        - oAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: The file to be indexed into Vectara.
                  type: string
                  format: binary
                doc_metadata:
                  description: A JSON string of any additional metadata you want attached to the file.
                  type: string
      parameters:
        - in: query
          name: c
          required: true
          description: Customer ID
          schema:
            type: integer
        - in: query
          name: o
          required: true
          description: Corpus ID
          schema:
            type: integer
        - in: query
          name: d
          required: false
          description: If true, the server returns the extracted document that was indexed
          schema:
            type: boolean
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: object
                    properties:
                      status:
                        type: object
                      quotaConsumed:
                        type: object
                        properties:
                          numChars:
                            type: string
                            description: The number of characters Vectara indexed from the file uploaded.
                          numMetadataChars:
                            type: string
                            description: The number of metadata characters Vectara indexed from the file uploaded.
        "400":
          description: An invalid request was sent.  e.g. one or more parameters was missing, or the corpus does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    description: Returned HTTP code
        "401":
          description: The request was not authenticated
        "403":
          description: The caller is not authorized to add documents to the corpus
        "409":
          description: |-
            A document already exists in the corpus with the same document ID, yet the contents of the indexed document are different than the file being uploaded.
            Since the indexer is idempotent, the same document (identified by the document ID) can be uploaded multiple times.
            The indexer does not support updates yet, so an error is returned when a different document is uploaded for the same document ID
            Note that when a raw file is uploaded, the file name is used as the document ID.
        "507":
          description: There is no more indexing quota left for the corpus or customer to index more documents.  Upgrade your account, add a credit card, or contact sales.
components:
  requestBodies:
    servingBatchQueryRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/servingBatchQueryRequest"
      required: true
  schemas:
    CorpusKeySemantics:
      type: string
      enum:
        - DEFAULT
        - QUERY
        - RESPONSE
      default: DEFAULT
      description: >-
        Semantics controls the interpretation of the query string by the

        server, and can be used to override the default semantics assigned

        in the corpus definition.



         - DEFAULT: Use corpus-assigned semantics.  This is the most common setting.
         - QUERY: Use query semantics.  This is also common.
         - RESPONSE: Use response semantics.  Usage of this is rare.
    QueryRequestRerankingConfig:
      type: object
      properties:
        rerankerId:
          type: integer
          format: int64
          title: |-
            Which reranking model to use if reranking.  Currently, the only ID
            available is ID 272725717
      description: Configuration options to apply to the reranking.
    adminCorpus:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The Corpus ID.
        name:
          type: string
          description: The name of the corpus.
        description:
          type: string
          description: A description for the corpus.
        dtProvision:
          type: string
          format: int64
          description: The time at which the corpus was provisioned.
        enabled:
          type: boolean
          description: Whether the corpus is enabled for use or not.
        swapQenc:
          type: boolean
        swapIenc:
          type: boolean
          description: >-
            The default query encoder is designed for normal question-answering types

            of queries when the text contains the answer.  Swapping the index encoder

            is generally rare, but can be used to help directly match questions to

            questions.  This can be useful if you have a FAQ dataset and you want to

            directly match the user question to the question in the FAQ.
        textless:
          type: boolean
          description: >-
            When a corpus is "textless", Vectara does not store the original text.

            Instead, Vectara converts the text to vectors and only retains metadata.
        encrypted:
          type: boolean
          description: Encryption is on by default and cannot be turned off.
        encoderId:
          type: string
          format: uint64
          description: >-
            This is an advanced setting for changing the underlying model type.  The

            default value is "1", which is Vectara's high-performing global model.

            Underlying models may be swapped for some paying customers by contacting

            our support team.
        metadataMaxBytes:
          type: integer
          format: int64
          description: An optional maximum size of the metadata that each document can contain.
        customDimensions:
          type: array
          items:
            $ref: "#/components/schemas/adminDimension"
        filterAttributes:
          type: array
          items:
            $ref: "#/components/schemas/adminFilterAttribute"
    adminCreateCorpusRequest:
      type: object
      properties:
        corpus:
          $ref: "#/components/schemas/adminCorpus"
    adminCreateCorpusResponse:
      type: object
      properties:
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID that was created.
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    adminDeleteCorpusRequest:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          description: The Customer ID that contains the corpus to be deleted.
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID to be deleted.
    adminDeleteCorpusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    adminDimension:
      type: object
      properties:
        name:
          type: string
          description: |-
            The name of the custom dimension.  The maximum length of the name is
            8 characters.
        description:
          type: string
          description: A description for the custom dimension.
        servingDefault:
          type: number
          format: double
          description: >-
            The default weight to give this dimension when running queries. A value of

            0.0, for example, gives it no weight at all.
        indexingDefault:
          type: number
          format: double
          description: The default value to give to documents for this custom dimension.
      description: >-
        A custom dimension is additional numeric metadata that you want to affect

        Vectara's scoring.  For example, these could be "number of stars" ratings,

        or other business metrics like a product's margins that you want to use

        to boost where a result is in the list.
    adminFilterAttribute:
      type: object
      properties:
        name:
          type: string
          description: Name of the field, as seen in metadata.
        description:
          type: string
          description: An optional description.
        indexed:
          type: boolean
          description: Whether the field is indexed for maximum query speed.
        type:
          $ref: "#/components/schemas/adminFilterAttributeType"
        level:
          $ref: "#/components/schemas/adminFilterAttributeLevel"
      description: Defines metadata fields that can be used in predicate queries.
    adminFilterAttributeLevel:
      type: string
      enum:
        - FILTER_ATTRIBUTE_LEVEL__UNDEFINED
        - FILTER_ATTRIBUTE_LEVEL__DOCUMENT
        - FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART
      default: FILTER_ATTRIBUTE_LEVEL__UNDEFINED
      title: |-
        - FILTER_ATTRIBUTE_LEVEL__DOCUMENT: Document-level attribute
         - FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART: Part-level attribute
    adminFilterAttributeType:
      type: string
      enum:
        - FILTER_ATTRIBUTE_TYPE__UNDEFINED
        - FILTER_ATTRIBUTE_TYPE__INTEGER
        - FILTER_ATTRIBUTE_TYPE__INTEGER_LIST
        - FILTER_ATTRIBUTE_TYPE__REAL
        - FILTER_ATTRIBUTE_TYPE__REAL_LIST
        - FILTER_ATTRIBUTE_TYPE__TEXT
        - FILTER_ATTRIBUTE_TYPE__TEXT_LIST
      default: FILTER_ATTRIBUTE_TYPE__UNDEFINED
    adminListCorporaRequest:
      type: object
      properties:
        filter:
          type: string
          description: A regex to match corpora against.
        numResults:
          type: integer
          format: int64
          description: The maximum results to return.
        pageKey:
          type: string
          format: byte
          description: A key that is passed in to retrieve a specific page of results.
    adminListCorporaResponse:
      type: object
      properties:
        corpus:
          type: array
          items:
            $ref: "#/components/schemas/adminCorpus"
        pageKey:
          type: string
          format: byte
          description: |-
            A key that is passed into a subsequent result in order to
            retrieve the next page of results.
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    adminResetCorpusRequest:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          description: The Customer ID that contains the corpus to be reset.
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID to be reset.
    adminResetCorpusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
    comvectaraStatus:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/vectaraStatusCode"
        statusDetail:
          type: string
    googlerpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
    indexingSection:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: >-
            Optionally, the unique ID of this section. If set, it will be returned as

            metadata in query results.
        title:
          type: string
          description: Optionally, the title of the section. This may be empty.
        text:
          type: string
          description: The text of the section. This should never be empty.
        metadataJson:
          type: string
          description: >-
            Metadata about this section. This should be a json string. It is passed

            through the system, without being used at indexing time. It can be

            retrieved at query time.
        customDims:
          type: array
          items:
            $ref: "#/components/schemas/vectaraindexingCustomDimension"
          description: >-
            A list of custom dimension values that are included in the generated

            representation of all subsections (i.e. sections contains by this section).
        section:
          type: array
          items:
            $ref: "#/components/schemas/indexingSection"
          description: A list of subsections.
      description: A section within a structured document.
    protobufAny:
      type: object
      properties:
        typeUrl:
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that they

            expect it to use in the context of Any. However, for URLs which use the

            scheme `http`, `https`, or no scheme, one can optionally set up a type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]


              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the


              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
        value:
          type: string
          format: byte
          description: Must be a valid serialized protocol buffer of the above specified type.
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.



            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.



            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.



            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go



             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:



            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):



            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    servingAttribute:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    servingBatchQueryRequest:
      type: object
      properties:
        query:
          type: array
          items:
            $ref: "#/components/schemas/servingQueryRequest"
    servingBatchQueryResponse:
      type: object
      properties:
        responseSet:
          type: array
          items:
            $ref: "#/components/schemas/servingResponseSet"
        status:
          type: array
          items:
            $ref: "#/components/schemas/comvectaraStatus"
        metrics:
          $ref: "#/components/schemas/servingPerformanceMetrics"
    servingCorpusKey:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          description: The Customer ID.
        corpusId:
          type: integer
          format: int64
          description: The Corpus ID.
        semantics:
          $ref: "#/components/schemas/CorpusKeySemantics"
        dim:
          type: array
          items:
            $ref: "#/components/schemas/vectaraservingCustomDimension"
          description: Weights on custom dimensions for the corpus.
        metadataFilter:
          type: string
    servingPerformanceMetrics:
      type: object
      properties:
        queryEncodeMs:
          type: integer
          format: int64
          description: How long it took to encode the query.
        retrievalMs:
          type: integer
          format: int64
          description: How long it took to retrieve relevant results.
        userdataRetrievalMs:
          type: integer
          format: int64
          description: How long it took to retrieve user data.
        rerankMs:
          type: integer
          format: int64
          description: How long it took to rerank the results.
      description: Basic performance metrics that can be attached to a server response.
    servingQueryRequest:
      type: object
      properties:
        query:
          type: string
          description: The query text to use from the end user.
        start:
          type: integer
          format: int64
          title: The start position in the result set
        numResults:
          type: integer
          format: int64
          description: The number of results to return.
        corpusKey:
          type: array
          items:
            $ref: "#/components/schemas/servingCorpusKey"
        rerankingConfig:
          $ref: "#/components/schemas/QueryRequestRerankingConfig"
    servingResponse:
      type: object
      properties:
        text:
          type: string
        score:
          type: number
          format: float
          description: The score used for ranking results.  The higher the score, the better the match.
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/servingAttribute"
        documentIndex:
          type: integer
          format: int64
          description: Use this ID to find the document in the ResponseSet.
        corpusKey:
          $ref: "#/components/schemas/servingCorpusKey"
    servingResponseSet:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: "#/components/schemas/servingResponse"
        status:
          type: array
          items:
            $ref: "#/components/schemas/comvectaraStatus"
          description: Potentially multiple warnings.
        document:
          type: array
          items:
            $ref: "#/components/schemas/servingResponseSetDocument"
    servingResponseSetDocument:
      type: object
      properties:
        id:
          type: string
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/servingAttribute"
    vectaraDeleteDocumentRequest:
      type: object
      properties:
        customerId:
          type: string
          format: int64
          description: The Customer ID to issue the request for.
        corpusId:
          type: string
          format: int64
          description: The Corpus ID that contains the document.
        documentId:
          type: string
          description: The Document ID to be deleted.
      description: Request to delete a document from an index.
    vectaraDeleteDocumentResponse:
      type: object
    vectaraIndexDocumentRequest:
      type: object
      properties:
        customerId:
          type: string
          format: int64
        corpusId:
          type: string
          format: int64
        document:
          $ref: "#/components/schemas/vectaraindexingDocument"
    vectaraIndexDocumentResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/comvectaraStatus"
        quotaConsumed:
          $ref: "#/components/schemas/vectaraStorageQuota"
    vectaraStatusCode:
      type: string
      enum:
        - OK
        - FAILURE
        - UNKNOWN
        - INVALID_ARGUMENT
        - DEADLINE_EXCEEDED
        - ALREADY_EXISTS
        - PERMISSION_DENIED
        - RESOURCE_EXHAUSTED
        - FAILED_PRECONDITION
        - ABORTED
        - OUT_OF_RANGE
        - UNIMPLEMENTED
        - INTERNAL
        - UNAVAILABLE
        - DATA_LOSS
        - UNAUTHENTICATED
        - BAD_REQUEST
        - UNAUTHORIZED
        - FORBIDDEN
        - NOT_FOUND
        - METHOD_NOT_ALLOWED
        - CONFLICT
        - UNSUPPORTED_MEDIA_TYPE
        - TOO_MANY_REQUESTS
        - INTERNAL_SERVER_ERROR
        - NOT_IMPLEMENTED
        - SERVICE_UNAVAILABLE
        - INSUFFICIENT_STORAGE
        - UNPARSEABLE_RESPONSE
        - DISABLED_CUSTOMER
        - INVALID_CUSTOMER_ID
        - DISABLED_CORPUS
        - INVALID_CORPUS_ID
        - DISABLED_API_KEY
        - EXPIRED_API_KEY
        - INVALID_API_KEY
        - CMK_INACCESSIBLE
        - QRY__DISABLED_CORPUS
        - QRY__DOCUMENT_DB_FAILURE
        - QRY__ENCODER_FAILURE
        - QRY__INTERRUPTED
        - QRY__INVALID_CORPUS
        - QRY__INVALID_START
        - QRY__INVALID_NUM_RESULTS
        - QRY__INVALID_CONTEXT
        - QRY__MISSING_QUERY
        - QRY__MISSING_CORPUS
        - QRY__TIMEOUT
        - QRY__TOO_MANY_CORPORA
        - QRY__TOO_MANY_QUERIES
        - QRY__VECTOR_INDEX_FAILURE
        - QRY__INVALID_DIMENSION
        - QRY__INVALID_CLIENTKEY
        - QRY__DECRYPTION_FAILURE
        - QRY__INVALID_RERANKER
        - QRY__PARTIAL_RERANK
        - QRY__RERANK_FAILURE
        - QRY__TOO_MANY_RESULT_ROWS
        - QRY__PARTIAL_RETRIEVAL
        - CX_SPECS__INVALID_JSON
        - CX_SPECS__UNREGISTERED_TYPE
        - CX_SPECS__MISSING_SPEC
        - CX_SPECS__MISSING_TYPE
        - CX_SPECS__UNPARSEABLE_SPEC
        - ADM__INVALID_CUSTOMER_ID
        - ADM__INVALID_CORPUS_ID
        - ADM__INVALID_ENCODER_ID
        - ADM__INVALID_ROLE_ID
        - ADM__ROLE_ALREADY_EXISTS
        - ADM__ONLY_ONE_OWNER_SUPPORTED
        - ADM__INVALID_PERMISSION
        - ADM__ROLECREATION_FAILURE
        - ADM__USER_EMAIL_NOT_AVAIALBLE
        - ADM__USERNAME_NOT_AVAILABLE
        - ADM__SIGNUP_MISSING_NAME
        - ADM__SIGNUP_MISSING_ORG
        - ADM__SIGNUP_MISSING_EMAIL
        - ADM__SIGNUP_MISSING_PAYMENT
        - ADM__SIGNUP_MISSING_PLAN
        - ADM__SIGNUP_MISSING_PASSWORD
        - ADM__SIGNUP_INVALID_NAME
        - ADM__SIGNUP_INVALID_ORG
        - ADM__SIGNUP_INVALID_EMAIL
        - ADM__SIGNUP_INVALID_PAYMENT
        - ADM__SIGNUP_INVALID_PLAN
        - ADM__SIGNUP_INVALID_PASSWORD
        - ADM__SIGNUP_INVALID_ACCOUNT_ALIAS
        - ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE
        - ADM__SIGNUP_MISSING_COUNTRY_CODE
        - ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE
        - ADM__CUST_MARK_DELETE_FAILED
        - ADM__CUST_FAISS_DEALLOC_FAILED
        - ADM__CORPUS_LIMIT_REACHED
        - ADM__STRIPE_CARD_DECLINED
        - ADM__STRIPE_PROCESSING_ERROR
        - ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND
        - ADM__EMAIL_NOT_VALIDATED
        - ADM__CHANGE_PLAN__NO_CURRENT_PLAN
        - ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE
        - ADM__CHANGE_PLAN__INVALID_PLAN_ID
        - ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE
        - ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE
        - ADM__CHANGE_PLAN__CONFLICTING_CHANGE
        - SCM__MISCONFIGURED_CONNECTION
        - STATS_DB_READ_FAILURE
        - VDB__TEXT_READ_FAILURE
        - REBUILD__LOW_RECALL
        - REBUILD__INDEX_UPLOAD_FAILURE
        - REBUILD__UPDATE_JOURNAL_FAILURE
        - REBUILD__UPDATE_FAISSPARAMS_FAILURE
        - REBUILD__NO_DATA
        - REBUILD__EVALUATION
        - IDX__TRANSIENT_PARTIAL_DELETION_FAILURE
        - IDX__PERMANENT_PARTIAL_DELETION_FAILURE
      default: OK
    vectaraStorageQuota:
      type: object
      properties:
        numChars:
          type: string
          format: int64
          description: The number of chars from the document that consumed the storage quota.
        numMetadataChars:
          type: string
          format: int64
          description: >-
            The number of chars in the metadata of the document that consumed the

            storage quota.
      title: |-
        Encapsulates storage quota consumed by indexed documents.
        NextId: 3
    vectaraindexingCustomDimension:
      type: object
      properties:
        name:
          type: string
          description: The name of the dimension.
        value:
          type: number
          format: double
          description: The value of the dimension.
      description: The value of a custom dimension. A valid list of custom dimensions is defined ahead of time for a corpus.
    vectaraindexingDocument:
      type: object
      properties:
        documentId:
          type: string
          description: Client assigned document ID to this document.
        title:
          type: string
          description: The title of the document.
        description:
          type: string
          description: An optional description for the document.
        metadataJson:
          type: string
          description: >-
            Metadata about the document. This should be a json string, and it can be

            retrieved at query time.
        customDims:
          type: array
          items:
            $ref: "#/components/schemas/vectaraindexingCustomDimension"
          description: |-
            A list of custom dimension values that are included in the generated
            representation of all sections.
        section:
          type: array
          items:
            $ref: "#/components/schemas/indexingSection"
          description: |-
            The actual content of the document, structured as a repeating list
            of sections.
      description: A document to index.
    vectaraservingCustomDimension:
      type: object
      properties:
        name:
          type: string
        weight:
          type: number
          format: double
      description: Defined the weight of a custom dimension at query time.
  securitySchemes:
    oAuth:
      type: oauth2
      description: OAuth2 access to Vectara
      flows:
        clientCredentials:
          tokenUrl: https://vectara-prod-YOUR_VECTARA_CUSTOMER_ID.auth.us-west-2.amazoncognito.com/oauth2/token
          scopes: {}
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      # add required headers
  parameters:
    customerIdentifier:
      in: header
      name: customer-id
      required: true
      description: The Customer ID to use for the request.
# add oauth and api key security
security:
  - oAuth: []
tags:
  - name: AdminService
    description: Administrative services, such as creating or deleting corpora
  - name: IndexService
    description: Indexing operations, such as creating and deleting documents
  - name: QueryService
    description: Query operations, such as performing a standard search
# add server endpoint
servers:
  - url: https://api.vectara.io
