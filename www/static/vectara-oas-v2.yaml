openapi: 3.0.0
info:
  title: Vectara REST API v2
  description: 'Vectara provides an end-to-end platform for creating GenAI products
    using a simple to use API.

    You can [sign up for an account](https://console.vectara.com/console/signup) and
    then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with
    example queries and parameter values.

    The Vectara API Playground lets you experiment with REST endpoints from your browser.
    Select an endpoint to view its definition, including the required or optional
    headers, body, responses, and sample commands. On the right side of each endpoint
    page, like [Get Corpus](/docs/rest-api/get-corpus), you manually enter your API
    Key or OAuth Bearer Token, `customer_id`, and then any required body parameters
    like the `corpusID` before sending the API request.

    :::note

    Vectara supports two primary methods of authentication: API keys and OAuth 2.0,
    which are applicable to all endpoints. Query API Keys are used for read-only querying
    operations, while Index API Keys provide read and write access. The OAuth 2.0
    operations authenticate with a Bearer Token via the OAuth 2.0 client credentials
    grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2)
    about how to generate the token.'
  version: 2.0.0
  termsOfService: https://vectara.com/legal/terms-of-service/
  x-logo:
    url: https://docs.vectara.com/img/vectara_wordmark.png
    altText: Vectara
  x-dark-logo:
    url: https://docs.vectara.com/img/vectara_wordmark_light.png
    altText: Vectara
  contact:
    email: feedback@vectara.com
servers:
- url: https://api.vectara.io
security:
- ApiKeyAuth: []
- OAuth2: []
tags:
- name: Agents
  description: Create and interact with AI agents that can use tools and corpora to
    perform complex queries
- name: Agent Sessions
  description: Manage agent sessions and interact with agents through conversational
    events
- name: Agent Connectors
  description: Create and manage connectors that allow agents to receive events from
    external platforms like Slack
- name: Authentication
  description: Authenticate with the API using OAuth 2.0 or API keys
- name: Queries
  description: Perform search and Retrieval Augmented Generation (RAG) operations
    on one or more corpora
- name: Upload
  description: Upload files to a corpus for automatic parsing, text extraction, chunking,
    and indexing
- name: Index
  description: Index and manage both core and structured documents to enable efficient
    search and retrieval
- name: Corpora
  description: Create, manage, and update corpora and their associated settings
- name: Documents
  description: Retrieve and manage documents stored in a corpus for administrative
    tasks
- name: Chats
  description: Create, manage, and interact with chat sessions for conversational
    AI
- name: Generation Presets
  description: Manage generation presets for controlling the behavior of generative
    AI responses
- name: Query History
  description: Retrieve and manage the history of previous queries for analytics and
    auditing
- name: API Keys
  description: Create, manage, and revoke API keys for secure access to the platform
- name: Application Clients
  description: Configure and manage application clients for OAuth authentication
- name: Large Language Models
  description: List LLMs for text summarization, chat, and other generation tasks
- name: Encoders
  description: List available encoders (such as Boomerang) that turn text into vectors
- name: Rerankers
  description: List rerankers for reranking search results
- name: Jobs
  description: Monitor background jobs such as rebuilding indexes or updating corpus
    settings
- name: Users
  description: Create, manage, and authenticate users within the platform for user
    administration
- name: Table Extractors
  description: List available extractors for tabular data from documents
- name: Hallucination Correctors
  description: API for managing hallucination correction, including listing available
    models and correcting hallucinated content in generated text
- name: LLM Chat Completions
  description: Create model responses for chat conversations using OpenAI-compatible
    endpoints
- name: Factual Consistency Evaluation
  description: Evaluate text quality metrics like factual consistency and hallucination
    detection
- name: Metadata Query
  description: Query across arbitrary metadata fields in a corpus
- name: Tool Servers
  description: Manage tool servers that provide access to external tools for AI agents
- name: Tools
  description: Manage and discover tools available for AI agents to use in their workflows
- name: Instructions
  description: Create and manage instructions that guide agent behavior
paths:
  /v2/corpora:
    post:
      summary: Create a corpus
      description: Create a corpus, which is a container to store documents and associated
        metadata. Here, you define the unique `corpus_key` that identifies the corpus.
        The `corpus_key` can be custom-defined following your preferred naming convention,
        allowing you to easily manage the corpus's data and reference it in queries.
        For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
      operationId: createCorpus
      tags:
      - Corpora
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCorpusRequest'
            examples:
              Financial:
                summary: Create a corpus for storing financial documents related to
                  ESG compliance in EU banks.
                value:
                  key: fin_esg_docs
                  name: EU Bank ESG Compliance
                  description: A corpus for storing and querying financial documents,
                    such as annual reports and ESG compliance filings, for European
                    banks in 2023.
                  save_history: true
                  encoder_name: boomerang-2023-q3
                  filter_attributes:
                  - level: part
                    name: industry
                    type: text
                    description: The industry sector of the document (banking).
                    indexed: true
                  - level: part
                    name: region
                    type: text
                    description: The geographical region of the document (EU).
                    indexed: true
                  - level: part
                    name: year
                    type: integer
                    description: The publication year of the document (2023).
                    indexed: true
                  - level: part
                    name: doc_type
                    type: text
                    description: The type of document (annual_report).
                    indexed: true
              Legal:
                summary: Create a corpus for legal documents focusing on intellectual
                  property cases in California.
                value:
                  key: legal_ip_cases
                  name: California IP Case Law
                  description: A corpus for indexing and searching legal documents
                    related to intellectual property rights cases in California, including
                    court rulings and contracts.
                  save_history: true
                  encoder_name: boomerang-2023-q3
                  filter_attributes:
                  - level: part
                    name: jurisdiction
                    type: text
                    description: The legal jurisdiction of the document (California).
                    indexed: true
                  - level: part
                    name: legal_domain
                    type: text
                    description: The legal domain of the document (IP).
                    indexed: true
                  - level: part
                    name: year
                    type: integer
                    description: The year of the case or document (2023).
                    indexed: true
                  - level: part
                    name: case_name
                    type: text
                    description: The name of the legal case (TechCo v. Ex-Employee).
                    indexed: true
              Support:
                summary: Create a corpus for technical support knowledge base articles
                  addressing web portal issues.
                value:
                  key: support_web_portal
                  name: Web Portal Support KB
                  description: A corpus for storing knowledge base articles to troubleshoot
                    issues in a web portal application, focusing on part-level metadata
                    for precise query filtering.
                  save_history: true
                  encoder_name: boomerang-2023-q3
                  filter_attributes:
                  - name: product
                    level: part
                    type: text
                    description: The product or application (portal_app).
                    indexed: true
                  - name: browser
                    level: part
                    type: text
                    description: The browser used (chrome).
                    indexed: true
                  - name: category
                    level: part
                    type: text
                    description: The issue category (sso, caching).
                    indexed: true
      responses:
        '201':
          description: The corpus has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
              examples:
                Financial:
                  summary: Newly created corpus for EU bank ESG compliance documents.
                  value:
                    id: crp_1001
                    key: fin_esg_docs
                    name: EU Bank ESG Compliance
                    description: A corpus for storing and querying financial documents,
                      such as annual reports and ESG compliance filings, for European
                      banks in 2023.
                    enabled: true
                    save_history: true
                    queries_are_answers: false
                    documents_are_questions: false
                    encoder_name: boomerang-2023-q3
                    filter_attributes:
                    - level: document
                      name: industry
                      type: text
                      description: The industry sector of the document (banking).
                      indexed: true
                    - level: document
                      name: region
                      type: text
                      description: The geographical region of the document (EU).
                      indexed: true
                    - level: document
                      name: year
                      type: integer
                      description: The publication year of the document (2023).
                      indexed: true
                    - level: document
                      name: doc_type
                      type: text
                      description: The type of document (annual_report).
                      indexed: true
                    limits:
                      used_docs: 0
                      used_parts: 0
                      used_bytes: 0
                      used_characters: 0
                      max_bytes: 0
                      max_metadata_bytes: 1048576
                      index_rate: 0
                    created_at: '2025-06-17T15:10:00Z'
                Legal:
                  summary: Newly created corpus for California intellectual property
                    case law.
                  value:
                    id: crp_1002
                    key: legal_ip_cases
                    name: California IP Case Law
                    description: A corpus for indexing and searching legal documents
                      related to intellectual property rights cases in California,
                      including court rulings and contracts.
                    enabled: true
                    save_history: true
                    queries_are_answers: false
                    documents_are_questions: false
                    encoder_name: boomerang-2023-q3
                    filter_attributes:
                    - level: document
                      name: jurisdiction
                      type: text
                      description: The legal jurisdiction of the document (California).
                      indexed: true
                    - level: document
                      name: legal_domain
                      type: text
                      description: The legal domain of the document (IP).
                      indexed: true
                    - level: document
                      name: year
                      type: integer
                      description: The year of the case or document (2023).
                      indexed: true
                    - level: document
                      name: case_name
                      type: text
                      description: The name of the legal case (TechCo v. Ex-Employee).
                      indexed: true
                    limits:
                      used_docs: 0
                      used_parts: 0
                      used_bytes: 0
                      used_characters: 0
                      max_bytes: 0
                      max_metadata_bytes: 1048576
                      index_rate: 0
                    created_at: '2025-06-17T15:10:00Z'
                Support:
                  summary: Newly created corpus for web portal technical support knowledge
                    base.
                  value:
                    id: crp_1003
                    key: support_web_portal
                    name: Web Portal Support KB
                    description: A corpus for storing knowledge base articles to troubleshoot
                      issues in a web portal application, focusing on part-level metadata
                      for precise query filtering.
                    enabled: true
                    save_history: true
                    queries_are_answers: false
                    documents_are_questions: false
                    encoder_name: boomerang-2023-q3
                    filter_attributes:
                    - name: product
                      level: part
                      type: text
                      description: The product or application (portal_app).
                      indexed: true
                    - name: browser
                      level: part
                      type: text
                      description: The browser used (chrome).
                      indexed: true
                    - name: category
                      level: part
                      type: text
                      description: The issue category (sso, caching).
                      indexed: true
                    limits:
                      used_docs: 0
                      used_parts: 0
                      used_bytes: 0
                      used_characters: 0
                      max_bytes: 0
                      max_metadata_bytes: 1048576
                      index_rate: 0
                    created_at: '2025-06-17T15:10:00Z'
        '400':
          description: Invalid request body in the create corpus request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The corpus already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: create
    get:
      summary: List corpora
      description: List corpora in the account. The returned corpus objects contain
        less detail compared to those retrieved the direct corpus retrieval operation.
      operationId: listCorpora
      tags:
      - Corpora
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: limit
        in: query
        description: The maximum number of corpora to return at one time.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: filter
        in: query
        description: A regular expression to filter the corpora by their name or summary.
        required: false
        schema:
          type: string
        example: Vectara Content
      - name: corpus_id
        in: query
        description: Filter corpora to only include corpora with these IDs.
        required: false
        schema:
          type: array
          items:
            type: string
            pattern: crp_[0-9]+$
        example:
        - crp_12345
      - name: page_key
        in: query
        description: Used to retrieve the next page of corpora after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of corpora.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCorporaResponse'
              examples:
                Legal:
                  summary: List of corpora containing legal documents, such as employment
                    contracts and non-disclosure agreements, with metadata filters
                    for jurisdiction and document type to support precise querying
                    for legal analysis
                  value:
                    corpora:
                    - id: crp_12345
                      key: legal-contracts-2025
                      name: Legal Contracts
                      description: Corpus for storing and querying employment contracts
                        and legal agreements, primarily for Delaware and California
                        jurisdictions.
                      enabled: true
                      chat_history_corpus: false
                      queries_are_answers: false
                      documents_are_questions: false
                      encoder_name: boomerang-2023-q3
                      save_history: true
                      filter_attributes:
                      - name: jurisdiction
                        level: document
                        description: The legal jurisdiction of the contract.
                        indexed: true
                        type: text
                      - name: type
                        level: document
                        description: The type of legal document (employment_contract,
                          nda).
                        indexed: true
                        type: text
                      limits:
                        used_docs: 150
                        used_parts: 4500
                        used_characters: 2500000
                        max_metadata_bytes: 10485760
                        index_rate: 0
                      created_at: '2025-06-27T13:47:00Z'
                    metadata:
                      page_key: page_legal_001
                Finance:
                  summary: List of corpora storing financial reports and equity policies
                    for banking and tech sectors, with metadata filters for sector
                    and reporting period to enable targeted financial analysis
                  value:
                    corpora:
                    - id: crp_67890
                      key: fin-reports-2025
                      name: Financial Reports
                      description: Corpus for quarterly financial reports and equity
                        compensation policies, focused on banking and technology sectors
                        in North America.
                      enabled: true
                      chat_history_corpus: false
                      queries_are_answers: false
                      documents_are_questions: false
                      encoder_name: boomerang-2023-q3
                      save_history: true
                      filter_attributes:
                      - name: sector
                        level: document
                        description: The industry sector of the financial report (Banking,
                          Technology).
                        indexed: true
                        type: text
                      - name: quarter
                        level: document
                        description: The reporting quarter (Q1-2025).
                        indexed: true
                        type: text
                      limits:
                        used_docs: 200
                        used_parts: 6000
                        used_characters: 3500000
                        max_metadata_bytes: 10485760
                        index_rate: 0
                      created_at: '2025-06-27T13:48:00Z'
                    metadata:
                      page_key: page_fin_002
                Support:
                  summary: List of corpora designed for storing chat-based support
                    ticket interactions, with metadata filters for issue type and
                    platform to facilitate troubleshooting and analysis of customer
                    support queries
                  value:
                    corpora:
                    - id: crp_98765
                      key: support-tickets-2025
                      name: Support Tickets
                      description: Corpus for storing chat-based support ticket interactions,
                        particularly for authentication and web portal issues on Chrome
                        and other platforms.
                      enabled: true
                      chat_history_corpus: true
                      queries_are_answers: false
                      documents_are_questions: false
                      encoder_name: boomerang-2023-q3
                      save_history: true
                      filter_attributes:
                      - name: issue
                        level: document
                        description: The type of support issue (auth_token_stale,
                          login_error).
                        indexed: true
                        type: text
                      - name: platform
                        level: document
                        description: The platform where the issue occurred (web_portal,
                          mobile_app).
                        indexed: true
                        type: text
                      limits:
                        used_docs: 500
                        used_parts: 10000
                        used_characters: 5000000
                        max_metadata_bytes: 10485760
                        index_rate: 0
                      created_at: '2025-06-27T13:49:00Z'
                    metadata:
                      page_key: page_support_003
        '403':
          description: Permissions do not allow listing corpora.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.corpora
  /v2/corpora/{corpus_key}:
    get:
      tags:
      - Corpora
      summary: Retrieve metadata about a corpus
      description: Get metadata about a corpus. This operation does not search the
        corpus contents. Specify the `corpus_key` to identify the corpus whose metadata
        you want to retrieve. The `corpus_key` is created when the corpus is set up,
        either through the Vectara Console UI or the Create Corpus API. For more information,
        see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
      operationId: getCorpus
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to retrieve.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
        examples:
          Financial:
            summary: Retrieve metadata for the EU bank ESG compliance corpus
            value: fin_esg_docs
          Legal:
            summary: Retrieve metadata for the California IP case law corpus
            value: legal_ip_cases
          Support:
            summary: Retrieve metadata for the web portal support knowledge base corpus
            value: support_web_portal
      responses:
        '200':
          description: A corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
              examples:
                Financial:
                  summary: Metadata for the EU bank ESG compliance corpus
                  value:
                    id: crp_1001
                    key: fin_esg_docs
                    name: EU Bank ESG Compliance
                    description: A corpus for storing and querying financial documents,
                      such as annual reports and ESG compliance filings, for European
                      banks in 2023.
                    enabled: true
                    save_history: true
                    queries_are_answers: false
                    documents_are_questions: false
                    encoder_name: boomerang-2023-q3
                    filter_attributes:
                    - name: industry
                      type: text
                      level: document
                      description: The industry sector of the document (banking).
                      indexed: true
                    - name: region
                      type: text
                      level: document
                      description: The geographical region of the document (EU).
                      indexed: true
                    - name: year
                      type: integer
                      level: document
                      description: The publication year of the document (2023).
                      indexed: true
                    - name: doc_type
                      type: text
                      level: document
                      description: The type of document (annual_report).
                      indexed: true
                    limits:
                      used_docs: 150
                      used_parts: 4500
                      used_bytes: 0
                      used_characters: 1200000
                      max_bytes: 0
                      max_metadata_bytes: 1048576
                      index_rate: 0
                    created_at: '2025-06-17T15:10:00Z'
                Legal:
                  summary: Metadata for the California IP case law corpus
                  value:
                    id: crp_1002
                    key: legal_ip_cases
                    name: California IP Case Law
                    description: A corpus for indexing and searching legal documents
                      related to intellectual property rights cases in California,
                      including court rulings and contracts.
                    enabled: true
                    save_history: true
                    queries_are_answers: false
                    documents_are_questions: false
                    encoder_name: boomerang-2023-q3
                    filter_attributes:
                    - name: jurisdiction
                      type: text
                      level: document
                      description: The legal jurisdiction of the document (California).
                      indexed: true
                    - name: legal_domain
                      type: text
                      level: document
                      description: The legal domain of the document (IP).
                      indexed: true
                    - name: year
                      type: integer
                      level: document
                      description: The year of the case or document (2023).
                      indexed: true
                    - name: case_name
                      type: text
                      level: document
                      description: The name of the legal case (TechCo v. Ex-Employee).
                      indexed: true
                    limits:
                      used_docs: 200
                      used_parts: 6000
                      used_bytes: 0
                      used_characters: 1800000
                      max_bytes: 0
                      max_metadata_bytes: 1048576
                      index_rate: 0
                    created_at: '2025-06-17T15:10:00Z'
                Support:
                  summary: Metadata for the web portal support knowledge base corpus
                  value:
                    id: crp_1003
                    key: support_web_portal
                    name: Web Portal Support KB
                    description: A corpus for storing knowledge base articles to troubleshoot
                      issues in a web portal application, focusing on part-level metadata
                      for precise query filtering.
                    enabled: true
                    save_history: true
                    queries_are_answers: false
                    documents_are_questions: false
                    encoder_name: boomerang-2023-q3
                    filter_attributes:
                    - name: product
                      type: text
                      level: part
                      description: The product or application (portal_app).
                      indexed: true
                    - name: browser
                      type: text
                      level: part
                      description: The browser used (chrome).
                      indexed: true
                    - name: category
                      type: text
                      level: part
                      description: The issue category (sso, caching).
                      indexed: true
                    limits:
                      used_docs: 100
                      used_parts: 3000
                      used_bytes: 0
                      used_characters: 900000
                      max_bytes: 0
                      max_metadata_bytes: 1048576
                      index_rate: 0
                    created_at: '2025-06-17T15:10:00Z'
        '403':
          description: Permissions do not allow retrieving the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: get
    delete:
      tags:
      - Corpora
      summary: Delete a corpus and all its data
      description: Permanently delete a corpus and all its associated data. The `corpus_key`
        uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
      operationId: deleteCorpus
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to delete.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      responses:
        '204':
          description: Successfully deleted a corpus.
        '403':
          description: Permissions do not allow deleting the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: delete
    patch:
      tags:
      - Corpora
      summary: Update a corpus
      description: Enable, disable, or update the name and description of a corpus.
        This lets you manage data availability without deleting the corpus, which
        is useful for maintenance and security purposes. The `corpus_key` uniquely
        identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
        Consider updating the name and description of a corpus dynamically to help
        keep your data aligned with changing business needs.
      operationId: updateCorpus
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to update.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorpusRequest'
      responses:
        '200':
          description: Successfully modified the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '403':
          description: Permissions do not allow updating the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: update
  /v2/corpora/{corpus_key}/reset:
    post:
      tags:
      - Corpora
      summary: Remove all documents and data in a corpus
      description: Resets a corpus, which removes all documents and data from the
        specified corpus, while keeping the corpus itself. The `corpus_key` uniquely
        identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
      operationId: resetCorpus
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to reset.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      responses:
        '204':
          description: Successfully reset a corpus.
        '403':
          description: Permissions do not allow resetting the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: reset
  /v2/corpora/{corpus_key}/replace_filter_attributes:
    post:
      tags:
      - Corpora
      summary: Replace the filter attributes of a corpus
      operationId: replaceFilterAttributes
      description: 'Replace the filter attributes of a corpus. This does not happen
        immediately, as this operation creates a job that completes asynchronously.
        These new filter attributes will not work until the job completes.

        You can monitor the status of the filter change using the returned job ID.
        The `corpus_key` uniquely identifies the corpus. For more information, see
        [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).'
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus having its filters replaced.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceFilterAttributesRequest'
            examples:
              Legal:
                summary: Replace filter attributes for a legal contracts corpus to
                  enable querying by jurisdiction and document type, supporting precise
                  legal analysis
                value:
                  filter_attributes:
                  - name: jurisdiction
                    level: document
                    description: The legal jurisdiction of the contract (Delaware,
                      California).
                    indexed: true
                    type: text
                  - name: type
                    level: document
                    description: The type of legal document (employment_contract,
                      nda).
                    indexed: true
                    type: text
              Finance:
                summary: Replace filter attributes for a financial reports corpus
                  to facilitate querying by sector and reporting period, enhancing
                  financial data analysis
                value:
                  filter_attributes:
                  - name: sector
                    level: document
                    description: The industry sector of the financial report (Banking,
                      Technology).
                    indexed: true
                    type: text
                  - name: quarter
                    level: document
                    description: The reporting quarter (Q1-2025).
                    indexed: true
                    type: text
              Support:
                summary: Replace filter attributes for a support tickets corpus to
                  support querying by issue type and platform, streamlining customer
                  support troubleshooting
                value:
                  filter_attributes:
                  - name: issue
                    level: document
                    description: The type of support issue (auth_token_stale, login_error).
                    indexed: true
                    type: text
                  - name: platform
                    level: document
                    description: The platform where the issue occurred (web_portal,
                      mobile_app).
                    indexed: true
                    type: text
      responses:
        '200':
          description: Successfully created a job that will replace the filter attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceFilterAttributesResponse'
              examples:
                Legal:
                  summary: Initiated a job to replace filter attributes for a legal
                    contracts corpus, enabling queries by jurisdiction and document
                    type for efficient contract analysis
                  value:
                    job_id: job_legal_45678
                    status: queued
                Finance:
                  summary: Initiated a job to replace filter attributes for a financial
                    reports corpus, allowing queries by sector and quarter to support
                    detailed financial insights
                  value:
                    job_id: job_fin_78901
                    status: queued
                Support:
                  summary: Initiated a job to replace filter attributes for a support
                    tickets corpus, enabling queries by issue type and platform to
                    optimize support ticket resolution
                  value:
                    job_id: job_support_23456
                    status: queued
        '403':
          description: Permissions do not allow replacing filter attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: replaceFilterAttributes
  /v2/corpora/{corpus_key}/compute_size:
    post:
      tags:
      - Corpora
      summary: Compute the current size of a corpus
      description: Compute the current size of a corpus, including number of documents,
        parts, and characters. The `corpus_key` uniquely identifies the corpus. For
        more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).
      operationId: computeCorpusSize
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to compute size for.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      responses:
        '200':
          description: Successfully computed the corpus size.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeCorpusSizeResponse'
        '403':
          description: Permissions do not allow computing size for this corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: compute_size
  /v2/corpora/{corpus_key}/upload_file:
    post:
      tags:
      - Upload
      summary: Upload a file to the corpus
      description: "Upload a file, such as a PDF or Word document, to the specified\
        \ corpus for automatic text extraction and metadata parsing.  \n\nThis endpoint\
        \ expects a `multipart/form-data` request with the following fields:  \n\n\
        - **metadata**: An optional JSON object containing additional metadata to\
        \ associate with the document.  \n  Example: `metadata={\"key\": \"value\"\
        }`\n- **chunking_strategy**: An optional JSON object that sets the chunking\
        \ method for text extraction.  \n  - By default, the platform uses sentence-based\
        \ chunking (one chunk per sentence).\n  - Example for explicit sentence chunking:\
        \ `chunking_strategy={\"type\":\"sentence_chunking_strategy\"}`\n  - Example\
        \ for max chars chunking: `chunking_strategy={\"type\":\"max_chars_chunking_strategy\"\
        ,\"max_chars_per_chunk\":512}`\n- **table_extraction_config**: An optional\
        \ JSON object to control table extraction from supported file types (e.g.,\
        \ PDF).  \n  Example: `table_extraction_config={\"extract_tables\": true}`\n\
        - **file**: The file to upload. Attach your file as the value for this field.\n\
        - **filename**: The desired name for the uploaded file. Specify as part of\
        \ the file field in your request.\n"
      operationId: uploadFile
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus of which to upload the
          file.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      requestBody:
        description: Upload a file for the Vectara platform to attempt to parse and
          turn into a document within the corpus. The first part of the multipart
          request can contain any document metadata to attach to the parsed document.
          Only one document may be uploaded at a time.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFileRequest'
            encoding:
              metadata:
                contentType: application/json
              chunking_strategy:
                contentType: application/json
              table_extraction_config:
                contentType: application/json
              file:
                contentType: application/octet-stream, application/pdf, application/msword,
                  application/vnd.openxmlformats-officedocument.wordprocessingml.document,
                  application/vnd.oasis.opendocument.text, application/epub+zip, application/rtf,
                  text/html, text/plain, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation,
                  text/markdown
              filename:
                contentType: text/plain
      responses:
        '201':
          description: The extracted document has been parsed and added to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Upload file request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow uploading a file to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '415':
          description: The media type of the uploaded file is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-examples:
      - code-samples:
        - language: python
          code: "from vectara import Vectara\n\nclient = Vectara(\n    api_key=\"\
            YOUR_API_KEY\",\n    # or\n    client_id=\"YOUR_CLIENT_ID\",\n    client_secret=\"\
            YOUR_CLIENT_SECRET\",\n)\nclient.upload.file(\n    corpus_key=corpus_key,\n\
            \    file=content,\n    filename=slugify(url),\n)\n"
      x-fern-sdk-group-name: upload
      x-fern-sdk-method-name: file
  /v2/corpora/{corpus_key}/documents:
    post:
      tags:
      - Index
      summary: Add a document to a corpus
      description: 'Add a document to a corpus. This endpoint supports two document
        formats: structured and core.


        * **Structured** documents have a conventional structure that provides document
        sections and parts in a format created by our proprietary strategy automatically.
        You provide a logical document structure, and Vectara handles the partitioning.

        * **Core** documents differ in that they follow an advanced, granular structure
        that explicitly defines each document part in an array. Each part becomes
        a distinct, searchable item in query results. You have precise control over
        the document structure and content.


        For more details, see [Indexing](https://docs.vectara.com/docs/learn/select-ideal-indexing-api).

        '
      operationId: createCorpusDocument
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the queried corpus.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document added to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Document creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow adding a document to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '409':
          description: The document already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: create
      x-fern-examples:
      - path-parameters:
          corpus_key: my-corpus-key
        request:
          id: my-doc-id
          type: structured
          sections:
          - id: 1
            title: A nice title.
            text: I'm a nice document section.
            metadata:
              section: '1.1'
          - id: 2
            title: Another nice title.
            text: I'm another document section on something else.
            metadata:
              section: '1.2'
          metadata:
            url: https://example.com
        response:
          body: {}
    get:
      tags:
      - Documents
      summary: List the documents in the corpus
      description: Retrieve a list of documents stored in a specific corpus. This
        endpoint provides an overview of document metadata without returning the full
        content of each document.
      operationId: listCorpusDocuments
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the queried corpus.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - name: limit
        in: query
        description: The maximum number of documents to return at one time.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 10
      - name: metadata_filter
        in: query
        description: Filter documents by metadata. Uses the same expression as a query
          metadata filter, but only allows filtering on document metadata.
        required: false
        schema:
          type: string
      - name: page_key
        in: query
        description: Used to retrieve the next page of documents after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of documents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
        '403':
          description: Permissions do not allow listing documents in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.documents
  /v2/corpora/{corpus_key}/documents/{document_id}:
    delete:
      tags:
      - Documents
      summary: Delete a document
      description: Permanently delete a document identified by its unique `document_id`
        from a specific corpus. This operation cannot be undone, so use it with caution.
      operationId: deleteCorpusDocument
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus with the document to delete.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - in: path
        name: document_id
        description: The document ID of the document to delete. This `document_id`
          must be percent encoded.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successfully deleted the document.
        '403':
          description: Permissions do not allow deleting a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: delete
    get:
      tags:
      - Documents
      summary: Retrieve a document
      description: Retrieve the content and metadata of a specific document, identified
        by its unique `document_id` from a specific corpus.
      operationId: getCorpusDocument
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus containing the document
          to retrieve.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - in: path
        name: document_id
        description: The document ID of the document to retrieve. This `document_id`
          must be percent encoded.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully retrieved the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          description: Permissions do not allow retrieving a document from the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Index
      summary: Update document, merging the metadata.
      description: Updates document identified by its unique `document_id` from a
        specific corpus. The request body metadata is merged with the existing metadata,
        adding or modifying only the specified fields.
      operationId: updateCorpusDocument
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus with the document to update.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - in: path
        name: document_id
        description: The document ID of the document to update. This `document_id`
          must be percent encoded.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Successfully updated the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          description: Permissions do not allow updating a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '429':
          description: Too many concurrent requests. Please retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: update
  /v2/corpora/{corpus_key}/documents/{document_id}/metadata:
    put:
      tags:
      - Index
      summary: Replace the document metadata.
      description: Replaces metadata of a document identified by its unique `document_id`
        from a specific corpus.
      operationId: replaceCorpusDocumentMetadata
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus with the document to update.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - in: path
        name: document_id
        description: The document ID of the document to update. This `document_id`
          must be percent encoded.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Successfully updated the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          description: Permissions do not allow updating a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '429':
          description: Too many concurrent requests. Please retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: update_metadata
  /v2/corpora/{corpus_key}/documents/{document_id}/summarize:
    post:
      tags:
      - Documents
      summary: Summarize a document
      description: Summarize a document identified by its unique `document_id` from
        a specific corpus.
      operationId: summarizeCorpusDocument
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus containing the document
          to retrieve.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - in: path
        name: document_id
        description: The document ID of the document to retrieve. This `document_id`
          must be percent encoded.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SummarizeDocumentRequest'
            examples:
              Legal:
                summary: Request to summarize an employment contract document, using
                  Mockingbird LLM to extract key clause details for legal analysis
                  in a Delaware-based corpus
                value:
                  llm_name: mockingbird-2.0
                  prompt_template: Summarize the key clauses of the employment contract
                    in ${document.metadata.jurisdiction}, focusing on arbitration,
                    confidentiality, and termination terms.
                  model_parameters:
                    max_tokens: 200
                    temperature: 0.7
                  stream_response: false
              Finance:
                summary: "Request to summarize a Q1 2025 financial report, using Vectara\u2019\
                  s Omni LLM to highlight key financial metrics for a banking sector\
                  \ corpus"
                value:
                  llm_name: vectara-summary-ext-24-05-med-omni
                  prompt_template: Provide a concise summary of the financial report
                    for ${document.metadata.quarter}, focusing on revenue, EBITDA
                    margin, and net income.
                  model_parameters:
                    max_tokens: 350
                    temperature: 0.5
                  stream_response: false
              Support:
                summary: Request to summarize a support ticket log document, using
                  Mockingbird LLM to outline resolution steps for an authentication
                  issue in a web portal corpus
                value:
                  llm_name: mockingbird-2.0
                  prompt_template: Summarize the resolution steps for the support
                    ticket issue ${document.metadata.issue} in the ${document.metadata.platform}.
                  model_parameters:
                    max_tokens: 200
                    temperature: 0.6
                  stream_response: false
      x-stream-based-on-body: streamResponse()
      responses:
        '200':
          description: Document summarization response on success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizeDocumentResponse'
              examples:
                Legal:
                  summary: Summarized an employment contract document, extracting
                    key clauses like arbitration and confidentiality using Mockingbird
                    LLM for a Delaware-based legal corpus
                  value:
                    summary: The employment contract in Delaware, governed by California
                      law, mandates binding arbitration via AAA with a 30-day opt-out
                      period, includes a 5-year confidentiality term, and specifies
                      termination with 30-day notice.
                    rendered_prompt: Summarize the key clauses of the employment contract
                      in Delaware, focusing on arbitration, confidentiality, and termination
                      terms.
                Finance:
                  summary: "Summarized a Q1 2025 financial report, highlighting revenue,\
                    \ EBITDA margin, and net income using Vectara\u2019s Omni LLM\
                    \ for a banking sector corpus"
                  value:
                    summary: The Q1 2025 financial report for the banking sector shows
                      revenue of $150.2M, an EBITDA margin of 15.2%, and net income
                      of $45.8M.
                    rendered_prompt: Provide a concise summary of the financial report
                      for Q1-2025, focusing on revenue, EBITDA margin, and net income.
                Support:
                  summary: Summarized a support ticket log document, detailing resolution
                    steps for a stale token issue in a web portal using Mockingbird
                    LLM
                  value:
                    summary: The support ticket for a stale token issue in the web
                      portal was resolved by detecting sign-out and purging local
                      tokens via JavaScript, with actions logged on 2025-05-18 to
                      2025-05-20.
                    rendered_prompt: Summarize the resolution steps for the support
                      ticket issue auth_token_stale in the web_portal.
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SummarizeDocumentStreamedResponse'
        '403':
          description: Permissions do not allow summarizing a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: summarize
  /v2/corpora/{corpus_key}/documents/{document_id}/images/{image_id}:
    get:
      tags:
      - Documents
      summary: Retrieve an image from a document
      description: Returns a specific image that is embedded within a document. The
        `image_id` uniquely identifies the image within the document. Use this endpoint
        to fetch the raw image data and associated metadata.
      operationId: getImage
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: A unique identifier for the corpus that contains the target document.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - in: path
        name: document_id
        description: The identifier of the document containing the image. This `document_id`
          must be percent encoded.
        required: true
        schema:
          type: string
      - in: path
        name: image_id
        description: The identifier of the image to retrieve from the specified document.
          Each image within a document has a unique `image_id`. This value must be
          percent-encoded when passed in the request URL.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: An image including raw image data and associated metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
              example:
                id: image_1
                title: Quarterly Sales Performance
                caption: Sales growth trends for Q1 to Q4 of 2024
                description: A bar chart showing quarterly sales growth, with Q4 outperforming
                  all previous quarters by 15%
                image_data:
                  data: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVR4nGP4//8/AAX+Av4N70a4AAAAAElFTkSuQmCC
                  mime_type: image/png
        '403':
          description: Permissions do not allow retrieving the image.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Image not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: get
  /v2/corpora/{corpus_key}/metadata_query:
    post:
      tags:
      - Metadata Query
      summary: Query across metadata fields in a corpus
      description: Query for documents in a specific corpus using fuzzy matching across
        specified metadata fields. The search first applies any exact metadata filters
        to narrow the results, then performs fuzzy matching on the remaining documents
        using the specified field queries.
      operationId: queryMetadata
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to search for metadata.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataQueryRequest'
      responses:
        '200':
          description: List of matching documents with relevance scores and field-level
            match details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataQueryResponse'
        '400':
          description: Metadata query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying metadata in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: metadata
      x-fern-sdk-method-name: queryMetadata
  /v2/corpora/{corpus_key}/query:
    get:
      tags:
      - Queries
      summary: Simple Single Corpus Query
      description: 'Search a single corpus with a straightforward query request, specifying
        the corpus key and query parameters.


        * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key`
        is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus)
        or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus),
        and the corpus key is part of that process. When creating a new corpus, you
        have the option to assign a custom `corpus_key` following your preferred naming
        convention. This key serves as a unique identifier for the corpus, allowing
        it to be referenced in search requests. For more information, see [Corpus
        Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).

        * Enter the search `query` string for the corpus, which is the question you
        want to ask.

        * Set the maximum number of results (`limit`) to return. **Default**: 10,
        **minimum**: 1


        For more detailed information, see this [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search).

        '
      operationId: searchCorpus
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to query.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
        examples:
          Finance_risk_analysis:
            summary: Risk metrics query in finance
            value: Explain changes in VaR metrics over Q1
          Legal_terms_summary:
            summary: Indemnification clause interpretation
            value: Explain the indemnification clause
          Support_kb:
            summary: Internal support KB lookup
            value: Steps to reset 2FA for legacy login system
      - in: query
        name: query
        description: The search query string for the corpus, which is the question
          the user is asking.
        required: true
        examples:
          Finance_risk_analysis:
            summary: Risk model analysis
            value: Explain changes in VaR metrics over last quarter
          Legal_terms_summary:
            summary: Legal terminology explanation
            value: Summarize indemnification clause in vendor agreement
          Support_kb:
            summary: Support query from customer
            value: How to reset password for legacy login system?
        schema:
          type: string
          maxLength: 5000
      - in: query
        name: limit
        description: The maximum number of top retrieval results to rerank and return.
        required: false
        examples:
          default:
            summary: The default result count.
            value: 10
          expanded_view:
            summary: Get the 25 top results.
            value: 25
          restricted_view:
            summary: Narrow to 15 results.
            value: 15
        schema:
          type: integer
          default: 10
          minimum: 1
      - in: query
        name: offset
        description: The position from which to start in the result set.
        required: false
        examples:
          start_from_beginning:
            summary: No offset (start from top)
            value: 0
          paged_results:
            summary: Skip first 10 results
            value: 10
          next_batch:
            summary: Offset for third page
            value: 20
        schema:
          type: integer
          default: 0
          minimum: 0
      - in: query
        name: save_history
        description: Indicates whether to save the query in the query history.
        schema:
          type: boolean
      - in: query
        name: intelligent_query_rewriting
        description: '[Tech Preview] Indicates whether to enable intelligent query
          rewriting. When enabled, the platform will attempt to extract metadata filter
          and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting)
          for more details.'
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              examples:
                Finance:
                  summary: Financial VaR metrics query
                  value:
                    summary: The Q1 VaR increased due to market volatility in the
                      energy sector.
                    response_language: eng
                    search_results:
                    - text: The VaR at 95% confidence level rose from $1.2M to $1.6M...
                      score: 0.91
                      document_id: risk_report_q1
                      document_metadata:
                        department: risk_analysis
                        quarter: Q1
                    factual_consistency_score: 0.97
                Legal:
                  summary: Legal contract clause interpretation
                  value:
                    summary: The indemnification clause transfers liability to the
                      vendor in case of third-party claims.
                    response_language: eng
                    search_results:
                    - text: Under this agreement, the vendor agrees to indemnify the
                        client...
                      score: 0.89
                      document_id: vendor_contract_2024
                      document_metadata:
                        type: contract
                        version: v2
                    factual_consistency_score: 0.95
                Support:
                  summary: Internal IT support query
                  value:
                    summary: Resetting 2FA requires administrator approval followed
                      by user identity verification.
                    response_language: eng
                    search_results:
                    - text: To reset 2FA, submit a ticket with user ID and last login
                        IP...
                      score: 0.87
                      document_id: it_kb_2fa_reset
                      document_metadata:
                        category: authentication
                        author: helpdesk_team
                    factual_consistency_score: 0.92
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: search
    post:
      tags:
      - Queries
      summary: Advanced Single Corpus Query
      description: 'Perform an advanced query on a specific corpus to find relevant
        results, highlight relevant snippets, and use Retrieval Augmented Generation.


        * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key`
        is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus)
        or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus),
        and the corpus key is part of that process. When creating a new corpus, you
        have the option to assign a custom `corpus_key` following your preferred naming
        convention. This key serves as a unique identifier for the corpus, allowing
        it to be referenced in search requests. For more information, see [Corpus
        Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).

        * Customize your search by specifying the query text (`query`), pagination
        details (`offset` and `limit`), and metadata filters (`metadata_filter`) to
        tailor your search results. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#query-definition)

        * Leverage advanced search capabilities like reranking (`reranker`) and Retrieval
        Augmented Generation (RAG) (`generation`) for enhanced query performance.
        Generation is opt in by setting the `generation` property. By excluding the
        property or by setting it to null, the response will not include generation.
        [Learn more](https://docs.vectara.com/docs/learn/grounded-generation/configure-query-summarization).

        * Use hybrid search to achieve optimal results by setting different values
        for `lexical_interpolation` (e.g., `0.005`). [Learn more](https://docs.vectara.com/docs/learn/hybrid-search)

        * Specify Vectara''s RAG-focused LLM (Mockingbird) for the `generation_preset_name`.
        [Learn more](https://docs.vectara.com/docs/learn/mockingbird-llm)

        * Use advanced summarization options that utilize detailed summarization parameters
        such as `max_response_characters`, `temperature`, and `frequency_penalty`
        for generating precise and relevant summaries. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#advanced-summarization-options)


        For more detailed information, see [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search).

        '
      operationId: queryCorpus
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: corpus_key
        description: The unique key identifying the corpus to query.
        required: true
        schema:
          $ref: '#/components/schemas/CorpusKey'
        example: finance-corpus-001
      requestBody:
        content:
          application/json:
            examples:
              Finance:
                summary: Empower financial analysts to retrieve and summarize 2023
                  ESG compliance reports for European banks, leveraging Retrieval
                  Augmented Generation (RAG) to deliver concise insights from financial
                  corpora with intelligent query rewriting and maximal marginal relevance
                  (MMR) reranking for optimal result diversity.
                value:
                  query: Recent ESG compliance reports for European banks
                  search:
                    lexical_interpolation: 0.005
                    limit: 50
                    context_configuration:
                      sentences_before: 2
                      sentences_after: 2
                      start_tag: <mark>
                      end_tag: </mark>
                    reranker:
                      type: mmr
                      limit: 50
                      cutoff: 0.6
                      include_context: true
                    metadata_filter: doc.industry = 'banking' AND doc.region = 'EU'
                      AND doc.year = 2023
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: "[\n  {\"role\": \"system\", \"content\": \"\
                      You are a helpful search assistant for financial analysts.\"\
                      },\n  #foreach ($qResult in $vectaraQueryResults)\n     {\"\
                      role\": \"user\", \"content\": \"Analyze the $vectaraIdxWord[$foreach.index]\
                      \ search result for financial ESG compliance.\"},\n     {\"\
                      role\": \"assistant\", \"content\": \"${qResult.getText()}\"\
                      \ },\n  #end\n  {\"role\": \"user\", \"content\": \"Summarize\
                      \ ESG compliance trends among EU banks based on the above findings.\"\
                      }\n]\n"
                    max_used_search_results: 10
                    response_language: eng
                  save_history: true
                  intelligent_query_rewriting: false
              Legal:
                summary: "Enable legal professionals to summarize recent California\
                  \ court decisions on intellectual property rights, utilizing a custom\
                  \ multilingual reranker for precise result ranking and markdown\
                  \ citations for seamless integration into legal briefs, powered\
                  \ by Vectara\u2019s advanced RAG capabilities."
                value:
                  query: Recent court rulings on IP rights in California
                  search:
                    lexical_interpolation: 0.005
                    limit: 100
                    context_configuration:
                      sentences_before: 3
                      sentences_after: 3
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 100
                      include_context: true
                    metadata_filter: doc.jurisdiction = 'California' AND doc.legal_domain
                      = 'IP'
                  generation:
                    generation_preset_name: vectara-summary-ext-24-05-med-omni
                    prompt_template: "[\n  {\"role\": \"system\", \"content\": \"\
                      You are a legal research assistant summarizing recent court\
                      \ decisions.\"},\n  #foreach ($qResult in $vectaraQueryResults)\n\
                      \     {\"role\": \"user\", \"content\": \"Evaluate the $vectaraIdxWord[$foreach.index]\
                      \ case result for IP law in California.\"},\n     {\"role\"\
                      : \"assistant\", \"content\": \"${qResult.getText()}\" },\n\
                      \  #end\n  {\"role\": \"user\", \"content\": \"Provide a legal\
                      \ brief summary for the query '${vectaraQuery}' based on these\
                      \ rulings.\"}\n]\n"
                    max_used_search_results: 15
                    citations:
                      style: markdown
                      url_pattern: https://docs.example.com/cases/{doc.id}
                      text_pattern: '{doc.title}'
                  save_history: true
                  intelligent_query_rewriting: false
              Support:
                summary: Assist IT support teams in troubleshooting printer offline
                  errors on Windows 11 by searching an internal knowledge base, generating
                  a step-by-step fix using RAG, with part-level metadata filtering
                  to pinpoint relevant troubleshooting steps and a custom reranker
                  for enhanced result accuracy.
                value:
                  query: How to fix printer offline in Windows 11
                  search:
                    lexical_interpolation: 0.005
                    limit: 50
                    context_configuration:
                      sentences_before: 3
                      sentences_after: 3
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 100
                    metadata_filter: part.platform = 'windows11' AND part.product
                      = 'printer'
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: "[\n  {\"role\": \"system\", \"content\": \"\
                      You are a technical support assistant for Windows systems.\"\
                      },\n  #foreach ($qResult in $vectaraQueryResults)\n     {\"\
                      role\": \"user\", \"content\": \"Consider the $vectaraIdxWord[$foreach.index]\
                      \ troubleshooting step.\"},\n     {\"role\": \"assistant\",\
                      \ \"content\": \"${qResult.getText()}\" },\n  #end\n  {\"role\"\
                      : \"user\", \"content\": \"Generate a concise step-by-step fix\
                      \ for: '${vectaraQuery}'\"}\n]\n"
                    max_used_search_results: 10
            schema:
              $ref: '#/components/schemas/QueryCorpusRequest'
      x-stream-based-on-body: streamResponse()
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              examples:
                Finance:
                  summary: Summarized insights from 2023 ESG compliance reports for
                    European banks, highlighting carbon reduction trends and regulatory
                    compliance.
                  value:
                    summary: In 2023, EU banks enhanced ESG compliance through increased
                      carbon reduction initiatives and adherence to new regulatory
                      frameworks, as detailed in annual reports.
                    response_language: eng
                    factual_consistency_score: 0.94
                    rendered_prompt: '[{"role": "system", "content": "You are a helpful
                      search assistant for financial analysts."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Analyze
                      the $vectaraIdxWord[$foreach.index] search result for financial
                      ESG compliance."}, {"role": "assistant", "content": "${qResult.getText()}"},
                      #end {"role": "user", "content": "Summarize ESG compliance trends
                      among EU banks based on the above findings."}]'
                    search_results:
                    - text: EU banks reported a 20% increase in carbon reduction initiatives
                        in 2023, driven by regulatory pressure.
                      score: 0.9462
                      document_metadata:
                        industry: banking
                        region: EU
                        year: 2023
                        doc_type: annual_report
                      document_id: fin-report-2023-001
                      request_corpora_index: 0
                    - text: Investment in sustainable finance grew by 15% among EU
                        banks, aligning with ESG mandates.
                      score: 0.9187
                      document_metadata:
                        industry: banking
                        region: EU
                        year: 2023
                        doc_type: annual_report
                      document_id: fin-report-2023-002
                      request_corpora_index: 0
                Legal:
                  summary: Legal brief summarizing recent California court rulings
                    on intellectual property rights, emphasizing trade secret protections
                    and patent enforcement.
                  value:
                    summary: Recent California court rulings on intellectual property
                      rights emphasize robust protection for trade secrets and stricter
                      penalties for patent infringements.
                    response_language: eng
                    factual_consistency_score: 0.89
                    rendered_prompt: '[{"role": "system", "content": "You are a legal
                      research assistant summarizing recent court decisions."}, #foreach
                      ($qResult in $vectaraQueryResults) {"role": "user", "content":
                      "Evaluate the $vectaraIdxWord[$foreach.index] case result for
                      IP law in California."}, {"role": "assistant", "content": "${qResult.getText()}"},
                      #end {"role": "user", "content": "Provide a legal brief summary
                      for the query ''Recent court rulings on IP rights in California''
                      based on these rulings."}]'
                    search_results:
                    - text: The court upheld trade secret protections, ruling against
                        unauthorized disclosure by a former employee.
                      score: 0.9241
                      document_metadata:
                        jurisdiction: California
                        legal_domain: IP
                        case_name: TechCo v. Ex-Employee
                        year: 2023
                      document_id: case-ip-2023-001
                      request_corpora_index: 0
                    - text: Patent infringement penalties were increased due to willful
                        violation, setting a precedent for IP enforcement.
                      score: 0.9056
                      document_metadata:
                        jurisdiction: California
                        legal_domain: IP
                        case_name: Innovate v. Competitor
                        year: 2023
                      document_id: case-ip-2023-002
                      request_corpora_index: 0
                Support:
                  summary: Step-by-step troubleshooting guide for resolving printer
                    offline errors in Windows 11, derived from an internal knowledge
                    base with part-level metadata filtering.
                  value:
                    summary: To fix a printer offline error in Windows 11, restart
                      the Print Spooler service and ensure network connectivity, as
                      outlined in the knowledge base.
                    response_language: eng
                    factual_consistency_score: 0.92
                    rendered_prompt: '[{"role": "system", "content": "You are a technical
                      support assistant for Windows systems."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Analyze
                      the $vectaraIdxWord[$foreach.index] troubleshooting step for
                      printer issues on Windows 11."}, {"role": "assistant", "content":
                      "${qResult.getText()}"}, #end {"role": "user", "content": "Generate
                      a concise step-by-step fix for: ''How to fix printer offline
                      in Windows 11''"}]'
                    search_results:
                    - text: Restart the Print Spooler service via services.msc to
                        resolve most printer offline issues in Windows 11.
                      score: 0.937
                      part_metadata:
                        platform: windows11
                        product: printer
                        category: troubleshooting
                      document_metadata:
                        title: Printer Troubleshooting Guide
                        doc_version: v5.1
                      document_id: support-printer-001
                      request_corpora_index: 0
                    - text: Ensure the printer is connected to the same network as
                        the Windows 11 device to prevent offline status.
                      score: 0.9123
                      part_metadata:
                        platform: windows11
                        product: printer
                        category: network
                      document_metadata:
                        title: Printer Troubleshooting Guide
                        doc_version: v5.1
                      document_id: support-printer-001
                      request_corpora_index: 0
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/QueryStreamedResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          description: The full response to a RAG query when the result is not streamed.
          type: object
          properties:
            summary:
              description: The summary of the search results.
              type: string
              example: The carbon reduction efforts by EU banks in 2023 show...
            response_language:
              $ref: '#/components/schemas/Language'
            search_results:
              description: The ranked search results.
              type: array
              items:
                $ref: '#/components/schemas/IndividualSearchResult'
            factual_consistency_score:
              description: Indicates the probability that the summary is factually
                consistent with the results. The system excludes this property if
                it encounters excessively large outputs or search results.
              type: number
              format: float
            rendered_prompt:
              description: The rendered prompt sent to the LLM. Useful when creating
                customer `prompt_template` templates.
              type: string
              example: '[{"role": "system", "content": "You are an ESG analyst."},
                {"role": "user", "content": "What are the carbon reduction initiatives
                by EU banks in 2023?"}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
            warnings:
              description: Non-fatal warnings that occurred during request processing
              type: array
              items:
                $ref: '#/components/schemas/QueryWarning'
            rewritten_queries:
              description: The rewritten queries for the corpora that were searched.
                Only populated when `intelligent_query_rewriting` is enabled.
              type: array
              items:
                $ref: '#/components/schemas/RewrittenQuery'
              example:
              - corpus_key: fin_docs
                filter_extraction:
                  query: ESG compliance trends in EU
                  metadata_filter: doc.industry = 'banking' AND doc.region = 'EU'
                    AND doc.year = 2023
        response-stream:
          description: An individual event sent with Server-sent Events (SSE) when
            the query request is streamed.
          type: object
          discriminator:
            propertyName: type
            mapping:
              search_results: '#/components/schemas/StreamSearchResponse'
              generation_chunk: '#/components/schemas/StreamGenerationChunk'
              generation_end: '#/components/schemas/StreamGenerationEnd'
              factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
              generation_info: '#/components/schemas/GenerationInfo'
              error: '#/components/schemas/StreamError'
              end: '#/components/schemas/StreamResponseEnd'
          oneOf:
          - $ref: '#/components/schemas/StreamSearchResponse'
          - $ref: '#/components/schemas/StreamGenerationChunk'
          - $ref: '#/components/schemas/StreamGenerationEnd'
          - $ref: '#/components/schemas/StreamResponseEnd'
          - $ref: '#/components/schemas/FactualConsistencyScore'
          - $ref: '#/components/schemas/GenerationInfo'
          - $ref: '#/components/schemas/StreamError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: query
  /v2/query:
    post:
      tags:
      - Queries
      summary: Multiple Corpora Query
      description: 'Perform a multipurpose query to retrieve relevant information
        from one or more corpora and generate a response using Retrieval Augmented
        Generation (RAG).


        * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key`
        is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus)
        or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus),
        and the corpus key is part of that process. When creating a new corpus, you
        have the option to assign a custom `corpus_key` following your preferred naming
        convention. This key serves as a unique identifier for the corpus, allowing
        it to be referenced in search requests. For more information, see [Corpus
        Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).

        * Customize your search by specifying the query text (`query`), pagination
        details (`offset` and `limit`), and metadata filters (`metadata_filter`) to
        tailor your search results. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#query-definition)

        * Leverage advanced search capabilities like reranking (`reranker`) and opt-in
        Retrieval Augmented Generation (RAG) (`generation`) for enhanced query performance.
        Generation is opt-in by setting the `generation` property. By excluding the
        property or by setting it to null, the response will not include generation.
        [Learn more](https://docs.vectara.com/docs/learn/grounded-generation/configure-query-summarization)

        * Specify Vectara''s RAG-focused LLM (Mockingbird) for the `generation_preset_name`.
        [Learn more](https://docs.vectara.com/docs/learn/mockingbird-llm)

        * Use advanced summarization options that utilize detailed summarization parameters
        such as `max_response_characters`, `temperature`, and `frequency_penalty`
        for generating precise and relevant summaries. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#advanced-summarization-customization-options)

        * Customize citation formats in summaries using the `citations` object to
        include numeric, HTML, or Markdown links. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#citation-format-in-summary)


        For more detailed information, see this [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search).

        '
      operationId: query
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            examples:
              Legal:
                summary: Summarize arbitration clauses in U.S. SaaS vendor NDAs, focusing
                  on governing law and venue, using a custom multilingual reranker
                  for precise results.
                value:
                  query: Summarize arbitration clauses in U.S. SaaS vendor NDAs, focusing
                    on governing law and venue.
                  search:
                    corpora:
                    - corpus_key: fin_docs
                      metadata_filter: doc.type = 'equity_policy' AND doc.country
                        = 'CA' AND (doc.year = 2022 OR doc.year = 2024)
                      lexical_interpolation: 0.005
                      limit: 50
                    context_configuration:
                      sentences_before: 2
                      sentences_after: 2
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 50
                      include_context: true
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: '[{"role": "system", "content": "You are an HR
                      policy analyst."}, #foreach ($qResult in $vectaraQueryResults)
                      {"role": "user", "content": "Evaluate the $vectaraIdxWord[$foreach.index]
                      RSU vesting schedule for Canadian employees."}, {"role": "assistant",
                      "content": "${qResult.getText()}"}, #end {"role": "user", "content":
                      "Compare RSU vesting schedules for 2022 and 2024 policies in
                      Canada."}]'
                    max_used_search_results: 8
                    response_language: eng
                    enable_factual_consistency_score: true
                  save_history: true
                  intelligent_query_rewriting: false
              Finance:
                summary: Analyze and compare RSU vesting schedules in 2022 and 2024
                  equity policies for Canadian tech employees, highlighting changes
                  for HR policy updates.
                value:
                  query: Compare RSU vesting schedules in 2022 vs. 2024 equity policies
                    for Canadian tech employees.
                  search:
                    corpora:
                    - corpus_key: fin_docs
                      metadata_filter: doc.type = 'equity_policy' AND doc.country
                        = 'CA' AND (doc.year = 2022 OR doc.year = 2024)
                      lexical_interpolation: 0.005
                      limit: 50
                    context_configuration:
                      sentences_before: 2
                      sentences_after: 2
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 50
                      include_context: true
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: '[{"role": "system", "content": "You are an HR
                      policy analyst."}, #foreach ($qResult in $vectaraQueryResults)
                      {"role": "user", "content": "Evaluate the $vectaraIdxWord[$foreach.index]
                      RSU vesting schedule for Canadian employees."}, {"role": "assistant",
                      "content": "${qResult.getText()}"}, #end {"role": "user", "content":
                      "Compare RSU vesting schedules for 2022 and 2024 policies in
                      Canada."}]'
                    max_used_search_results: 8
                    response_language: eng
                    enable_factual_consistency_score: true
                  save_history: true
                  intelligent_query_rewriting: false
              Support:
                summary: Diagnose and resolve intermittent login failures in a SaaS
                  portal on Chrome, identifying SSO and caching issues for IT support
                  resolution.
                value:
                  query: Diagnose intermittent login failures in our SaaS portal on
                    Chrome, focusing on SSO and caching issues.
                  search:
                    corpora:
                    - corpus_key: support_kb
                      metadata_filter: part.product = 'portal_app' AND part.browser
                        = 'chrome' AND part.issue = 'login'
                      lexical_interpolation: 0.005
                      limit: 50
                    context_configuration:
                      sentences_before: 3
                      sentences_after: 3
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 50
                      include_context: true
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: '[{"role": "system", "content": "You are an IT
                      support specialist for SaaS applications."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Analyze
                      the $vectaraIdxWord[$foreach.index] troubleshooting step for
                      login issues on Chrome."}, {"role": "assistant", "content":
                      "${qResult.getText()}"}, #end {"role": "user", "content": "Provide
                      a resolution for intermittent login failures in the SaaS portal
                      on Chrome, focusing on SSO and caching."}]'
                    max_used_search_results: 10
                    response_language: eng
                    enable_factual_consistency_score: true
                  save_history: true
                  intelligent_query_rewriting: false
            schema:
              $ref: '#/components/schemas/QueryRequest'
      x-stream-based-on-body: streamResponse()
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              examples:
                Legal:
                  summary: Concise summary of arbitration clauses in U.S. SaaS NDAs,
                    detailing governing law, venue, and dispute resolution terms for
                    compliance auditing.
                  value:
                    summary: "Arbitration clauses in U.S. SaaS NDAs typically mandate\
                      \ AAA arbitration in major U.S. cities (e.g., San Francisco,\
                      \ New York) under state-specific laws (e.g., California, Delaware),\
                      \ with provisions for opt-out within 30\u201360 days and no\
                      \ class-action rights."
                    factual_consistency_score: 0.93
                    response_language: eng
                    rendered_prompt: '[{"role": "system", "content": "You are a legal
                      compliance specialist."}, #foreach ($qResult in $vectaraQueryResults)
                      {"role": "user", "content": "Analyze the $vectaraIdxWord[$foreach.index]
                      arbitration clause for governing law, venue, and dispute resolution."},
                      {"role": "assistant", "content": "${qResult.getText()}"}, #end
                      {"role": "user", "content": "Summarize arbitration terms for
                      U.S. SaaS NDAs based on the above findings."}]'
                    search_results:
                    - text: Clause 14.2 mandates AAA arbitration in San Francisco
                        under California law, with a 30-day opt-out period and no
                        class-action rights.
                      score: 0.9254
                      document_metadata:
                        type: contract
                        region: US
                        industry: SaaS
                        governing_law: CA
                      document_id: contract-nda-2023-001
                      request_corpora_index: 0
                    - text: Arbitration via AAA in New York under Delaware law, with
                        a 60-day opt-out and mediation as a prerequisite.
                      score: 0.9087
                      document_metadata:
                        type: contract
                        region: US
                        industry: SaaS
                        governing_law: DE
                      document_id: contract-nda-2023-002
                      request_corpora_index: 0
                Finance:
                  summary: Detailed comparison of RSU vesting schedules in 2022 and
                    2024 Canadian tech equity policies, highlighting policy shifts
                    for HR compliance.
                  value:
                    summary: The 2022 Canadian tech RSU policy featured a 4-year vesting
                      schedule with 25% annual cliffs, while the 2024 policy adopts
                      a 1-year cliff with monthly vesting over 3 years, reflecting
                      market competitiveness.
                    factual_consistency_score: 0.91
                    response_language: eng
                    rendered_prompt: '[{"role": "system", "content": "You are an HR
                      policy analyst."}, #foreach ($qResult in $vectaraQueryResults)
                      {"role": "user", "content": "Evaluate the $vectaraIdxWord[$foreach.index]
                      RSU vesting schedule for Canadian employees."}, {"role": "assistant",
                      "content": "${qResult.getText()}"}, #end {"role": "user", "content":
                      "Compare RSU vesting schedules for 2022 and 2024 policies in
                      Canada."}]'
                    search_results:
                    - text: The 2022 policy vests RSUs at 25% annually over 4 years
                        for Canadian employees.
                      score: 0.9198
                      document_metadata:
                        type: equity_policy
                        country: CA
                        year: 2022
                      document_id: equity-policy-2022-001
                      request_corpora_index: 0
                    - text: The 2024 policy introduces a 1-year cliff with monthly
                        vesting over 3 years, aligning with tech industry standards
                        in Canada.
                      score: 0.9043
                      document_metadata:
                        type: equity_policy
                        country: CA
                        year: 2024
                      document_id: equity-policy-2024-001
                      request_corpora_index: 0
                Support:
                  summary: Comprehensive diagnosis and resolution for intermittent
                    login failures in a SaaS portal on Chrome, addressing SSO token
                    expiration and caching issues.
                  value:
                    summary: Intermittent login failures in the SaaS portal on Chrome
                      are caused by expired SSO tokens persisting due to browser caching.
                      Resolution involves clearing cache, updating SSO configurations,
                      and enabling token refresh.
                    factual_consistency_score: 0.94
                    response_language: eng
                    rendered_prompt: '[{"role": "system", "content": "You are an IT
                      support specialist for SaaS applications."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Analyze
                      the $vectaraIdxWord[$foreach.index] troubleshooting step for
                      login issues on Chrome."}, {"role": "assistant", "content":
                      "${qResult.getText()}"}, #end {"role": "user", "content": "Provide
                      a resolution for intermittent login failures in the SaaS portal
                      on Chrome, focusing on SSO and caching."}]'
                    search_results:
                    - text: Clearing the Chrome browser cache resolves persistent
                        SSO token issues causing login failures.
                      score: 0.9365
                      part_metadata:
                        product: portal_app
                        browser: chrome
                        issue: login
                        severity: high
                      document_metadata:
                        title: SaaS Portal Troubleshooting Guide
                        version: v2.4
                      document_id: support-login-001
                      request_corpora_index: 0
                    - text: Updating SSO configurations to enforce token refresh every
                        24 hours prevents login disruptions on Chrome.
                      score: 0.9172
                      part_metadata:
                        product: portal_app
                        browser: chrome
                        issue: login
                        severity: medium
                      document_metadata:
                        title: SaaS Portal Troubleshooting Guide
                        version: v2.4
                      document_id: support-login-001
                      request_corpora_index: 0
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/QueryStreamedResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying one or more corpora in the
            request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: One or more of the corpora were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-streaming:
        stream-condition: $request.stream_response
        format: sse
        response:
          description: The full response to a RAG query when the result is not streamed.
          type: object
          properties:
            summary:
              description: The summary of the search results.
              type: string
              example: The carbon reduction efforts by EU banks in 2023 show...
            response_language:
              $ref: '#/components/schemas/Language'
            search_results:
              description: The ranked search results.
              type: array
              items:
                $ref: '#/components/schemas/IndividualSearchResult'
            factual_consistency_score:
              description: Indicates the probability that the summary is factually
                consistent with the results. The system excludes this property if
                it encounters excessively large outputs or search results.
              type: number
              format: float
            rendered_prompt:
              description: The rendered prompt sent to the LLM. Useful when creating
                customer `prompt_template` templates.
              type: string
              example: '[{"role": "system", "content": "You are an ESG analyst."},
                {"role": "user", "content": "What are the carbon reduction initiatives
                by EU banks in 2023?"}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
            warnings:
              description: Non-fatal warnings that occurred during request processing
              type: array
              items:
                $ref: '#/components/schemas/QueryWarning'
            rewritten_queries:
              description: The rewritten queries for the corpora that were searched.
                Only populated when `intelligent_query_rewriting` is enabled.
              type: array
              items:
                $ref: '#/components/schemas/RewrittenQuery'
              example:
              - corpus_key: fin_docs
                filter_extraction:
                  query: ESG compliance trends in EU
                  metadata_filter: doc.industry = 'banking' AND doc.region = 'EU'
                    AND doc.year = 2023
        response-stream:
          description: An individual event sent with Server-sent Events (SSE) when
            the query request is streamed.
          type: object
          discriminator:
            propertyName: type
            mapping:
              search_results: '#/components/schemas/StreamSearchResponse'
              generation_chunk: '#/components/schemas/StreamGenerationChunk'
              generation_end: '#/components/schemas/StreamGenerationEnd'
              factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
              generation_info: '#/components/schemas/GenerationInfo'
              error: '#/components/schemas/StreamError'
              end: '#/components/schemas/StreamResponseEnd'
          oneOf:
          - $ref: '#/components/schemas/StreamSearchResponse'
          - $ref: '#/components/schemas/StreamGenerationChunk'
          - $ref: '#/components/schemas/StreamGenerationEnd'
          - $ref: '#/components/schemas/StreamResponseEnd'
          - $ref: '#/components/schemas/FactualConsistencyScore'
          - $ref: '#/components/schemas/GenerationInfo'
          - $ref: '#/components/schemas/StreamError'
      x-fern-sdk-method-name: query
      x-fern-examples:
      - name: Batch
        request:
          stream_response: false
          query: What is a hallucination?
          search:
            corpora:
            - corpus_key: corpus_key
              metadata_filter: ''
              lexical_interpolation: 0.005
            context_configuration:
              sentences_before: 2
              sentences_after: 2
            reranker:
              type: customer_reranker
              reranker_id: rnk_272725719
          generation:
            response_language: eng
            enable_factual_consistency_score: true
        response:
          body: {}
      - name: Stream
        request:
          stream_response: true
          query: What is a hallucination?
          search:
            corpora:
            - corpus_key: corpus_key
              metadata_filter: ''
              lexical_interpolation: 0.005
            context_configuration:
              sentences_before: 2
              sentences_after: 2
            reranker:
              type: customer_reranker
              reranker_id: rnk_272725719
          generation:
            response_language: eng
            enable_factual_consistency_score: true
        response:
          stream: []
      x-fern-sdk-group-name: queries
  /v2/queries/{query_id}:
    get:
      tags:
      - Query History
      summary: Get a query history
      description: Retrieve a detailed history of previously executed query.
      operationId: getQueryHistory
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: query_id
        in: path
        description: The ID of the query history
        required: true
        schema:
          type: string
        example: qry_123456789
      responses:
        '200':
          description: The query history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryHistory'
        '403':
          description: Permissions do not allow retrieving the query history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Query history not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: query_history
      x-fern-sdk-method-name: get
  /v2/queries:
    get:
      tags:
      - Query History
      summary: List the history of previous queries
      description: Retrieve query histories.
      operationId: getQueryHistories
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: corpus_key
        in: query
        description: Specifies the `corpus_key` used in the query.
        required: false
        schema:
          type: string
        example: my_corpus_key
      - name: started_after
        in: query
        description: Queries that started after a particular ISO date-time.
        required: false
        schema:
          type: string
          format: date-time
      - name: started_before
        in: query
        description: Queries that started before a particular ISO date-time.
        required: false
        schema:
          type: string
          format: date-time
      - name: chat_id
        in: query
        description: Specifies the chat_id of the query, this will return all queries
          in the specified chat.
        required: false
        schema:
          type: string
        example: cht_123456789
      - name: history_id
        in: query
        description: Specifies the history_id of the query that you want to use as
          a filter.
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: Specifies the maximum number of query history listed.
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of query histories after the limit
          has been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: An array of Query Histories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryHistoriesResponse'
        '400':
          description: Query history list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing query histories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: query_history
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.queries
  /v2/chats:
    post:
      tags:
      - Chats
      summary: Start a chat
      description: Create a chat while specifying the default retrieval parameters
        used by the prompt.
      operationId: createChat
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              Legal:
                summary: Start a chat to summarize arbitration clauses in a Delaware-based
                  employment contract governed by California law
                value:
                  query: What are the arbitration terms in the employment contract?
                  search:
                    corpora:
                    - corpus_key: legal_docs
                      metadata_filter: doc.jurisdiction = 'Delaware' AND doc.doc_type
                        = 'employment_contract'
                      lexical_interpolation: 0.005
                      limit: 50
                    context_configuration:
                      sentences_before: 3
                      sentences_after: 3
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 50
                      include_context: true
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: '[{"role": "system", "content": "You are a legal
                      analyst specializing in contract law."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Summarize
                      the arbitration clause in the $vectaraIdxWord[$foreach.index]
                      contract."}, {"role": "assistant", "content": "${qResult.getText()}"},
                      #end {"role": "user", "content": "Summarize the arbitration
                      terms in the employment contract."}]'
                    max_used_search_results: 15
                    enable_factual_consistency_score: true
                    citations:
                      style: markdown
                      url_pattern: https://docs.example.com/legal/{doc.id}
                      text_pattern: '{doc.title}'
                  chat:
                    store: true
                  save_history: true
                  intelligent_query_rewriting: true
                  stream_response: false
              Finance:
                summary: Initiate a chat to compare RSUs and ISOs in North American
                  tech company equity compensation policies
                value:
                  query: Compare RSUs and ISOs in tech companies.
                  search:
                    corpora:
                    - corpus_key: fin_docs
                      metadata_filter: doc.region = 'North America' AND doc.comparison_type
                        = 'rsu_vs_iso'
                      lexical_interpolation: 0.005
                      limit: 50
                    context_configuration:
                      sentences_before: 2
                      sentences_after: 2
                      start_tag: <mark>
                      end_tag: </mark>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 50
                      include_context: true
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: '[{"role": "system", "content": "You are a financial
                      analyst specializing in equity compensation."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Compare
                      the $vectaraIdxWord[$foreach.index] equity type in tech policies."},
                      {"role": "assistant", "content": "${qResult.getText()}"}, #end
                      {"role": "user", "content": "Compare RSUs and ISOs in tech companies."}]'
                    max_used_search_results: 10
                    response_language: eng
                    enable_factual_consistency_score: true
                    citations:
                      style: markdown
                      url_pattern: https://docs.example.com/finance/{doc.id}
                      text_pattern: '{doc.title}'
                  chat:
                    store: true
                  save_history: true
                  intelligent_query_rewriting: true
                  stream_response: false
              Support:
                summary: Begin a chat to troubleshoot 403 errors in a web portal due
                  to stale authentication tokens
                value:
                  query: How to fix 403 errors in the web portal?
                  search:
                    corpora:
                    - corpus_key: support_docs
                      metadata_filter: doc.issue = 'auth_token_stale' AND doc.platform
                        = 'web_portal'
                      lexical_interpolation: 0.005
                      limit: 50
                    context_configuration:
                      sentences_before: 2
                      sentences_after: 2
                      start_tag: <em>
                      end_tag: </em>
                    reranker:
                      type: customer_reranker
                      reranker_name: Rerank_Multilingual_v1
                      limit: 50
                      include_context: true
                  generation:
                    generation_preset_name: mockingbird-2.0
                    prompt_template: '[{"role": "system", "content": "You are a technical
                      support specialist for web applications."}, #foreach ($qResult
                      in $vectaraQueryResults) {"role": "user", "content": "Analyze
                      the $vectaraIdxWord[$foreach.index] troubleshooting step for
                      403 errors."}, {"role": "assistant", "content": "${qResult.getText()}"},
                      #end {"role": "user", "content": "Provide a step-by-step fix
                      for 403 errors in the web portal."}]'
                    max_used_search_results: 15
                    response_language: eng
                    enable_factual_consistency_score: true
                  chat:
                    store: true
                  save_history: true
                  intelligent_query_rewriting: true
                  stream_response: false
      x-stream-based-on-body: streamResponse()
      responses:
        '200':
          description: A response to a chat request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFullResponse'
              examples:
                Legal:
                  summary: Detailed response to a query about arbitration clauses
                    in an employment contract, providing specifics on binding arbitration
                    terms and including a table summarizing key clause details for
                    a Delaware-based agreement governed by California law
                  value:
                    chat_id: cht_legal_8749203948
                    turn_id: trn_8749203948
                    answer: Clause 9.2 mandates binding arbitration through AAA with
                      venue in Delaware and 30-day opt-out. California law governs
                      the agreement.
                    response_language: eng
                    search_results:
                    - text: Clause 9.2 of the employment contract requires binding
                        arbitration via AAA in Delaware, with a 30-day opt-out period.
                        The agreement is governed by California law.
                      score: 0.94
                      part_metadata:
                        section: arbitration_clause
                      document_metadata:
                        doc_type: employment_contract
                        jurisdiction: Delaware
                        governing_law: California
                      document_id: legal-memo-274
                      table:
                        id: legal_table_274
                        title: Arbitration Clause Details
                        data:
                          headers:
                          - - text_value: Clause
                              colspan: 1
                              rowspan: 1
                            - text_value: Description
                              colspan: 1
                              rowspan: 1
                            - text_value: Status
                              colspan: 1
                              rowspan: 1
                          rows:
                          - - text_value: Arbitration
                              colspan: 1
                              rowspan: 1
                            - text_value: Binding via AAA, Delaware venue
                              colspan: 1
                              rowspan: 1
                            - text_value: Active
                              colspan: 1
                              rowspan: 1
                          - - text_value: Opt-Out
                              colspan: 1
                              rowspan: 1
                            - text_value: 30-day opt-out period
                              colspan: 1
                              rowspan: 1
                            - text_value: Active
                              colspan: 1
                              rowspan: 1
                          description: Summary of arbitration terms in the employment
                            contract, including venue and opt-out provisions.
                      request_corpora_index: 0
                    factual_consistency_score: 0.94
                    audio_response:
                      audio_response: ''
                    rendered_prompt: '[{"role": "system", "content": "You are a legal
                      analyst."}, {"role": "user", "content": "What are the arbitration
                      terms in the employment contract?"}, {"role": "assistant", "content":
                      "${vectaraQueryResults[0].getText()}"}]'
                    rephrased_query: Arbitration terms in Delaware employment contract?
                    rewritten_queries:
                    - corpus_key: legal_docs
                      filter_extraction:
                        query: Arbitration clauses in employment contracts
                        metadata_filter: doc.jurisdiction = 'Delaware' AND doc.doc_type
                          = 'employment_contract'
                Finance:
                  summary: Comprehensive response to a query about equity compensation
                    in tech companies, comparing RSUs and ISOs with a focus on vesting
                    schedules and tax implications, including a table outlining key
                    differences for North American policies
                  value:
                    chat_id: cht_fin_2293842
                    turn_id: trn_2293842
                    answer: RSUs follow time-based vesting, typically over 4 years,
                      while ISOs offer tax-advantaged treatment with a 2-year holding
                      requirement. Recent tech company shifts favor RSUs for flexibility.
                    response_language: eng
                    search_results:
                    - text: RSUs vest over 4 years, while ISOs require a 2-year holding
                        period for tax benefits. Tech companies increasingly prefer
                        RSUs for flexibility.
                      score: 0.88
                      part_metadata:
                        section: equity_comparison
                      document_metadata:
                        doc_type: equity_policy
                        comparison_type: rsu_vs_iso
                        region: North America
                      document_id: fin-policy-123
                      table:
                        id: fin_table_229
                        title: RSU vs ISO Comparison
                        data:
                          headers:
                          - - text_value: Feature
                              colspan: 1
                              rowspan: 1
                            - text_value: RSU
                              colspan: 1
                              rowspan: 1
                            - text_value: ISO
                              colspan: 1
                              rowspan: 1
                          rows:
                          - - text_value: Vesting
                              colspan: 1
                              rowspan: 1
                            - text_value: 4-year time-based
                              colspan: 1
                              rowspan: 1
                            - text_value: 2-year holding
                              colspan: 1
                              rowspan: 1
                          - - text_value: Tax Treatment
                              colspan: 1
                              rowspan: 1
                            - text_value: Ordinary income
                              colspan: 1
                              rowspan: 1
                            - text_value: Capital gains
                              colspan: 1
                              rowspan: 1
                          description: Comparison of vesting and tax implications
                            for RSUs and ISOs in tech company equity policies.
                      request_corpora_index: 0
                    factual_consistency_score: 0.88
                    audio_response:
                      audio_response: ''
                    rendered_prompt: '[{"role": "system", "content": "You are a financial
                      analyst."}, {"role": "user", "content": "Compare RSUs and ISOs
                      in tech companies."}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
                    rephrased_query: RSU vs ISO in tech equity policies?
                    rewritten_queries:
                    - corpus_key: fin_docs
                      filter_extraction:
                        query: Equity compensation in tech
                        metadata_filter: doc.region = 'North America' AND doc.comparison_type
                          = 'rsu_vs_iso'
                Support:
                  summary: In-depth response to a query about resolving 403 errors
                    in a web portal, identifying stale token issues and JavaScript-based
                    mitigation, with a table detailing resolution steps for Chrome
                    users
                  value:
                    chat_id: cht_sup_1948323
                    turn_id: trn_1948323
                    answer: 403 errors stem from outdated local tokens retained after
                      user sign-out. Issue mitigated by enforcing token purge via
                      front-end JavaScript.
                    response_language: eng
                    search_results:
                    - text: 403 errors occur due to stale local tokens after sign-out.
                        JavaScript token purge resolves the issue on the web portal.
                      score: 0.92
                      part_metadata:
                        section: troubleshooting
                      document_metadata:
                        issue: auth_token_stale
                        browser: chrome
                        platform: web_portal
                      document_id: support-ticket-99182
                      table:
                        id: support_table_99182
                        title: Token Issue Resolution Steps
                        data:
                          headers:
                          - - text_value: Step
                              colspan: 1
                              rowspan: 1
                            - text_value: Action
                              colspan: 1
                              rowspan: 1
                            - text_value: Component
                              colspan: 1
                              rowspan: 1
                          rows:
                          - - text_value: '1'
                              colspan: 1
                              rowspan: 1
                            - text_value: Detect sign-out
                              colspan: 1
                              rowspan: 1
                            - text_value: JavaScript
                              colspan: 1
                              rowspan: 1
                          - - text_value: '2'
                              colspan: 1
                              rowspan: 1
                            - text_value: Purge local tokens
                              colspan: 1
                              rowspan: 1
                            - text_value: Browser Storage
                              colspan: 1
                              rowspan: 1
                          description: Steps to mitigate 403 errors caused by stale
                            authentication tokens in the web portal.
                      request_corpora_index: 0
                    factual_consistency_score: 0.92
                    audio_response:
                      audio_response: ''
                    rendered_prompt: '[{"role": "system", "content": "You are a technical
                      support specialist."}, {"role": "user", "content": "How to fix
                      403 errors in the web portal?"}, {"role": "assistant", "content":
                      "${vectaraQueryResults[0].getText()}"}]'
                    rephrased_query: Fix 403 errors due to stale tokens in web portal?
                    rewritten_queries:
                    - corpus_key: support_docs
                      filter_extraction:
                        query: Authentication errors in web portal
                        metadata_filter: doc.issue = 'auth_token_stale' AND doc.platform
                          = 'web_portal'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatStreamedResponse'
        '400':
          description: Chat creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a chat in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          description: Full response to a chat question when the result is not streamed.
          type: object
          properties:
            chat_id:
              description: If the chat response was stored, the ID of the chat.
              type: string
              example: cht_123456789
            turn_id:
              description: If the chat response was stored, the ID of the turn.
              type: string
              example: trn_987654321
            answer:
              description: The message from the chat model for the chat message.
              type: string
              example: EU banks in 2023 have increased carbon reduction initiatives
                by 20%, driven by new EU regulations mandating annual emissions reporting.
            response_language:
              description: The language that the answer is expected to be.
              $ref: '#/components/schemas/Language'
              example: eng
            search_results:
              description: The ranked search results that the chat model used.
              type: array
              items:
                $ref: '#/components/schemas/IndividualSearchResult'
            factual_consistency_score:
              description: Indicates the probability that the summary is factually
                consistent with the results. The system excludes this property if
                it encounters excessively large outputs or search results.
              type: number
              format: float
            rendered_prompt:
              description: The rendered prompt sent to the LLM. Useful when creating
                customer `prompt_template` templates.
              type: string
              example: '[{"role": "system", "content": "You are an ESG analyst."},
                {"role": "user", "content": "What are the carbon reduction initiatives
                by EU banks in 2023?"}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
            warnings:
              description: Non-fatal warnings that occurred during request processing
              type: array
              items:
                $ref: '#/components/schemas/QueryWarning'
            rephrased_query:
              description: View the actual query made to backend that was rephrased
                by the LLM from the input query.
              type: string
              example: Carbon reduction efforts by EU banks in 2023?
            rewritten_queries:
              description: The rewritten queries for the corpora that were searched.
                Only populated when intelligent_query_rewriting is enabled.
              type: array
              items:
                $ref: '#/components/schemas/RewrittenQuery'
              example:
              - corpus_key: fin_docs
                filter_extraction:
                  query: ESG compliance trends in EU
                  metadata_filter: doc.industry = 'banking' AND doc.year = 2023
              - corpus_key: legal_docs
                filter_extraction:
                  query: ESG regulations for EU banks 2023
                  metadata_filter: doc.jurisdiction = 'EU' AND doc.year = 2023
        response-stream:
          description: An individual event when the response is streamed.
          type: object
          discriminator:
            propertyName: type
            mapping:
              search_results: '#/components/schemas/StreamSearchResponse'
              chat_info: '#/components/schemas/ChatInfoResponse'
              generation_chunk: '#/components/schemas/StreamGenerationChunk'
              generation_end: '#/components/schemas/StreamGenerationEnd'
              generation_info: '#/components/schemas/GenerationInfo'
              factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
              end: '#/components/schemas/StreamResponseEnd'
              error: '#/components/schemas/StreamError'
          oneOf:
          - $ref: '#/components/schemas/StreamSearchResponse'
          - $ref: '#/components/schemas/ChatInfoResponse'
          - $ref: '#/components/schemas/StreamGenerationChunk'
          - $ref: '#/components/schemas/StreamGenerationEnd'
          - $ref: '#/components/schemas/GenerationInfo'
          - $ref: '#/components/schemas/FactualConsistencyScore'
          - $ref: '#/components/schemas/StreamResponseEnd'
          - $ref: '#/components/schemas/StreamError'
      x-fern-sdk-method-name: create
      x-fern-examples:
      - name: Batch
        request:
          stream_response: false
          query: What is a hallucination?
          search:
            corpora:
            - corpus_key: corpus_key
              metadata_filter: ''
              lexical_interpolation: 0.005
            context_configuration:
              sentences_before: 2
              sentences_after: 2
            reranker:
              type: customer_reranker
              reranker_id: rnk_272725719
          generation:
            response_language: eng
            enable_factual_consistency_score: true
            citations:
              style: none
          chat:
            store: true
        response:
          body: {}
      - name: Stream
        request:
          stream_response: true
          query: What is a hallucination?
          search:
            corpora:
            - corpus_key: corpus_key
              metadata_filter: ''
              lexical_interpolation: 0.005
            context_configuration:
              sentences_before: 2
              sentences_after: 2
            reranker:
              type: customer_reranker
              reranker_id: rnk_272725719
          generation:
            response_language: eng
            citations:
              style: none
            enable_factual_consistency_score: true
          chat:
            store: true
        response:
          stream: []
      x-fern-sdk-group-name: chats
    get:
      tags:
      - Chats
      summary: List chats
      description: Retrieve a list of previous chats in the Vectara account.
      operationId: listChats
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: limit
        description: The maximum number of results to return in the list.
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 10000
          default: 1000
      - in: query
        name: page_key
        description: Used to retrieve the next page of chats after the limit has been
          reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of chats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatsResponse'
        '403':
          description: Permissions do not allow listing chats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.chats
  /v2/chats/{chat_id}:
    get:
      tags:
      - Chats
      summary: Get a chat
      description: Get a chat summary to view what started the chat, but not subsequent
        turns.
      operationId: getChat
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        schema:
          type: string
          pattern: cht_.+$
      responses:
        '200':
          description: A chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          description: Permissions do not allow retrieving the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: get
    delete:
      tags:
      - Chats
      summary: Delete a chat
      description: Delete a chat and any turns it contains permanently.
      operationId: deleteChat
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        schema:
          type: string
          pattern: cht_.+$
      responses:
        '204':
          description: Successfully deleted the chat.
        '403':
          description: Permissions do not allow deleting the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: delete
  /v2/chats/{chat_id}/turns:
    post:
      tags:
      - Chats
      summary: Create a new turn in the chat
      description: Create a new turn in the chat. Each conversation has a series of
        `turn` objects, which are the sequence of message and response pairs that
        make up the dialog.
      operationId: createChatTurn
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        schema:
          type: string
          pattern: cht_.+$
      requestBody:
        content:
          application/json:
            examples:
              Legal:
                summary: Clarify difference from standard non-compete language
                value:
                  query: How does this clause compare to our standard non-compete
                    template?
                  generation:
                    response_language: eng
                  search:
                    corpora:
                    - corpus_key: legal_docs
                    metadataFilter: doc.clause_type = 'non_compete'
              Finance:
                summary: Follow-up on ISO early exercise benefits
                value:
                  query: If I early exercise ISOs, how does that affect AMT?
                  generation:
                    response_language: eng
                  search:
                    corpora:
                    - corpus_key: fin_docs
                    metadataFilter: doc.type = 'tax_policy'
              Support:
                summary: "Ask why token refresh didn\u2019t resolve issue"
                value:
                  query: Why did refreshing the token not fix the login problem for
                    some users?
                  search:
                    corpora:
                    - corpus_key: support_kb
                    metadataFilter: doc.platform = 'web_portal' AND doc.error_code
                      = '403'
            schema:
              $ref: '#/components/schemas/ChatRequest'
      x-stream-based-on-body: streamResponse()
      responses:
        '200':
          description: A response to a chat request.
          content:
            application/json:
              examples:
                Legal:
                  summary: Comparison to standard non-compete clause
                  value:
                    summary: This clause lacks a clear duration and omits geographical
                      scope, which are present in your standard template. Legal enforceability
                      may vary by state.
                    summary_factual_consistency_score: 0.93
                Finance:
                  summary: ISO early exercise and AMT implications
                  value:
                    summary: Exercising early can reduce the AMT impact if shares
                      are held for >1 year and not sold during that time. Form 6251
                      applies for AMT calculations.
                    summary_factual_consistency_score: 0.9
                Support:
                  summary: Token refresh failure root cause
                  value:
                    summary: Users affected had expired refresh tokens due to silent
                      authentication failures. Recommend forcing a full logout and
                      re-authentication cycle.
                    summary_factual_consistency_score: 0.89
              schema:
                $ref: '#/components/schemas/ChatFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatStreamedResponse'
        '400':
          description: Turn creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a turn in the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          description: Full response to a chat question when the result is not streamed.
          type: object
          properties:
            chat_id:
              description: If the chat response was stored, the ID of the chat.
              type: string
              example: cht_123456789
            turn_id:
              description: If the chat response was stored, the ID of the turn.
              type: string
              example: trn_987654321
            answer:
              description: The message from the chat model for the chat message.
              type: string
              example: EU banks in 2023 have increased carbon reduction initiatives
                by 20%, driven by new EU regulations mandating annual emissions reporting.
            response_language:
              description: The language that the answer is expected to be.
              $ref: '#/components/schemas/Language'
              example: eng
            search_results:
              description: The ranked search results that the chat model used.
              type: array
              items:
                $ref: '#/components/schemas/IndividualSearchResult'
            factual_consistency_score:
              description: Indicates the probability that the summary is factually
                consistent with the results. The system excludes this property if
                it encounters excessively large outputs or search results.
              type: number
              format: float
            rendered_prompt:
              description: The rendered prompt sent to the LLM. Useful when creating
                customer `prompt_template` templates.
              type: string
              example: '[{"role": "system", "content": "You are an ESG analyst."},
                {"role": "user", "content": "What are the carbon reduction initiatives
                by EU banks in 2023?"}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
            warnings:
              description: Non-fatal warnings that occurred during request processing
              type: array
              items:
                $ref: '#/components/schemas/QueryWarning'
            rephrased_query:
              description: View the actual query made to backend that was rephrased
                by the LLM from the input query.
              type: string
              example: Carbon reduction efforts by EU banks in 2023?
            rewritten_queries:
              description: The rewritten queries for the corpora that were searched.
                Only populated when intelligent_query_rewriting is enabled.
              type: array
              items:
                $ref: '#/components/schemas/RewrittenQuery'
              example:
              - corpus_key: fin_docs
                filter_extraction:
                  query: ESG compliance trends in EU
                  metadata_filter: doc.industry = 'banking' AND doc.year = 2023
              - corpus_key: legal_docs
                filter_extraction:
                  query: ESG regulations for EU banks 2023
                  metadata_filter: doc.jurisdiction = 'EU' AND doc.year = 2023
        response-stream:
          description: An individual event when the response is streamed.
          type: object
          discriminator:
            propertyName: type
            mapping:
              search_results: '#/components/schemas/StreamSearchResponse'
              chat_info: '#/components/schemas/ChatInfoResponse'
              generation_chunk: '#/components/schemas/StreamGenerationChunk'
              generation_end: '#/components/schemas/StreamGenerationEnd'
              generation_info: '#/components/schemas/GenerationInfo'
              factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
              end: '#/components/schemas/StreamResponseEnd'
              error: '#/components/schemas/StreamError'
          oneOf:
          - $ref: '#/components/schemas/StreamSearchResponse'
          - $ref: '#/components/schemas/ChatInfoResponse'
          - $ref: '#/components/schemas/StreamGenerationChunk'
          - $ref: '#/components/schemas/StreamGenerationEnd'
          - $ref: '#/components/schemas/GenerationInfo'
          - $ref: '#/components/schemas/FactualConsistencyScore'
          - $ref: '#/components/schemas/StreamResponseEnd'
          - $ref: '#/components/schemas/StreamError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: createTurns
    get:
      tags:
      - Chats
      summary: List turns in a chat
      description: List all turns in a chat to see all message and response pairs
        that make up the dialog.
      operationId: listChatTurns
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        example: cht_1234567890
        schema:
          type: string
          pattern: cht_.+$
      responses:
        '200':
          description: List of turns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatTurnsResponse'
        '403':
          description: Permissions do not allow listing turns in the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: listTurns
  /v2/chats/{chat_id}/turns/{turn_id}:
    get:
      tags:
      - Chats
      summary: Get a turn
      description: Get a specific turn from a chat, which is a message and response
        pair from the conversation.
      operationId: getChatTurn
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        schema:
          type: string
          pattern: cht_.+$
      - in: path
        name: turn_id
        description: The ID of the turn.
        required: true
        schema:
          type: string
          pattern: trn_.+$
      responses:
        '200':
          description: The turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '403':
          description: Permissions do not allow getting the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus, chat, or turn not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: getTurn
    delete:
      tags:
      - Chats
      summary: Delete a turn
      description: Delete a turn from a chat. This will delete all subsequent turns
        in the chat.
      operationId: deleteChatTurn
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        schema:
          type: string
          pattern: cht_.+$
      - in: path
        name: turn_id
        description: The ID of the turn.
        required: true
        schema:
          type: string
          pattern: trn_.+$
      responses:
        '204':
          description: Successfully deleted a turn.
        '403':
          description: Permissions do not allow deleting the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus, chat, or turn not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: deleteTurn
    patch:
      tags:
      - Chats
      summary: Update a turn
      description: Update a turn; used to disable or enable a chat.
      operationId: updateChatTurn
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: chat_id
        description: The ID of the chat.
        required: true
        example: cht_1234567890
        schema:
          type: string
          pattern: cht_.+$
      - in: path
        name: turn_id
        description: The ID of the turn.
        required: true
        example: trn_987654321
        schema:
          type: string
          pattern: trn_.+$
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTurnRequest'
      responses:
        '200':
          description: Successfully modified the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '403':
          description: Permissions do not allow updating the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus, chat, or turn not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: updateTurn
  /v2/llms:
    post:
      tags:
      - Large Language Models
      summary: Create an LLM
      description: Create a new LLM for use with query and chat endpoints
      operationId: createLLM
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLLMRequest'
      responses:
        '201':
          description: The LLM has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLM'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating an LLM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: create
    get:
      tags:
      - Large Language Models
      summary: List LLMs
      description: List LLMs that can be used with query and chat endpoints. The LLM
        is not directly specified in a query, but instead a `generation_preset_name`
        is used. The `generation_preset_name` property in generation parameters can
        be found as the `name` property on the Generations Presets retrieved from
        `/v2/generation_presets`.
      operationId: listLLMs
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: filter
        in: query
        description: A regular expression to match names and descriptions of the LLMs.
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of results to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of LLMs after the limit has been
          reached. This parameter is not needed for the first page of results.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of LLMs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLLMsResponse'
        '403':
          description: Permissions do not allow listing summarizers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.llms
  /v2/llms/{llm_id}:
    get:
      tags:
      - Large Language Models
      summary: Get an LLM
      description: Get details about a specific LLM.
      operationId: getLLM
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: llm_id
        in: path
        description: The name of the LLM to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The LLM details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLM'
        '403':
          description: Permissions do not allow retrieving this LLM.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: LLM not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: get
    delete:
      tags:
      - Large Language Models
      summary: Delete an LLM
      description: Delete a custom LLM connection. Built-in LLMs cannot be deleted.
      operationId: deleteLLM
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: llm_id
        in: path
        description: The name of the LLM to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The LLM was successfully deleted.
        '403':
          description: Permissions do not allow deleting this LLM.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: LLM not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: delete
  /v2/llms/chat/completions:
    post:
      tags:
      - LLM Chat Completions
      summary: Creates a model response for the given chat conversation
      description: OpenAI-compatible endpoint for chat completions. Creates a response
        for the given chat conversation. The chat completion API allows you to chat
        with Vectara's language models in a way that's compatible with OpenAI's specification.
        This makes it easy to integrate with applications already designed for OpenAI's
        API.
      operationId: createChatCompletion
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
      x-stream-based-on-body: stream()
      responses:
        '200':
          description: A chat completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionStreamResponse'
        '400':
          description: Chat completion request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a chat completion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: llm
      x-fern-sdk-method-name: chatCompletion
  /v2/generation_presets:
    get:
      tags:
      - Generation Presets
      summary: List generation presets
      description: List generation presets used for query or chat requests. Generation
        presets are the build of properties used to configure generation for a request.
        This includes the template that renders the prompt, and various generation
        settings like `temperature`.
      operationId: listGenerationPresets
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: llm_name
        in: query
        description: Filter presets by the LLM name.
        required: false
        schema:
          type: string
          example: mockingbird-2.0
      - name: limit
        in: query
        description: The maximum number of results to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
        example: 50
      - name: page_key
        in: query
        description: Used to retrieve the next page of generation presets after the
          limit has been reached. This parameter is not needed for the first page
          of results.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of Generation Presets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGenerationPresetsResponse'
        '403':
          description: Permissions do not allow listing generation presets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: generation_presets
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.generation_presets
  /v2/evaluate_factual_consistency:
    post:
      tags:
      - Factual Consistency Evaluation
      summary: Evaluate factual consistency
      description: Evaluate the factual consistency of a generated text (like a summary)
        against source documents. This determines how accurately the generated text
        reflects the information in the source documents, helping identify potential
        hallucinations or misrepresentations.
      operationId: evaluateFactualConsistency
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateFactualConsistencyRequest'
      responses:
        '200':
          description: The factual consistency evaluation results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateFactualConsistencyResponse'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow factual consistency evaluation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Language not supported by the factual consistency service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: factual-consistency
      x-fern-sdk-method-name: evaluate
  /v2/encoders:
    post:
      tags:
      - Encoders
      summary: Create an encoder
      description: Create a new encoder.
      operationId: createEncoder
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEncoderRequest'
      responses:
        '201':
          description: The encoder has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encoder'
        '400':
          description: Encoder creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating an encoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: encoders
      x-fern-sdk-method-name: create
    get:
      tags:
      - Encoders
      summary: List encoders
      description: Encoders are used to store and retrieve from a corpus.
      operationId: listEncoders
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression against encoder names and descriptions.
        required: false
        schema:
          type: string
          example: vectara.*
      - in: query
        name: limit
        description: The maximum number of results to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of encoders after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of encoders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEncodersResponse'
        '403':
          description: Permissions do not allow listing encoders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: encoders
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.encoders
  /v2/rerankers:
    get:
      tags:
      - Rerankers
      summary: List rerankers
      description: Rerankers are used to improve the ranking (ordering) of search
        results.
      operationId: listRerankers
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression against reranker names and descriptions.
        required: false
        schema:
          type: string
          example: vectara.*
      - in: query
        name: limit
        description: The maximum number of rerankers to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of rerankers after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of rerankers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRerankersResponse'
        '403':
          description: Permissions do not allow listing rerankers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: rerankers
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.rerankers
  /v2/table_extractors:
    get:
      tags:
      - Table Extractors
      summary: List supported table extractors
      description: Table extractors are used to extract tabular data from documents
        during indexing.
      operationId: listTableExtractors
      x-fern-sdk-group-name: table_extractors
      x-fern-sdk-method-name: list
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      responses:
        '200':
          description: List of supported table extractors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTableExtractorsResponse'
        '403':
          description: Permissions do not allow listing table extractors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/hallucination_correctors:
    get:
      tags:
      - Hallucination Correctors
      summary: List hallucination correctors
      description: Retrieves a list of available hallucination correctors used for
        detecting and correcting hallucinations in AI-generated content. This endpoint
        supports filtering by name or description, pagination, and metadata for navigating
        large result sets.
      operationId: listHallucinationCorrectors
      x-fern-sdk-group-name: hallucination_correctors
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.hallucinationCorrectionModels
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression applied to the name and description fields.
          Use this to return only hallucination correctors that match specific keywords
          or naming conventions.
        required: false
        schema:
          type: string
      - in: query
        name: limit
        description: The maximum number of hallucination correctors to return in the
          list. Defaults to 10. Range is between 1 and 100.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Retrieves the next page of hallucination correctors after reaching
          the limit.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of hallucination correctors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHallucinationCorrectorsResponse'
        '403':
          description: Permissions do not allow listing hallucination correctors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/hallucination_correctors/correct_hallucinations:
    post:
      tags:
      - Hallucination Correctors
      summary: Corrects hallucinations in generated text based on source documents
      description: This endpoint identifies information in generated text that is
        not supported by the provided source documents and offers corrections with
        minimal changes. This can be used standalone or as part of a RAG workflow
        where the HHEM score indicates potential hallucinations.
      operationId: correctHallucinations
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HallucinationCorrectionRequest'
      responses:
        '200':
          description: Successfully analyzed the text for hallucinations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HallucinationCorrectionResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow hallucination correction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: hallucination_correctors
      x-fern-sdk-method-name: hallucinationCorrection
  /v2/jobs:
    get:
      tags:
      - Jobs
      summary: List jobs
      description: List jobs for the account. Jobs are background processes like replacing
        the filterable metadata attributes.
      operationId: listJobs
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: corpus_key
        in: query
        description: The unique key identifying the corpus with the job.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CorpusKey'
      - name: after
        in: query
        description: Filter by jobs created after a particular date-time.
        required: false
        schema:
          type: string
          format: date-time
      - name: state
        in: query
        description: Filter by jobs in particular states.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/JobState'
      - name: limit
        in: query
        description: The maximum number of jobs to return at one time.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of jobs after the limit has been
          reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
        '403':
          description: Permissions do not allow listing jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: jobs
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.jobs
  /v2/jobs/{job_id}:
    get:
      tags:
      - Jobs
      summary: Get a job by ID
      description: Get a job by a specific ID. Jobs are background processes like
        replacing the filterable metadata attributes.
      operationId: getJob
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: job_id
        in: path
        description: The ID of the job to get.
        required: true
        schema:
          type: string
          pattern: job_.+$
      responses:
        '200':
          description: A job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '403':
          description: Permissions do not allow retrieving a job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: jobs
      x-fern-sdk-method-name: get
  /v2/users:
    post:
      tags:
      - Users
      summary: Create a user in the current customer account
      description: Create a user for the current customer account.
      operationId: createUser
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: The created user.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/User'
                - properties:
                    one_time_code:
                      type: string
                      description: A one time code for the newly created user to create
                        a password. This is optional, and is only populated for some
                        Vectara deployments.
                    one_time_code_link:
                      type: string
                      description: The link where to enter the `one_time_code`. This
                        is optional, and is only populated for some Vectara deployments.
        '400':
          description: User creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow retrieving a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: create
    get:
      tags:
      - Users
      summary: List users in the account
      description: Lists all users in the account.
      operationId: listUsers
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: limit
        in: query
        description: The maximum number of users to return at one time.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of users after the limit has been
          reached.
        required: false
        schema:
          type: string
      - name: corpus_key
        in: query
        description: Filter users by access to this corpus.
        required: false
        schema:
          $ref: '#/components/schemas/CorpusKey'
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '403':
          description: Permissions do not allow listing users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.users
  /v2/users/{username}:
    get:
      tags:
      - Users
      summary: Get a user
      description: Get a user and view details like the email, username, and associated
        roles.
      operationId: getUser
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: username
        in: path
        description: Specifies the user ID that to retrieve. Note that the username
          must be percent encoded.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permissions do not allow retrieving the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Users
      summary: Update a user
      description: Update details about a user such as role names.
      operationId: updateUser
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: username
        in: path
        description: Specifies the user ID to update. Note that the username must
          be percent encoded.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: New user after modification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permissions do not allow updating the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: update
    delete:
      tags:
      - Users
      summary: Delete a user
      description: Delete a user from the account.
      operationId: deleteUser
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: username
        in: path
        description: Specifies the user ID to delete. Note that the username must
          be percent encoded.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: User was successfully deleted.
        '403':
          description: Permissions do not allow deleting the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: delete
  /v2/users/{username}/reset_password:
    post:
      tags:
      - Users
      summary: Reset the password for a user
      description: Reset the password for a user.
      operationId: resetUserPassword
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: username
        in: path
        description: Specifies the user ID to update. Note that the username must
          be percent encoded and URI safe.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User was sent the password reset email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  one_time_code:
                    type: string
                    description: A one time code that can be used to reset the password.
                      This is optional, and is only populated for some Vectara deployments.
                  one_time_code_link:
                    type: string
                    description: The link where to enter the `one_time_code`. This
                      is optional, and is only populated for some Vectara deployments.
        '403':
          description: Permissions do not allow resetting the user password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: resetPassword
  /v2/api_keys:
    post:
      tags:
      - API Keys
      summary: Create an API key
      description: An API key is to authenticate when calling Vectara APIs.
      operationId: createApiKey
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: An API key object, used to query the Vectara API with the assigned
            roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: API key creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating the API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: create
    get:
      tags:
      - API Keys
      summary: List API keys
      description: Retrieve a list of API keys for the customer account with optional
        filtering.
      operationId: listApiKeys
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: limit
        in: query
        description: Max number of API keys to return at one time.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of API keys after the limit has
          been reached.
        required: false
        schema:
          type: string
      - name: corpus_key
        in: query
        description: Filters the API keys to only those with permissions on the specified
          corpus key.
        required: false
        schema:
          $ref: '#/components/schemas/CorpusKey'
      - name: api_key_role
        in: query
        description: Filter API keys by their role.
        required: false
        schema:
          $ref: '#/components/schemas/ApiKeyRole'
      responses:
        '200':
          description: An array of API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        '400':
          description: API key list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.api_keys
  /v2/api_keys/{api_key_id}:
    get:
      tags:
      - API Keys
      summary: Get an API key
      description: Retrieve details of a specific API key by its ID.
      operationId: getApiKey
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: api_key_id
        in: path
        description: The ID of the API key.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: get
    patch:
      tags:
      - API Keys
      summary: Update an API key
      description: Update an API key such as the roles attached to the key.
      operationId: updateApiKey
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: api_key_id
        in: path
        description: The ID of the API key.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
      responses:
        '200':
          description: The API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: update
    delete:
      tags:
      - API Keys
      summary: Delete an API key
      description: Delete API keys to help you manage the security and lifecycle of
        API keys in your application.
      operationId: deleteApiKey
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: api_key_id
        in: path
        description: The ID of the API key.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The API key was deleted.
        '403':
          description: Permissions do not allow deleting this API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: delete
  /v2/app_clients:
    post:
      tags:
      - Application Clients
      summary: Create an App Client
      description: An App Client is used for OAuth 2.0 authentication when calling
        Vectara APIs.
      operationId: createAppClient
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppClientRequest'
      responses:
        '201':
          description: An App Client object, used to query the Vectara API with the
            assigned roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '400':
          description: App Client creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating the App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: create
    get:
      tags:
      - Application Clients
      summary: List App Clients
      description: Retrieve a list of application clients configured for the customer
        account.
      operationId: listAppClient
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: limit
        in: query
        description: The maximum number of App Clients to return at one time.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: filter
        in: query
        description: Regular expression to filter the names of the App Clients.
        required: false
        schema:
          type: string
      - name: page_key
        in: query
        description: Used to retrieve the next page of App Clients after the limit
          has been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: An array of App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppClientsResponse'
        '400':
          description: App Clients list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.app_clients
  /v2/app_clients/{app_client_id}:
    get:
      tags:
      - Application Clients
      summary: Get an App Client
      description: Retrieve details of a specific application client by its ID.
      operationId: getAppClient
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: app_client_id
        in: path
        description: The ID of the App Client.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '403':
          description: Permissions do not allow getting this App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Application Clients
      summary: Update an App Client
      description: Update the configuration or settings of an existing application
        client.
      operationId: updateAppClient
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: app_client_id
        in: path
        description: The name of App Client.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppClientRequest'
      responses:
        '200':
          description: The App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '403':
          description: Permissions do not allow updating this App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: update
    delete:
      tags:
      - Application Clients
      summary: Delete an App Client
      description: Remove an application client configuration from the customer account.
      operationId: deleteAppClient
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - name: app_client_id
        in: path
        description: The ID of App Client.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The App Client was deleted.
        '403':
          description: Permissions do not allow deleting this App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: delete
  /oauth/token:
    post:
      security: []
      summary: Request an access token
      description: Obtain an OAuth2 access token using client credentials
      x-fern-sdk-group-name:
      - auth
      x-fern-sdk-method-name: getToken
      x-fern-server-name: Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: The client ID of the application
                client_secret:
                  type: string
                  description: The client secret of the application
                grant_type:
                  x-fern-type: literal<"client_credentials">
              required:
              - client_id
              - client_secret
              - grant_type
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                x-fern-type-name: GetTokenResponse
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                required:
                - access_token
                - token_type
                - expires_in
      operationId: getOAuthToken
      tags:
      - Authentication
  /v2/tool_servers:
    get:
      tags:
      - Tool Servers
      summary: List tool servers
      description: Retrieve a list of available tool servers that expose various tools.
      operationId: listToolServers
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression against tool server names and descriptions
          to filter the results.
        required: false
        schema:
          type: string
          example: rag.*
      - in: query
        name: type
        description: Filter tool servers by type.
        required: false
        schema:
          type: string
          enum:
          - mcp
          example: mcp
      - in: query
        name: enabled
        description: Filter tool servers by enabled status.
        required: false
        schema:
          type: boolean
          example: true
      - in: query
        name: limit
        description: The maximum number of tool servers to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of tool servers after the limit
          has been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of available tool servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolServersResponse'
        '403':
          description: Permissions do not allow listing tool servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: tool-servers
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.tool_servers
    post:
      tags:
      - Tool Servers
      summary: Create tool server
      description: Create a new tool server to expose tools for use by agents.
      operationId: createToolServer
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToolServerRequest'
      responses:
        '201':
          description: The created tool server details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolServer'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating tool servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: tool-servers
      x-fern-sdk-method-name: create
  /v2/tool_servers/{tool_server_id}:
    get:
      tags:
      - Tool Servers
      summary: Get tool Server
      description: Retrieve details about a specific tool server by its Id.
      operationId: getToolServer
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_server_id
        description: The unique identifier of the tool server to retrieve.
        required: true
        schema:
          type: string
          pattern: tsr_[0-9a-zA-Z_-]+$
          example: tsr_rag_search
      responses:
        '200':
          description: The requested tool server details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolServer'
        '403':
          description: Permissions do not allow accessing this tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool Server not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tool-servers
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Tool Servers
      summary: Update tool server
      description: Update the configuration of a specific tool server.
      operationId: updateToolServer
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_server_id
        description: The unique identifier of the tool server to update.
        required: true
        schema:
          type: string
          pattern: tsr_[0-9a-zA-Z_-]+$
          example: tsr_rag_search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToolServerRequest'
      responses:
        '200':
          description: The updated tool server details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolServer'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow updating this tool server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool Server not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tool-servers
      x-fern-sdk-method-name: update
    delete:
      tags:
      - Tool Servers
      summary: Delete tool server
      description: Permanently delete a tool server and all its associated configuration
        and tools. This action cannot be undone.
      operationId: deleteToolServer
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_server_id
        description: The unique identifier of the tool server to delete.
        required: true
        schema:
          type: string
          pattern: tsr_[0-9a-zA-Z_-]+$
          example: tsr_rag_search
      responses:
        '204':
          description: Tool server deleted successfully.
        '403':
          description: Permissions do not allow deleting this tool server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool Server not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tool-servers
      x-fern-sdk-method-name: delete
  /v2/tool_servers/{tool_server_id}/sync:
    post:
      tags:
      - Tool Servers
      summary: Synchronize tool server
      description: Trigger a synchronization of the tool server to ensure it is up-to-date
        with the latest tools.
      operationId: syncToolServer
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_server_id
        description: The unique identifier of the tool server to synchronize.
        required: true
        schema:
          type: string
          pattern: tsr_[0-9a-zA-Z_-]+$
          example: tsr_rag_search
      responses:
        '204':
          description: Tool server synchronized successfully.
        '403':
          description: Permissions do not allow synchronizing this tool server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool Server not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tool-servers
      x-fern-sdk-method-name: sync
  /v2/tools:
    get:
      tags:
      - Tools
      summary: List tools
      description: List all tools available to the authenticated user, with optional
        filtering and pagination.
      operationId: listTools
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression against tool names and descriptions to filter
          the results.
        required: false
        schema:
          type: string
          example: rag.*
      - in: query
        name: type
        description: Filter tools by type.
        required: false
        schema:
          type: string
          enum:
          - mcp
          example: mcp
      - in: query
        name: enabled
        description: Filter tools by enabled status.
        required: false
        schema:
          type: boolean
          example: true
      - in: query
        name: tool_server_id
        description: Filter tools by the tool server they belong to.
        required: false
        schema:
          type: string
          pattern: tsr_[0-9a-zA-Z_-]+$
          example: tsr_rag_search
      - in: query
        name: limit
        description: The maximum number of tools to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of tools after the limit has been
          reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of available tools.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolsResponse'
        '403':
          description: Permissions do not allow listing tools.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: tools
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.tools
  /v2/tools/{tool_id}:
    get:
      tags:
      - Tools
      summary: Get tool
      description: Retrieve the details of a specific tool by its ID, including its
        configuration and capabilities.
      operationId: getTool
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_id
        description: The unique identifier of the tool to retrieve.
        required: true
        schema:
          type: string
          pattern: tol_[0-9a-zA-Z_-]+$
          example: tol_rag_search
      responses:
        '200':
          description: The requested tool details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        '403':
          description: Permissions do not allow accessing this tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tools
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Tools
      summary: Update tool
      description: Update an existing tool's configuration.
      operationId: updateTool
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_id
        description: The unique identifier of the tool to update.
        required: true
        schema:
          type: string
          pattern: tol_[0-9a-zA-Z_-]+$
          example: tol_rag_search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToolRequest'
      responses:
        '200':
          description: The tool has been updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
        '400':
          description: Tool update request was malformed or contains invalid references.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow updating this tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tools
      x-fern-sdk-method-name: update
    delete:
      tags:
      - Tools
      summary: Delete tool
      description: Permanently delete a tool and all its associated configuration.
        This action cannot be undone.
      operationId: deleteTool
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: tool_id
        description: The unique identifier of the tool to delete.
        required: true
        schema:
          type: string
          pattern: tol_[0-9a-zA-Z_-]+$
          example: tol_rag_search
      responses:
        '204':
          description: The tool has been deleted successfully.
        '403':
          description: Permissions do not allow deleting this tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tool not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: tools
      x-fern-sdk-method-name: delete
  /v2/instructions:
    post:
      tags:
      - Instructions
      summary: Create instruction
      description: Create a new instruction that can guide agent behavior.
      operationId: createInstruction
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstructionRequest'
      responses:
        '201':
          description: The instruction has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instruction'
        '400':
          description: Instruction creation request was malformed or contains invalid
            content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating instructions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: create
    get:
      tags:
      - Instructions
      summary: List instructions
      description: List all instructions available to the authenticated user, with
        optional filtering and pagination.
      operationId: listInstructions
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression against instruction names and descriptions
          to filter the results.
        required: false
        schema:
          type: string
          example: support.*
      - in: query
        name: type
        description: Filter instructions by type.
        required: false
        schema:
          type: string
          enum:
          - initial
          example: initial
      - in: query
        name: enabled
        description: Filter instructions by enabled status.
        required: false
        schema:
          type: boolean
          example: true
      - in: query
        name: limit
        description: The maximum number of instructions to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of instructions after the limit
          has been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of available instructions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInstructionsResponse'
        '403':
          description: Permissions do not allow listing instructions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.instructions
  /v2/instructions/{instruction_id}:
    get:
      tags:
      - Instructions
      summary: Get instruction
      description: Retrieve the details of a specific instruction by its ID, including
        its template and configuration.
      operationId: getInstruction
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: instruction_id
        description: The unique identifier of the instruction to retrieve.
        required: true
        schema:
          $ref: '#/components/schemas/InstructionId'
      - in: query
        name: version
        description: The specific version of the instruction to retrieve. If not specified,
          the latest version will be returned.
        required: false
        schema:
          type: integer
          minimum: 1
          example: 1
      responses:
        '200':
          description: The requested instruction details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instruction'
        '403':
          description: Permissions do not allow accessing this instruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Instruction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Instructions
      summary: Update instruction
      description: Update an existing instruction's template, metadata, and configuration.
      operationId: updateInstruction
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: instruction_id
        description: The unique identifier of the instruction to update.
        required: true
        schema:
          $ref: '#/components/schemas/InstructionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstructionRequest'
      responses:
        '200':
          description: The instruction has been updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instruction'
        '400':
          description: Instruction update request was malformed or contains invalid
            content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow updating this instruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Instruction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: update
    delete:
      tags:
      - Instructions
      summary: Delete instruction
      description: Permanently delete an instruction and all its associated configuration.
        This action cannot be undone.
      operationId: deleteInstruction
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: instruction_id
        description: The unique identifier of the instruction to delete.
        required: true
        schema:
          $ref: '#/components/schemas/InstructionId'
      responses:
        '204':
          description: The instruction has been deleted successfully.
        '403':
          description: Permissions do not allow deleting this instruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Instruction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: delete
  /v2/instructions/{instruction_id}/test:
    post:
      tags:
      - Instructions
      summary: Test instruction
      description: Test an instruction by rendering its template with provided context
        data and tools.
      operationId: testInstruction
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: instruction_id
        description: The unique identifier of the instruction to test.
        required: true
        schema:
          $ref: '#/components/schemas/InstructionId'
      - in: query
        name: version
        description: The specific version of the instruction to test. If not specified,
          the latest version will be used.
        required: false
        schema:
          type: integer
          minimum: 1
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestInstructionRequest'
      responses:
        '200':
          description: The instruction has been tested successfully and the rendered
            result is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestInstructionResponse'
        '400':
          description: Test request was malformed or template rendering failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow testing this instruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Instruction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: test
  /v2/instructions/{instruction_id}/versions/{version}:
    delete:
      tags:
      - Instructions
      summary: Delete instruction version
      description: Permanently delete the specified version of the instruction. This
        action cannot be undone.
      operationId: deleteInstructionVersion
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: instruction_id
        description: The unique identifier of the instruction to delete.
        required: true
        schema:
          $ref: '#/components/schemas/InstructionId'
      - in: path
        name: version
        description: The specific version of the instruction to delete.
        required: true
        schema:
          type: integer
          minimum: 1
          example: 1
      responses:
        '204':
          description: The instruction has been deleted successfully.
        '403':
          description: Permissions do not allow deleting this instruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Instruction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '409':
          description: The specified version cannot be deleted as it's used in an
            agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: instructions
      x-fern-sdk-method-name: deleteVersion
  /v2/agents:
    post:
      tags:
      - Agents
      summary: Create agent
      description: "Create a new agent. An agent is compromised as 3 main things of\
        \ functionality:\n  1. The instructions an agent follows. Known as a system\
        \ in prompt in other platforms.\n  2. The steps an agent follows when receiving\
        \ an input.\n  3. The tools an agent can use to resolve those steps and instructions.\n\
        Instructions are tied to each step, and should be well crafted so that the\
        \ agent can perform the desired actions when given an input.\n\nTo use an\
        \ agent, create a new session (called thread or chat in other platforms),\
        \ and send new inputs to the agent to get responses.\n\nNote: Only a single\
        \ step is supported with no follow up steps. So the `first_step` will be only\
        \ the only step. We will add multiple steps and step types to execute complex\
        \ workflows, but many agents can work well with a single step.\n"
      operationId: createAgent
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentRequest'
      responses:
        '201':
          description: The agent has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          description: Agent creation request was malformed or contains invalid references.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating agents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: agents
      x-fern-sdk-method-name: create
    get:
      tags:
      - Agents
      summary: List agents
      description: List all agents available to the authenticated user, with optional
        filtering and pagination.
      operationId: listAgents
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: query
        name: filter
        description: A regular expression against agent names and descriptions to
          filter the results.
        required: false
        schema:
          type: string
          example: support.*
      - in: query
        name: enabled
        description: Filter agents by enabled status.
        required: false
        schema:
          type: boolean
          example: true
      - in: query
        name: limit
        description: The maximum number of agents to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of agents after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of available agents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAgentsResponse'
        '403':
          description: Permissions do not allow listing agents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: agents
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.agents
  /v2/agents/{agent_key}:
    get:
      tags:
      - Agents
      summary: Get agent
      description: Retrieve the details of a specific agent by its ID, including its
        configuration, capabilities, and associated resources.
      operationId: getAgent
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique key of the agent to retrieve.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      responses:
        '200':
          description: The requested agent details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '403':
          description: Permissions do not allow accessing this agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agents
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Agents
      summary: Update agent
      description: Update an existing agent's configuration, including its corpora,
        tools, and generation presets.
      operationId: updateAgent
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique key of the agent to update.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentRequest'
      responses:
        '200':
          description: The agent has been updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          description: Agent update request was malformed or contains invalid references.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow updating this agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agents
      x-fern-sdk-method-name: update
    put:
      tags:
      - Agents
      summary: Replace agent
      description: Completely replace an existing agent's configuration, including
        its corpora, tools, and generation presets.
      operationId: replaceAgent
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique key of the agent to replace.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceAgentRequest'
      responses:
        '200':
          description: The agent has been replaced successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          description: Agent replacement request was malformed or contains invalid
            references.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow replacing this agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agents
      x-fern-sdk-method-name: replace
    delete:
      tags:
      - Agents
      summary: Delete agent
      description: Permanently delete an agent and all its associated configuration.
        This action cannot be undone.
      operationId: deleteAgent
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique key of the agent to delete.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      responses:
        '204':
          description: The agent has been deleted successfully.
        '403':
          description: Permissions do not allow deleting this agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agents
      x-fern-sdk-method-name: delete
  /v2/agents/{agent_key}/sessions:
    post:
      tags:
      - Agent Sessions
      summary: Create agent session
      description: Create a new session for interacting with an agent. Sessions maintain
        conversation context.
      operationId: createAgentSession
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique key of the agent to create a session for.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentSessionRequest'
      responses:
        '201':
          description: The agent session has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSession'
        '400':
          description: Session creation request was malformed or references invalid
            agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating sessions for this agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Referenced agent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_sessions
      x-fern-sdk-method-name: create
    get:
      tags:
      - Agent Sessions
      summary: List agent sessions
      description: List all agent sessions for a specific agent, with optional filtering
        and pagination.
      operationId: listAgentSessions
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent to list sessions for.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: query
        name: filter
        description: A regular expression against session names and descriptions to
          filter the results.
        required: false
        schema:
          type: string
          example: support.*
      - in: query
        name: limit
        description: The maximum number of sessions to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of sessions after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of available agent sessions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAgentSessionsResponse'
        '403':
          description: Permissions do not allow listing agent sessions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_sessions
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.sessions
  /v2/agents/{agent_key}/sessions/{session_key}:
    get:
      tags:
      - Agent Sessions
      summary: Get agent session
      description: Retrieve the details of a specific agent session by its ID, including
        session configuration.
      operationId: getAgentSession
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: path
        name: session_key
        description: The unique key of the session to retrieve.
        required: true
        schema:
          $ref: '#/components/schemas/AgentSessionKey'
      responses:
        '200':
          description: The requested agent session details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSession'
        '403':
          description: Permissions do not allow accessing this agent session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent or session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_sessions
      x-fern-sdk-method-name: get
    patch:
      tags:
      - Agent Sessions
      summary: Update agent session
      description: Update an existing agent session's configuration and metadata.
      operationId: updateAgentSession
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: path
        name: session_key
        description: The unique key of the session to update.
        required: true
        schema:
          $ref: '#/components/schemas/AgentSessionKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentSessionRequest'
      responses:
        '200':
          description: The agent session has been updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSession'
        '400':
          description: Session update request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow updating this agent session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent or session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_sessions
      x-fern-sdk-method-name: update
    delete:
      tags:
      - Agent Sessions
      summary: Delete agent session
      description: Permanently delete an agent session. This action cannot be undone.
      operationId: deleteAgentSession
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: path
        name: session_key
        description: The unique key of the session to delete.
        required: true
        schema:
          $ref: '#/components/schemas/AgentSessionKey'
      responses:
        '204':
          description: The agent session has been deleted successfully.
        '403':
          description: Permissions do not allow deleting this agent session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent or session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_sessions
      x-fern-sdk-method-name: delete
  /v2/agents/{agent_key}/sessions/{session_key}/events:
    post:
      tags:
      - Agent Sessions
      summary: Interact with an agent
      description: Create a new input to an agent to interact with it.
      operationId: createAgentInput
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: path
        name: session_key
        description: The unique key of the session to create an input in.
        required: true
        schema:
          $ref: '#/components/schemas/AgentSessionKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInputEvent'
      x-stream-based-on-body: streamResponse()
      responses:
        '201':
          description: The input event has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/AgentStreamedResponse'
        '400':
          description: Input event creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating input events in this session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent or session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_events
      x-fern-sdk-method-name: create
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          description: An event in an agent session conversation.
          type: object
          discriminator:
            propertyName: type
            mapping:
              input_message: '#/components/schemas/InputMessageEvent'
              tool_input: '#/components/schemas/ToolInputEvent'
              tool_output: '#/components/schemas/ToolOutputEvent'
              thinking: '#/components/schemas/ThinkingEvent'
              agent_output: '#/components/schemas/AgentOutputEvent'
              context_limit_exceeded: '#/components/schemas/ContextLimitExceededEvent'
          oneOf:
          - $ref: '#/components/schemas/InputMessageEvent'
          - $ref: '#/components/schemas/ToolInputEvent'
          - $ref: '#/components/schemas/ToolOutputEvent'
          - $ref: '#/components/schemas/ThinkingEvent'
          - $ref: '#/components/schemas/AgentOutputEvent'
          - $ref: '#/components/schemas/ContextLimitExceededEvent'
          properties:
            id:
              description: The unique identifier for the event.
              type: string
              pattern: aev_[0-9a-zA-Z_-]+$
              example: aev_user_001
            session_key:
              $ref: '#/components/schemas/AgentSessionKey'
              description: The key of the session this event belongs to.
            type:
              description: The type of event.
              type: string
              enum:
              - input_message
              - tool_input
              - tool_output
              - thinking
              - agent_output
              - context_limit_exceeded
              example: input_message
            created_at:
              description: Timestamp when the event was created.
              type: string
              format: date-time
              example: '2024-01-15T10:35:00Z'
          required:
          - id
          - session_key
          - type
          - created_at
        response-stream:
          description: An individual event sent with Server-sent Events (SSE) when
            the agent response is streamed.
          type: object
          discriminator:
            propertyName: type
            mapping:
              streaming_agent_output: '#/components/schemas/StreamingAgentOutput'
              streaming_agent_output_end: '#/components/schemas/StreamingAgentOutputEnd'
              streaming_thinking: '#/components/schemas/StreamingThinking'
              streaming_thinking_end: '#/components/schemas/StreamingThinkingEnd'
              tool_input: '#/components/schemas/ToolInputEvent'
              tool_output: '#/components/schemas/ToolOutputEvent'
              context_limit_exceeded: '#/components/schemas/ContextLimitExceededEvent'
              error: '#/components/schemas/StreamError'
              end: '#/components/schemas/StreamResponseEnd'
          oneOf:
          - $ref: '#/components/schemas/StreamingAgentOutput'
          - $ref: '#/components/schemas/StreamingAgentOutputEnd'
          - $ref: '#/components/schemas/StreamingThinking'
          - $ref: '#/components/schemas/StreamingThinkingEnd'
          - $ref: '#/components/schemas/ToolInputEvent'
          - $ref: '#/components/schemas/ToolOutputEvent'
          - $ref: '#/components/schemas/ContextLimitExceededEvent'
          - $ref: '#/components/schemas/StreamError'
          - $ref: '#/components/schemas/StreamResponseEnd'
    get:
      tags:
      - Agent Sessions
      summary: List events in agent session
      description: List all events in a specific agent session, with optional pagination.
      operationId: listAgentEvents
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: path
        name: session_key
        description: The unique key of the session to list events for.
        required: true
        schema:
          $ref: '#/components/schemas/AgentSessionKey'
      - in: query
        name: limit
        description: The maximum number of events to return in the list.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 10
      - name: page_key
        in: query
        description: Used to retrieve the next page of events after the limit has
          been reached.
        required: false
        schema:
          type: string
      responses:
        '200':
          description: List of events in the session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAgentEventsResponse'
        '403':
          description: Permissions do not allow listing events in this session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent or session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_events
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.events
  /v2/agents/{agent_key}/sessions/{session_key}/events/{event_id}:
    get:
      tags:
      - Agent Sessions
      summary: Get event in agent session
      description: Retrieve the details of a specific event within an agent session.
      operationId: getAgentEvent
      parameters:
      - $ref: '#/components/parameters/RequestTimeout'
      - $ref: '#/components/parameters/RequestTimeoutMillis'
      - in: path
        name: agent_key
        description: The unique identifier of the agent.
        required: true
        schema:
          $ref: '#/components/schemas/AgentKey'
      - in: path
        name: session_key
        description: The unique key of the session.
        required: true
        schema:
          $ref: '#/components/schemas/AgentSessionKey'
      - in: path
        name: event_id
        description: The unique identifier of the event to retrieve.
        required: true
        schema:
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_user_001
      responses:
        '200':
          description: The requested event details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentEvent'
        '403':
          description: Permissions do not allow accessing this event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent, session, or event not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: agent_events
      x-fern-sdk-method-name: get
components:
  parameters:
    RequestTimeout:
      in: header
      name: Request-Timeout
      description: The API will make a best effort to complete the request in the
        specified seconds or time out.
      schema:
        type: integer
        minimum: 1
      required: false
    RequestTimeoutMillis:
      in: header
      name: Request-Timeout-Millis
      description: The API will make a best effort to complete the request in the
        specified milliseconds or time out.
      schema:
        type: integer
        minimum: 1
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 access to Vectara
      flows:
        clientCredentials:
          tokenUrl: https://auth.vectara.io/oauth2/token
          scopes: {}
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    CorpusKey:
      description: A user-provided key for a corpus.
      type: string
      example: my-corpus
      pattern: '[a-zA-Z0-9_\=\-]+$'
      maxLength: 50
    FilterAttribute:
      description: Defines a filter attribute that can be used to filter search results
        based on document metadata for precise retrieval.
      type: object
      properties:
        name:
          description: The JSON path of the filter attribute in a document or document
            part metadata.
          type: string
          example: Title
        level:
          description: Indicates whether this is a document or document part metadata
            filter.
          type: string
          enum:
          - document
          - part
          example: document
        description:
          description: Description of the filter. May be omitted.
          type: string
          example: The title of the document.
        indexed:
          description: Indicates whether an index should be created for the filter.
            Creating an index will improve query latency when using the filter.
          type: boolean
          default: true
        type:
          description: The value type of the filter.
          type: string
          enum:
          - integer
          - real_number
          - text
          - boolean
          - list[integer]
          - list[real_number]
          - list[text]
          example: text
      required:
      - name
      - level
      - type
    CorpusCustomDimension:
      type: object
      description: Custom dimensions attached to all document parts in a corpus. Allows
        arbitrary modification of the score for many purposes.
      properties:
        name:
          description: The name of the custom dimension.
          type: string
          example: importance
        description:
          description: Description of the custom dimension.
          type: string
          example: Product importance.
        indexing_default:
          description: Default value of a custom dimension on a document part if the
            custom dimension value is not specified when the document part is indexed.
            A value of 0 means that custom dimension is not considered.
          type: number
          format: double
          example: 0
          default: 0
        querying_default:
          description: Default value of a custom dimension for a query if the value
            of the custom dimension is not specified when querying the corpus. A value
            of 0 means that custom dimension is not considered.
          type: number
          format: double
          example: 0
          default: 0
      required:
      - name
    Corpus:
      description: A corpus is a collection of documents and associated configuration
        for indexing, searching, and generating responses through RAG.
      type: object
      properties:
        id:
          description: Vectara ID of the corpus.
          type: string
          pattern: crp_[0-9]+$
          example: crp_1
        key:
          $ref: '#/components/schemas/CorpusKey'
        name:
          description: Name for the corpus. This value defaults to the key.
          type: string
          example: Vectara Content
        description:
          description: Corpus description.
          type: string
          example: Description about the Vectara Content corpus.
        enabled:
          description: Specifies whether the corpus is enabled or not.
          type: boolean
        chat_history_corpus:
          description: Indicates that this corpus does not store documents and stores
            chats instead.
          type: boolean
        queries_are_answers:
          description: Queries made to this corpus are considered answers, and not
            questions. This swaps the semantics of the encoder used at query time.
          type: boolean
          default: false
        documents_are_questions:
          description: Documents inside this corpus are considered questions, and
            not answers. This swaps the semantics of the encoder used at indexing.
          type: boolean
          default: false
        encoder_id:
          description: 'The encoder used by the corpus. *Deprecated*: Use `encoder_name`
            instead'
          type: string
          pattern: enc_[0-9]+$
          deprecated: true
        encoder_name:
          description: The encoder used by the corpus, `boomerang-2023-q3`.
          type: string
          example: boomerang-2023-q3
        save_history:
          description: Indicates whether to save corpus queries to query history by
            default.
          type: boolean
        filter_attributes:
          description: The new filter attributes of the corpus.
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
        custom_dimensions:
          description: The custom dimensions of all document parts inside the corpus.
          type: array
          items:
            $ref: '#/components/schemas/CorpusCustomDimension'
        limits:
          type: object
          title: CorpusLimits
          properties:
            used_docs:
              description: The number of documents contained in the corpus.
              type: integer
              format: int64
              example: 8
            used_parts:
              description: The number of document parts contained in the corpus.
              type: integer
              format: int64
              example: 3748
            used_bytes:
              description: 'NOTE: This field is currently not populated by the system.
                The number of bytes contained in the corpus. This includes the document
                metadata, document part metadata, and document contents.'
              type: integer
              format: int64
              example: 795790
            used_characters:
              description: The number of characters contained in the corpus. This
                includes the document metadata, document part metadata, and document
                contents.
              type: integer
              format: int64
              example: 1839847
            max_bytes:
              description: 'NOTE: This field is currently not populated by the system.
                The maximum number of bytes the corpus can be.'
              type: integer
              format: int64
            max_metadata_bytes:
              description: The maximum size that metadata can be on documents.
              type: integer
              format: int64
              example: 10485760
            index_rate:
              description: 'NOTE: This field is currently not populated by the system.
                The maximum per-second addition of new documents to corpus.'
              type: integer
              format: int64
        created_at:
          description: Indicates when the corpus was created.
          type: string
          format: date-time
    ListMetadata:
      type: object
      description: The standard metadata in the response of a list operation.
      properties:
        page_key:
          description: When requesting the next page of this list, this is needed
            as a query parameter.
          type: string
      example:
        page_key: eyJvZmZzZXQiOjF9
    ListCorporaResponse:
      description: Response containing a list of corpora within a customer account.
      type: object
      properties:
        corpora:
          type: array
          items:
            $ref: '#/components/schemas/Corpus'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    Error:
      description: A general error response with an error code and message.
      type: object
      properties:
        messages:
          description: The messages describing why the error occurred.
          type: array
          items:
            title: message
            type: string
            example: Internal server error.
        request_id:
          description: The ID of the request that can be used to help Vectara support
            debug what went wrong.
          type: string
    CreateCorpusRequest:
      description: Request object for creating a new corpus in the Vectara platform.
      type: object
      properties:
        key:
          $ref: '#/components/schemas/CorpusKey'
        name:
          description: The name for the corpus. This value defaults to the key.
          type: string
          example: My corpus
        description:
          description: Description of the corpus.
          type: string
          example: Documents with important information for my prompt.
        save_history:
          description: Indicates whether to save corpus queries to query history by
            default.
          type: boolean
          default: false
        queries_are_answers:
          description: Queries made to this corpus are considered answers, and not
            questions.
          type: boolean
          default: false
        documents_are_questions:
          description: Documents inside this corpus are considered questions, and
            not answers.
          type: boolean
          default: false
        encoder_id:
          description: '*Deprecated*: Use `encoder_name` instead.'
          type: string
          pattern: enc_[0-9]+$
          example: enc_1
          deprecated: true
        encoder_name:
          description: The encoder used by the corpus, `boomerang-2023-q3`.
          type: string
          example: boomerang-2023-q3
        filter_attributes:
          description: The new filter attributes of the corpus. If unset then the
            corpus will not have filter attributes.
          type: array
          default: []
          items:
            $ref: '#/components/schemas/FilterAttribute'
        custom_dimensions:
          description: A custom dimension is an additional numerical field attached
            to a document part. You can then multiply this numerical field with a
            query time custom dimension of the same name. This allows boosting (or
            burying) document parts for arbitrary reasons. This feature is only enabled
            for Pro and Enterprise customers.
          type: array
          default: []
          items:
            $ref: '#/components/schemas/CorpusCustomDimension'
      required:
      - key
    BadRequestError:
      description: Error returned when a request contains invalid parameters or violates
        schema validation.
      type: object
      properties:
        field_errors:
          description: The errors that relate to specific fields in the request.
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            title: message
            type: string
        request_id:
          description: The ID of the request that can be used to help Vectara support
            debug what went wrong.
          type: string
    NotFoundError:
      description: Error returned when a requested resource does not exist.
      type: object
      properties:
        id:
          description: The ID cannot be found.
          type: string
        messages:
          type: array
          items:
            title: message
            type: string
        request_id:
          description: The ID of the request that can be used to help Vectara support
            debug what went wrong.
          type: string
    UpdateCorpusRequest:
      type: object
      description: Corpus properties that are modifiable after creation.
      properties:
        enabled:
          description: Set whether or not the corpus is enabled. If unset then the
            corpus will remain in the same state.
          type: boolean
          example: false
        name:
          description: The name for the corpus. If unset or null, then the corpus
            will remain in the same state.
          type: string
          example: new-corpus-name
        description:
          description: Description of the corpus. If unset or null, then the corpus
            will remain in the same state.
          type: string
          example: New description of the corpus.
        save_history:
          description: Indicates whether to save corpus queries to query history by
            default.
          type: boolean
    ReplaceFilterAttributesRequest:
      description: Request to replace all filter attributes for a corpus with a new
        set of attributes.
      type: object
      properties:
        filter_attributes:
          description: The new filter attributes.
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
      required:
      - filter_attributes
    ReplaceFilterAttributesResponse:
      description: Response containing the job ID for the filter attributes replacement
        operation.
      type: object
      properties:
        job_id:
          description: Job that was created in order to replace filter attributes.
          type: string
          pattern: job_.+$
      required:
      - job_id
    ComputeCorpusSizeResponse:
      type: object
      description: Response containing the computed size of a corpus
      properties:
        used_docs:
          description: Number of documents in the corpus
          type: integer
          format: int64
          example: 14
        used_parts:
          description: Number of document parts in the corpus
          type: integer
          format: int64
          example: 5893
        used_characters:
          description: Total number of characters in the corpus
          type: integer
          format: int64
          example: 1459786
        used_metadata_characters:
          description: Number of metadata characters in the corpus
          type: integer
          format: int64
          example: 56294
    MaxCharsChunkingStrategy:
      type: object
      description: Sets a chunking strategy that limits the number of maximum characters
        per chunk. The chunks do not cross section boundaries.
      properties:
        type:
          description: When setting the type to max_chars_chunking_strategy, you can
            control the size of chunks (docparts).
          type: string
          default: max_chars_chunking_strategy
        max_chars_per_chunk:
          description: 'Specifies the maximum number of characters per chunk. The
            platform adds sentences to a chunk until the total number of characters
            exceeds the limit. If a single sentence exceeds the limit, it splits the
            sentence across chunks. Note: This is the only case where the chunk may
            not contain a complete sentence.'
          type: integer
          format: int32
          minimum: 100
      required:
      - max_chars_per_chunk
      x-vectaraParents:
      - ChunkingStrategy
    SentenceChunkingStrategy:
      type: object
      description: Sets a chunking strategy that creates one chunk per sentence. This
        is the default strategy used when no chunking strategy is specified.
      properties:
        type:
          description: When setting the type to sentence_chunking_strategy, the platform
            will create one chunk per sentence.
          type: string
          default: sentence_chunking_strategy
      x-vectaraParents:
      - ChunkingStrategy
    ChunkingStrategy:
      type: object
      description: Choose how to split documents into chunks during indexing. This
        is optional - if you do not set a chunking strategy, the platform uses the
        default strategy which creates one chunk (docpart) per sentence.
      discriminator:
        propertyName: type
        mapping:
          max_chars_chunking_strategy: '#/components/schemas/MaxCharsChunkingStrategy'
          sentence_chunking_strategy: '#/components/schemas/SentenceChunkingStrategy'
      oneOf:
      - $ref: '#/components/schemas/MaxCharsChunkingStrategy'
      - $ref: '#/components/schemas/SentenceChunkingStrategy'
    TableExtractorSpec:
      description: Specification for which table extractor to use. If not specified,
        the platform uses the default extractor.
      type: object
      properties:
        name:
          description: The name of the table extractor to use.
          type: string
          example: textract
      required:
      - name
    TableGenerationSpec:
      description: Specification for which generation to use during table summarization.
        If not specified, the platform uses the default summarizer. All parameters
        are optional and overrides the default values.
      type: object
      properties:
        llm_name:
          description: The name of the LLM to use.
          type: string
          example: gpt-4o
        prompt_template:
          type: string
          description: The prompt template to use when generating the table summary.
            Vectara manages both system and user roles and prompts for the generative
            LLM out of the box by default. However, users can override the `prompt_template`
            via this variable. The `prompt_template` is in the form of an Apache Velocity
            template. For more details on how to configure the `prompt_template`,
            see the [long-form documentation](https://docs.vectara.com/docs/prompts/vectara-prompt-engine).
        model_parameters:
          type: object
          description: Optional parameters for the specified model used when generating
            the table summary.
          example:
            temperature: 0
            max_tokens: 512
          additionalProperties: true
    TableExtractionConfig:
      type: object
      description: Configuration for table extraction from the document. This is optional
        and if not provided, the platform does not extract tables from PDF files.
      properties:
        extract_tables:
          type: boolean
          description: If set to true, the platform will attempt to extract tables
            from the document. The tables will be indexed as separate document parts.
        extractor:
          $ref: '#/components/schemas/TableExtractorSpec'
        generation:
          $ref: '#/components/schemas/TableGenerationSpec'
      required:
      - extract_tables
    UploadFileRequest:
      description: Request to upload and index a file into a corpus within a customer
        account.
      type: object
      properties:
        metadata:
          description: Arbitrary object that will be attached as document metadata
            to the extracted document.
          type: object
          additionalProperties: true
          example:
            department: engineering
            doc_type": architecture_diagram
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategy'
          example:
            type: sentence_chunking_strategy
        table_extraction_config:
          $ref: '#/components/schemas/TableExtractionConfig'
          example:
            extract_tables: true
        filename:
          description: Optional multipart section to override the filename.
          type: string
          example: system_design_v1.pdf
        file:
          description: Binary file contents. The file name of the file will be used
            as the document ID.
          type: string
          format: binary
      required:
      - file
      example:
        metadata:
          department": engineering
          doc_type": architecture_diagram
        chunking_strategy:
          type: sentence_chunking_strategy
        table_extraction_config:
          extract_tables: true
        filename: system_design_v1.pdf
        file: system_design_v1.pdf
    Cell:
      description: A cell in a table.
      type: object
      properties:
        text_value:
          description: A text value.
          type: string
          example: Bank A
        int_value:
          description: A signed 64-bit integer value.
          type: integer
          format: int64
        float_value:
          description: A floating-point value with double precision.
          type: number
          format: double
        bool_value:
          description: A boolean value.
          type: boolean
        colspan:
          description: The number of columns the cell spans. This field is optional;
            if not specified, default is 1. Must be greater than 0.
          type: integer
          format: int32
          example: 1
        rowspan:
          description: The number of rows the cell spans. This field is optional;
            if not specified, default is 1. Must be greater than 0.
          type: integer
          format: int32
          example: 1
    Header:
      description: The header of a table.
      type: array
      items:
        $ref: '#/components/schemas/Cell'
    Row:
      description: A row in a table.
      type: array
      items:
        $ref: '#/components/schemas/Cell'
    Data:
      description: The data of a table.
      type: object
      properties:
        headers:
          description: The headers of the table.
          type: array
          items:
            $ref: '#/components/schemas/Header'
        rows:
          description: The rows in the data.
          type: array
          items:
            $ref: '#/components/schemas/Row'
    Table:
      description: A table in a document.
      type: object
      properties:
        id:
          description: The unique ID of the table within the document.
          type: string
          example: billing_table_111
        title:
          description: The title of the table.
          type: string
          example: Carbon Reduction Metrics
        data:
          description: The data of the table.
          $ref: '#/components/schemas/Data'
        description:
          description: The description of the table.
          type: string
          example: Summary of carbon reduction efforts by EU banks in 2023.
    ImageMetadata:
      description: An image element within a document, containing its identifying
        information and optional metadata.
      type: object
      properties:
        id:
          description: The unique identifier of the image within the document, used
            to reference it in related content.
          type: string
          example: chart_1
        title:
          description: A short, human-readable title for the image, often displayed
            above or alongside it.
          type: string
          example: Quarterly Sales Performance
        caption:
          description: A brief caption providing context or an explanation for the
            image, typically displayed below it.
          type: string
          example: Sales growth trends for Q1 to Q4 of 2024
        description:
          description: A longer, detailed description of the image for accessibility
            or additional context.
          type: string
          example: A bar chart showing quarterly sales growth, with Q4 outperforming
            all previous quarters by 15%
        mime_type:
          description: The MIME type of the image, indicating the format of the binary
            data (e.g., image/jpeg for JPEG images).
          type: string
          example: image/jpeg
      required:
      - id
      - image_data
      - mime_type
    CustomDimensions:
      description: The custom dimensions as additional weights.
      type: object
      additionalProperties:
        type: number
        format: double
        nullable: false
    DocumentPart:
      description: A part of a document. This section gets converted into an embedding
        and directly maps to a search result. Usually a sentence.
      type: object
      properties:
        text:
          description: The text of the document part.
          type: string
          example: This invoice includes customer billing history for Q1.
        metadata:
          description: The metadata for a document part. These may be used in metadata
            filters at query time if filter attributes are configured on the corpus.
          type: object
          additionalProperties: true
          example:
            part.rank: 9000
        context:
          description: The context text for the document part.
          type: string
          example: Description of line items in the document part to provide additional
            context.
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
      required:
      - text
    DocumentStorageUsage:
      type: object
      description: How much storage the document used. This information is currently
        not returned when retrieving the document, and only returned when indexing
        a document.
      properties:
        bytes_used:
          description: Number of bytes used by document counting towards maximum corpus
            size, and towards any billing plans.
          type: integer
          format: int64
          minimum: 0
        metadata_bytes_used:
          description: Number of metadata bytes used by a document.
          type: integer
          format: int64
          minimum: 0
    ExtractionUsage:
      type: object
      description: How much extraction quota the document used. This information is
        currently not returned when retrieving the document, and only returned when
        indexing a document.
      properties:
        table_extraction_used:
          description: The number of pages from the document that consumed the extraction
            quota.
          type: integer
          format: int64
          minimum: 0
    Document:
      description: A document stored in a corpus, containing metadata and indexed
        content.
      type: object
      properties:
        id:
          description: The document ID.
          type: string
          example: Invoice-403
        metadata:
          description: The document metadata.
          type: object
          additionalProperties: true
          example:
            priority: High
        tables:
          description: The tables that this document contains. Tables are not available
            when table extraction is not enabled.
          type: array
          items:
            $ref: '#/components/schemas/Table'
        images:
          description: The images that this document contains.
          type: array
          items:
            $ref: '#/components/schemas/ImageMetadata'
        parts:
          description: Parts of the document that make up the document. However, parts
            are not available when retrieving a list of documents or when creating
            a document. This property is only available when retrieving a document
            by ID.
          type: array
          items:
            $ref: '#/components/schemas/DocumentPart'
        storage_usage:
          $ref: '#/components/schemas/DocumentStorageUsage'
          example:
            bytes_used: 1024
            metadata_bytes_used: 256
        extraction_usage:
          $ref: '#/components/schemas/ExtractionUsage'
          example:
            table_extraction_used: 2
      example:
        id: manufacturing_invoice-2331
        metadata:
          doc_type: invoice
          industry: manufacturing
        tables:
        - id: billing_table_1
          title: Customer Billing Info
          description: Monthly billing for top manufacturing clients
          data:
            headers:
            - - text_value: Customer Name
              - text_value: Balance
              - text_value: Account Created
            rows:
            - - text_value: Acme Corp
              - float_value: 10230.25
              - text_value: '2023-01-15'
            - - text_value: Beta Industries
              - float_value: 8750
              - text_value: '2022-11-03'
            - - text_value: Zeta Manufacturing
              - float_value: 13499.99
              - text_value: '2023-06-30'
        images:
        - id: image_1
          title: Quarterly Sales Performance
          caption: Sales growth trends for Q1 to Q4 of 2024
          description: A bar chart showing quarterly sales growth, with Q4 outperforming
            all previous quarters by 15%
          mime_type: image/png
          image_data:
            data: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVR4nGP4//8/AAX+Av4N70a4AAAAAElFTkSuQmCC
        parts:
        - text: This invoice includes customer billing history for Q1.
          metadata:
            part.rank: 9000
        storage_usage:
          bytes_used: 1024
          metadata_bytes_used: 256
        extraction_usage:
          table_extraction_used: 3
    ListDocumentsResponse:
      description: Response containing a list of documents stored in a corpus.
      type: object
      properties:
        documents:
          description: List of documents.
          type: array
          items:
            $ref: '#/components/schemas/Document'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    ImageData:
      description: An object containing an image's binary data and format information.
        The image data is provided as a Base64-encoded string along with its MIME
        type.
      type: object
      properties:
        data:
          description: Base64-encoded representation of the image data.
          type: string
          format: byte
          example: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVR4nGP4//8/AAX+Av4N70a4AAAAAElFTkSuQmCC
        mime_type:
          description: The MIME type of the image, indicating the format of the binary
            data (e.g., image/jpeg for JPEG images).
          type: string
          example: image/png
      required:
      - data
      - mime_type
    Image:
      description: An image element within a document, containing its identifying
        information, optional metadata, and the actual image data.
      type: object
      properties:
        id:
          description: The unique identifier of the image within the document, used
            to reference it in related content.
          type: string
          example: chart_1
        title:
          description: A short, human-readable title for the image, often displayed
            above or alongside it.
          type: string
          example: Quarterly Sales Performance
        caption:
          description: A brief caption providing context or an explanation for the
            image, typically displayed below it.
          type: string
          example: Sales growth trends for Q1 to Q4 of 2024
        image_data:
          description: The actual image content and its format metadata.
          $ref: '#/components/schemas/ImageData'
        description:
          description: A longer, detailed description of the image for accessibility
            or additional context.
          type: string
          example: A bar chart showing quarterly sales growth, with Q4 outperforming
            all previous quarters by 15%
      required:
      - id
      - image_data
    CoreDocumentPart:
      description: A part of a document. This section gets converted into an embedding
        and directly maps to a search result. Usually this is a sentence.
      type: object
      properties:
        text:
          description: The text of the document part.
          type: string
          example: This invoice includes customer billing history for Q1.
        metadata:
          description: The metadata for a document part. These may be used in metadata
            filters at query time if filter attributes are configured on the corpus.
          type: object
          additionalProperties: true
          example:
            part.rank: 9000
        table_id:
          description: The ID of the table that this document part belongs to.
          type: string
          example: billing_table_111
        image_id:
          description: The ID of the image that this document part belongs to.
          type: string
          example: image_1
        context:
          description: The context text for the document part.
          type: string
          example: This document part is part of the table Customer Billing Info.
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
      required:
      - text
    CoreDocument:
      description: The document structure that most closely corresponds to Vectara's
        internal document data model.
      type: object
      properties:
        id:
          description: The document ID must be unique within the corpus.
          type: string
          example: Invoice-403
        type:
          description: When the type of the indexed document is `core` the rest of
            the object is expected to follow this schema. This schema allows precise
            specification of document chunks that get directly translated to retrieve
            search results.
          default: core
          type: string
        metadata:
          description: Arbitrary object of document level metadata. Properties of
            this object can be used by document filters if defined as a corpus filter
            attribute.
          type: object
          properties: {}
          additionalProperties: true
          example:
            title: Customer Billing Information
            lang: eng
        tables:
          description: The tables that this document contains.
          type: array
          items:
            $ref: '#/components/schemas/Table'
        images:
          description: The images that this document contains.
          type: array
          items:
            $ref: '#/components/schemas/Image'
        document_parts:
          description: Parts of the document that make up the document.
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CoreDocumentPart'
      example:
        id: invoice-001
        type: core
        metadata:
          doc_type: invoice
          industry: manufacturing
        tables:
        - id: billing_table_1
          title: Customer Billing Info
          description: Monthly billing for top manufacturing clients
          data:
            headers:
            - - text_value: Customer Name
              - text_value: Balance
              - text_value: Account Created
            rows:
            - - text_value: Acme Corp
              - float_value: 10230.25
              - text_value: '2023-01-15'
            - - text_value: Beta Industries
              - float_value: 8750
              - text_value: '2022-11-03'
            - - text_value: Zeta Manufacturing
              - float_value: 13499.99
              - text_value: '2023-06-30'
        images:
        - id: image_1
          title: Quarterly Sales Performance
          caption: Sales growth trends for Q1 to Q4 of 2024
          description: A bar chart showing quarterly sales growth, with Q4 outperforming
            all previous quarters by 15%
          image_data:
            data: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVR4nGP4//8/AAX+Av4N70a4AAAAAElFTkSuQmCC
            mime_type: image/jpeg
        document_parts:
        - text: This invoice includes customer billing history for Q1.
          metadata:
            quarter: 1
            year: 2023
        storage_usage:
          bytes_used: 1024
          metadata_bytes_used: 256
        extraction_usage:
          table_extraction_used: 1
      required:
      - id
      - type
      - document_parts
      x-vectaraParents:
      - CreateDocumentRequest
    StructuredDocumentSection:
      description: A logical section within a structured document.
      type: object
      properties:
        id:
          description: The section ID. This gets converted to a metadata field automatically.
          type: integer
          format: int32
          example: 10
        title:
          description: The section title.
          type: string
          example: Billing Summary
        text:
          description: The text of the section.
          type: string
          example: This section summarizes the billing details for Acme Corp for Q1
            2025.
        metadata:
          description: Arbitrary object that becomes document part level metadata
            on any document part created by this section. Properties of this object
            can be used by document part level filters if defined as a corpus filter
            attribute.
          type: object
          properties: {}
          additionalProperties: true
          example:
            section_type: summary
            priority: high
        tables:
          description: The tables that this section contains.
          type: array
          items:
            $ref: '#/components/schemas/Table'
        images:
          description: The images that this section contains.
          type: array
          items:
            $ref: '#/components/schemas/Image'
        sections:
          description: The sections that this section contains.
          type: array
          items:
            $ref: '#/components/schemas/StructuredDocumentSection'
      example:
        id: 1
        title: Billing Summary
        text: This section summarizes the billing details for Acme Corp for Q1 2025.
        metadata:
          section_type: summary
          priority: high
        images:
        - id: image_1
          title: Quarterly Sales Performance
          caption: Sales growth trends for Q1 to Q4 of 2024
          description: A bar chart showing quarterly sales growth, with Q4 outperforming
            all previous quarters by 15%
          image_data:
            data: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVR4nGP4//8/AAX+Av4N70a4AAAAAElFTkSuQmCC
            mime_type: image/png
        tables:
        - id: billing_table_1
          title: Invoice Line Items
          data:
            headers:
            - - text_value: Item
              - text_value: Quantity
              - text_value: Unit Price
              - text_value: Total
            rows:
            - - text_value: Widget A
              - int_value: 5
              - float_value: 100.15
              - float_value: 500.75
            - - text_value: Widget B
              - int_value: 3
              - float_value: 250
              - float_value: 750
          description: Details of items billed in the invoice.
        - id: 2
          title: Payment Terms
          text: Payment is due within 30 days from the invoice date.
          metadata:
            section_type: terms
      required:
      - text
    StructuredDocument:
      description: A document with layout features.
      type: object
      properties:
        id:
          description: The document ID must be unique within the corpus.
          type: string
          example: esg_report_2024
        type:
          description: When the type of the indexed document is `structured` the rest
            of the object is expected to follow this schema. It allows you to create
            a document that follows normal document conventions. The Vectara platform
            will then create document parts using its internal algorithm.
          default: structured
          type: string
          example: 2024 ESG Annual Report
        title:
          description: The title of the document.
          type: string
        description:
          description: The description of the document.
          type: string
          example: "Comprehensive report on EuroBank\u2019s environmental, social,\
            \ and governance initiatives for 2024."
        metadata:
          description: The metadata for a document as an arbitrary JSON object. Properties
            of this object can be used by document level filter attributes.
          type: object
          additionalProperties: true
          example:
            region: EU
            industry: banking
            year: 2024
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
        sections:
          description: The subsection of the document.
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/StructuredDocumentSection'
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategy'
      required:
      - id
      - type
      - sections
      x-vectaraParents:
      - CreateDocumentRequest
    CreateDocumentRequest:
      description: Creating a document using this endpoint can take multiple forms
        depending on how much control of the resulting document parts you desire.
        You can create a document with natural structure, and Vectara will use its
        proprietary strategy to create document parts. Otherwise, you can create a
        document with all the document parts explicitly specified. A document part
        is the search result item in search and Retrieval Augmented Generation endpoints.
      type: object
      discriminator:
        propertyName: type
        mapping:
          core: '#/components/schemas/CoreDocument'
          structured: '#/components/schemas/StructuredDocument'
      oneOf:
      - $ref: '#/components/schemas/CoreDocument'
      - $ref: '#/components/schemas/StructuredDocument'
      required:
      - type
      example:
        type: structured
        id: esg_report_2024
        title: "2024 ESG Annual Report \u2013 EuroBank"
        description: "Comprehensive report on EuroBank\u2019s environmental, social,\
          \ and governance initiatives for 2024, outlining sustainability goals and\
          \ compliance with EU regulations."
        metadata:
          doc_type: esg_report
          region: EU
          industry: banking
          year: 2024
          status: published
          owner: sustainability_team
        sections:
        - id: 1
          title: Environmental Initiatives
          text: In 2024, EuroBank reduced carbon emissions by 22% through investments
            in renewable energy and energy-efficient infrastructure.
          metadata:
            section_type: environmental
            priority: high
        - id: 2
          title: Social Responsibility
          text: EuroBank expanded its community outreach programs, supporting over
            500 local initiatives and increasing employee volunteer hours by 30%.
          metadata: null
          section_type: social
          priority: medium
    UpdateDocumentRequest:
      description: Schema for updating the document. For PUT requests, the request
        body metadata replaces the existing metadata. For PATCH requests, the request
        body metadata is merged with the existing metadata, adding or modifying only
        the specified fields.
      type: object
      properties:
        metadata:
          description: The metadata for a document as an arbitrary object. Properties
            of this object can be used by document level filter attributes.
          type: object
          additionalProperties: true
          example:
            title: "2024 ESG Annual Report \u2013 EuroBank"
            region: EU
            industry: banking
            year: 2024
    SummarizeDocumentRequest:
      type: object
      description: Request to summarize a document
      required:
      - llm_name
      properties:
        llm_name:
          description: The name of the LLM.
          type: string
          example: mockingbird-2.0
        prompt_template:
          type: string
          description: The prompt template to use when generating the summary. Vectara
            manages both system and user roles and prompts for the generative LLM
            out of the box by default. However, users can override the `prompt_template`
            via this variable. The `prompt_template` is in the form of an Apache Velocity
            template. For more details on how to configure the `prompt_template`,
            see the [long-form documentation](https://docs.vectara.com/docs/prompts/vectara-prompt-engine).
          example: Provide a concise summary of the document.
        model_parameters:
          type: object
          description: Optional parameters for the specified model used when generating
            the summary.
          additionalProperties: true
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
    SummarizeDocumentResponse:
      type: object
      description: Response containing the summary of a document
      properties:
        summary:
          description: The summary of the document
          type: string
          example: This document provides a comprehensive overview of initiatives
            for 2025.
        rendered_prompt:
          description: The rendered prompt sent to the LLM. Useful when `prompt_template`
            is sent in the request.
          type: string
          example: Provide a concise summary of the overview initiatives for 2025.
    StreamGenerationChunk:
      description: The chunk response from the generation, which may be a partial
        generation.
      type: object
      properties:
        type:
          description: When the streaming event contains the next chunk of generator
            output, the type will be `generation_chunk`.
          type: string
          default: generation_chunk
        generation_chunk:
          description: Part of the message from the generator. All summary chunks
            must be appended together in order to get the full summary.
          type: string
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
      - SummarizeDocumentStreamedResponse
    GenerationInfo:
      description: Event containing information on how the generation was accomplished.
      type: object
      properties:
        type:
          description: When the streaming event contains the generation information
            type will be `generation_info`.
          type: string
          default: generation_info
        rendered_prompt:
          description: The rendered prompt sent to the LLM. Useful when creating customer
            `prompt_template` templates.
          type: string
        rephrased_query:
          description: View the actual query made to backend that was rephrased by
            the LLM from the input query.
          type: string
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
      - SummarizeDocumentStreamedResponse
    StreamGenerationEnd:
      description: The end of generation. There may still be more information such
        as the factual consistency score, but generation has stopped.
      type: object
      properties:
        type:
          description: Then end of generation will be denoted with an object with
            the type `generation_end`.
          type: string
          default: generation_end
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
      - SummarizeDocumentStreamedResponse
    StreamError:
      description: Event signaling there was an error with the request.
      properties:
        type:
          description: If the stream errors, an event with type `error` will be sent.
          type: string
          default: error
        messages:
          description: The error messages.
          type: array
          items:
            type: string
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
      - SummarizeDocumentStreamedResponse
      - AgentStreamedResponse
    StreamResponseEnd:
      description: The end of a query response stream.
      type: object
      properties:
        type:
          description: Then end of stream will be denoted with an object with the
            type `end`.
          type: string
          default: end
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
      - SummarizeDocumentStreamedResponse
      - AgentStreamedResponse
    SummarizeDocumentStreamedResponse:
      description: An individual event sent with Server-sent Events (SSE) when the
        document summarization request is streamed.
      type: object
      discriminator:
        propertyName: type
        mapping:
          generation_chunk: '#/components/schemas/StreamGenerationChunk'
          generation_info: '#/components/schemas/GenerationInfo'
          generation_end: '#/components/schemas/StreamGenerationEnd'
          error: '#/components/schemas/StreamError'
          end: '#/components/schemas/StreamResponseEnd'
      oneOf:
      - $ref: '#/components/schemas/StreamGenerationChunk'
      - $ref: '#/components/schemas/GenerationInfo'
      - $ref: '#/components/schemas/StreamGenerationEnd'
      - $ref: '#/components/schemas/StreamResponseEnd'
      - $ref: '#/components/schemas/StreamError'
    FieldQuery:
      type: object
      description: Defines a field-specific query for fuzzy matching.
      properties:
        field:
          type: string
          description: Name of the metadata field to search (without doc/part prefix).
        query:
          type: string
          description: The text to search for in this field. Fuzzy matching is applied
            automatically.
        weight:
          type: number
          format: float
          description: Weight to apply to this field during scoring (higher values
            increase importance of this field).
          default: 1
      required:
      - field
      - query
    MetadataQueryRequest:
      type: object
      description: Defines parameters for fuzzy searching across metadata fields in
        a corpus.
      properties:
        level:
          type: string
          enum:
          - document
          - part
          default: document
          description: Whether to search document-level or part-level metadata. Document-level
            returns unique documents, part-level can return multiple parts from the
            same document.
        queries:
          type: array
          description: List of field-specific queries to apply fuzzy matching.
          items:
            $ref: '#/components/schemas/FieldQuery'
          example:
          - field: title
            query: lease agreement
            weight: 2
          - field: category
            query: contract
            weight: 1
        metadata_filter:
          description: "Optional filter expression to narrow down results before fuzzy\
            \ matching is applied. \nThis uses the same expression format as document\
            \ listing filters and applies exact matching.\n"
          type: string
          example: doc.Status = 'Active'
        limit:
          description: Sets the maximum number of documents to return.
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        offset:
          description: Starting position for pagination.
          type: integer
          minimum: 0
          default: 0
      required:
      - queries
    ScoredDocument:
      type: object
      description: A document with its relevance score and metadata.
      properties:
        doc_id:
          description: The document ID.
          type: string
          example: document123
        score:
          description: The overall relevance score for this document.
          type: number
          format: float
          example: 0.92
        metadata:
          description: Document metadata object containing all document metadata fields.
          type: object
          additionalProperties: true
    MetadataQueryResponse:
      type: object
      description: Returns document search results with relevance scores.
      properties:
        documents:
          type: array
          description: Matched documents ordered by relevance score (highest first).
          items:
            $ref: '#/components/schemas/ScoredDocument'
        total_count:
          type: integer
          description: Total number of matching documents (for pagination).
          example: 42
    Language:
      description: Languages that the Vectara platform supports.
      type: string
      enum:
      - auto
      - eng
      - deu
      - fra
      - zho
      - kor
      - ara
      - rus
      - tha
      - nld
      - ita
      - por
      - spa
      - jpn
      - pol
      - tur
      - vie
      - ind
      - ces
      - ukr
      - ell
      - heb
      - fas
      - hin
      - urd
      - swe
      - ben
      - msa
      - ron
      default: auto
    IndividualSearchResult:
      description: An individual ranked search result from a query.
      type: object
      properties:
        text:
          description: The document part altered by the context configuration that
            matches the query.
          type: string
          example: EU banks reported a 20% increase in carbon reduction initiatives
            in 2023, driven by regulatory pressure.
        score:
          description: The score of the individual result.
          type: number
          format: double
          example: 0.92
        part_metadata:
          description: The metadata for the document part.
          type: object
          additionalProperties: true
          example:
            section: executive_summary
        document_metadata:
          description: The metadata for the document that contains the document part.
          type: object
          additionalProperties: true
          example:
            industry: banking
            year: 2023
            doc_type: annual_report
        document_id:
          description: The ID of the document that contains the document part.
          type: string
          example: financial-report-2023
        table:
          description: The table that the document part is from.
          $ref: '#/components/schemas/Table'
        image:
          description: The image that the document part is from.
          $ref: '#/components/schemas/ImageMetadata'
        request_corpora_index:
          description: A query request can search over multiple corpora at a time.
            This property is set to the index in the list of corpora in the original
            search request that this search result originated from. If the query request
            is only over one corpus, this property is 0.
          type: integer
          format: int32
          example: 0
          minimum: 0
    QueryWarning:
      type: string
      description: "Non-fatal warnings that occurred during query processing.\n *\
        \  `exceeded_max_input_length_fcs`: The input to the Factual Consistency Score\
        \ model exceeded the maximum allowed length, so no score is being returned\n\
        \ *  `intelligent_query_rewriting_failed`: Intelligent query rewriting failed\
        \ due to an internal error\n *  `fcs_language_not_supported`: The summary\
        \ language is not supported by the Factual Consistency Score model"
      enum:
      - exceeded_max_input_length_fcs
      - intelligent_query_rewriting_failed
      - fcs_language_not_supported
    FilterExtraction:
      type: object
      description: The result of query filter extraction.
      properties:
        query:
          description: The query rephrased from the input query and executed.
          type: string
        metadata_filter:
          description: The metadata filter extracted from the input query.
          type: string
    RewrittenQuery:
      description: The rewritten query for a corpus that was searched.
      type: object
      properties:
        corpus_key:
          description: The corpus key that the query was made on.
          type: string
        filter_extraction:
          $ref: '#/components/schemas/FilterExtraction'
    QueryFullResponse:
      description: The full response to a RAG query when the result is not streamed.
      type: object
      properties:
        summary:
          description: The summary of the search results.
          type: string
          example: The carbon reduction efforts by EU banks in 2023 show...
        response_language:
          $ref: '#/components/schemas/Language'
        search_results:
          description: The ranked search results.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
        factual_consistency_score:
          description: Indicates the probability that the summary is factually consistent
            with the results. The system excludes this property if it encounters excessively
            large outputs or search results.
          type: number
          format: float
        rendered_prompt:
          description: The rendered prompt sent to the LLM. Useful when creating customer
            `prompt_template` templates.
          type: string
          example: '[{"role": "system", "content": "You are an ESG analyst."}, {"role":
            "user", "content": "What are the carbon reduction initiatives by EU banks
            in 2023?"}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
        warnings:
          description: Non-fatal warnings that occurred during request processing
          type: array
          items:
            $ref: '#/components/schemas/QueryWarning'
        rewritten_queries:
          description: The rewritten queries for the corpora that were searched. Only
            populated when `intelligent_query_rewriting` is enabled.
          type: array
          items:
            $ref: '#/components/schemas/RewrittenQuery'
          example:
          - corpus_key: fin_docs
            filter_extraction:
              query: ESG compliance trends in EU
              metadata_filter: doc.industry = 'banking' AND doc.region = 'EU' AND
                doc.year = 2023
    SearchSemantics:
      description: Indicates whether to consider a query against this corpus as a
        query or a response.
      type: string
      enum:
      - default
      - query
      - response
      default: default
    SearchCorpus:
      description: Configuration for search parameters specific to a single corpus
        within a customer account, including filters and semantics.
      type: object
      properties:
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
        metadata_filter:
          description: The filter string used to narrow the search based on metadata
            attributes. The query against this corpus will be confined to document
            parts that match the `metadata_filter`. Only metadata fields set as `filter_attributes`
            on the corpus can be filtered. Filter syntax is similar to a SQL WHERE
            clause. See [metadata filters documentation](https://docs.vectara.com/docs/learn/metadata-search-filtering/filter-overview)
            for more information.
          type: string
          maxLength: 8000
          example: doc.title = 'Annual Report'
        lexical_interpolation:
          description: How much to weigh lexical scores compared to the embedding
            score. 0 means lexical search is not used at all, and 1 means only lexical
            search is used.
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.005
        semantics:
          $ref: '#/components/schemas/SearchSemantics'
    ContextConfiguration:
      type: object
      description: Configuration on the presentation of each document part in the
        result set. You can only use characters_before/after or sentences_before/after,
        but not both. If you specify both in the query, sentences_before/after takes
        precedence
      properties:
        characters_before:
          description: The number of characters that are shown before the matching
            document part. This is useful to show the context of the document part
            in the wider document. Ignored if `sentences_before` is set. Vectara will
            capture the full sentence that contains the captured characters, to not
            lose the meaning caused by a truncated word or sentence.
          type: integer
          format: int32
        characters_after:
          description: The number of characters that are shown after the matching
            document part. This is useful to show the context of the document part
            in the wider document. Ignored if `sentences_after` is set. Vectara will
            capture the full sentence that contains the captured characters, to not
            lose the meaning caused by a truncated word or sentence.
          type: integer
          format: int32
        sentences_before:
          description: The number of sentences that are shown before the matching
            document part. This is useful to show the context of the document part
            in the wider document.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 2
        sentences_after:
          description: The number of sentences that are shown after the matching document
            part. This is useful to show the context of the document part in the wider
            document.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 2
        start_tag:
          description: The tag that wraps the document part at the start. This is
            often used to provide a start HTML/XML tag or some other delimiter you
            can use in an application to understand where to provide highlighting
            in your UI and understand where the context before ends and the document
            part begins.
          type: string
          example: <em>
        end_tag:
          description: The tag that wraps the document part at the end. This is often
            used to provide a start HTML/XML tag or some other delimiter you can use
            in an application to understand where to provide highlighting in your
            UI and understand where the document part ends and the context after begins.
          type: string
          example: </em>
      example:
        sentences_before: 2
        sentences_after: 2
        start_tag: <em>
        end_tag: </em>
    CustomerSpecificReranker:
      description: Reranker that is specific to the customer.
      type: object
      properties:
        type:
          description: When the type is `customer_reranker`, you can specify the `reranker_name`
            of a reranker. `reranker_id` is deprecated. The retrieval engine will
            then rerank results using that reranker.
          type: string
          default: customer_reranker
        reranker_id:
          description: 'The ID of the reranker. The multilingual reranker that may
            be specified is rnk_272725719. Do not specify the MMR reranker ID here,
            and instead, use the MMR reranker object type. **Deprecated**: Use `reranker_name`
            instead.'
          type: string
          pattern: rnk_(?!272725718)\d+
          example: rnk_272725719
          deprecated: true
        reranker_name:
          description: The name of the reranker. Do not specify the MMR reranker name
            here. Instead, use the MMR reranker object type.
          type: string
          example: Rerank_Multilingual_v1
        limit:
          type: integer
          description: 'Specifies the maximum number of results to be returned after
            the reranking process. When a reranker is applied, it performs the following
            steps:

            1. Reranks all input results according to its algorithm.

            2. Sorts the reranked results based on their new scores.

            3. Returns the top N results, where N is the value specified by this limit.


            Note: This limit is applied per reranking stage. In a chain of rerankers,
            each reranker can have its own limit, potentially reducing the number
            of results at each stage.'
          format: int32
          minimum: 1
        cutoff:
          type: number
          description: 'Specifies the minimum score threshold for results to be included
            after the reranking process. When a reranker is applied with a cutoff,
            it performs the following steps:

            1. Reranks all input results according to its algorithm. 2. Applies the
            cutoff, removing any results with scores below the specified threshold.
            3. Returns the remaining results, sorted by their new scores.

            Note: This cutoff is applied per reranking stage. In a chain of rerankers,
            each reranker can have its own cutoff, potentially further reducing the
            number of results at each stage. If both ''limit'' and ''cutoff'' are
            specified, the cutoff is applied first, followed by the limit.'
          format: float
        include_context:
          type: boolean
          default: true
          description: If true, the reranker will use text with context (see "context_configuration")
            for scoring.
      x-vectaraParents:
      - SearchReranker
    UserFunctionReranker:
      description: A reranker that uses user-defined functions to reorder search results.
      type: object
      properties:
        type:
          description: When the type is `userfn`, you can define custom reranking
            functions using document-level metadata, part-level metadata, or scores
            generated from the request-level metadata.
          type: string
          default: userfn
        user_function:
          description: The user defined function.
          type: string
          example: get('$.score') * get('$.document_metadata.boost')
        limit:
          type: integer
          description: "Specifies the maximum number of results to be returned after\
            \ the reranking process. \nWhen a reranker is applied, it performs the\
            \ following steps:\n1. Reranks all input results according to its algorithm.\n\
            2. Sorts the reranked results based on their new scores.\n3. Returns the\
            \ top N results, where N is the value specified by this limit.\n\nNote:\
            \ This limit is applied per reranking stage. In a chain of rerankers,\
            \ each reranker can have its own limit, potentially reducing the number\
            \ of results at each stage."
          format: int32
          minimum: 1
        cutoff:
          type: number
          description: 'Specifies the minimum score threshold for results to be included
            after the reranking process. When a reranker is applied with a cutoff,
            it performs the following steps:

            1. Reranks all input results according to its algorithm. 2. Applies the
            cutoff, removing any results with scores below the specified threshold.
            3. Returns the remaining results, sorted by their new scores.

            Note: This cutoff is applied per reranking stage. In a chain of rerankers,
            each reranker can have its own cutoff, potentially further reducing the
            number of results at each stage. If both ''limit'' and ''cutoff'' are
            specified, the cutoff is applied first, followed by the limit.'
          format: float
      x-vectaraParents:
      - SearchReranker
    MMRReranker:
      description: A reranker that uses Maximal Marginal Relevance to balance relevance
        and diversity in search results.
      type: object
      properties:
        type:
          description: When the type is `mmr`, you can specify the `diversity_bias`,
            and the retrieval engine will use the MMR reranker.
          type: string
          default: mmr
        diversity_bias:
          description: The diversity bias. Higher values indicate more diversity.
          type: number
          format: float
          example: 0.3
        limit:
          type: integer
          description: "Specifies the maximum number of results to be returned after\
            \ the reranking process. \nWhen a reranker is applied, it performs the\
            \ following steps:\n1. Reranks all input results according to its algorithm.\n\
            2. Sorts the reranked results based on their new scores.\n3. Returns the\
            \ top N results, where N is the value specified by this limit.\n\nNote:\
            \ This limit is applied per reranking stage. In a chain of rerankers,\
            \ each reranker can have its own limit, potentially reducing the number\
            \ of results at each stage."
          format: int32
          minimum: 1
        cutoff:
          type: number
          description: 'Specifies the minimum score threshold for results to be included
            after the reranking process. When a reranker is applied with a cutoff,
            it performs the following steps:

            1. Reranks all input results according to its algorithm. 2. Applies the
            cutoff, removing any results with scores below the specified threshold.
            3. Returns the remaining results, sorted by their new scores.

            Note: This cutoff is applied per reranking stage. In a chain of rerankers,
            each reranker can have its own cutoff, potentially further reducing the
            number of results at each stage. If both ''limit'' and ''cutoff'' are
            specified, the cutoff is applied first, followed by the limit.'
          format: float
      x-vectaraParents:
      - SearchReranker
    SearchReranker:
      type: object
      description: Rerank results of the search. Rerankers are very powerful tools
        to improve the order of search results. By default the search will use the
        most powerful reranker available to the customer's plan. To disable reranking,
        set the reranker `type` to `"none"`.
      discriminator:
        propertyName: type
        mapping:
          customer_reranker: '#/components/schemas/CustomerSpecificReranker'
          userfn: '#/components/schemas/UserFunctionReranker'
          mmr: '#/components/schemas/MMRReranker'
          chain: '#/components/schemas/ChainReranker'
          none: '#/components/schemas/NoneReranker'
      oneOf:
      - $ref: '#/components/schemas/CustomerSpecificReranker'
      - $ref: '#/components/schemas/UserFunctionReranker'
      - $ref: '#/components/schemas/MMRReranker'
      - $ref: '#/components/schemas/ChainReranker'
      - $ref: '#/components/schemas/NoneReranker'
    ChainReranker:
      description: A reranker that applies multiple rerankers in sequence to produce
        the final search results.
      type: object
      properties:
        type:
          description: When the type is `chain`, you can then chain re-rankers together.
          type: string
          default: chain
        rerankers:
          type: array
          description: Specify an array of rerankers to apply to search results consecutively.
          items:
            $ref: '#/components/schemas/SearchReranker'
          maxItems: 50
      required:
      - rerankers
      x-vectaraParents:
      - SearchReranker
    NoneReranker:
      description: A placeholder reranker that does not modify the original search
        results ordering.
      type: object
      properties:
        type:
          description: When the type is `none`, no reranking will be done.
          type: string
          default: none
        limit:
          type: integer
          description: 'Specifies the maximum number of results to be returned after
            the reranking process. When a reranker is applied, it performs the following
            steps:

            1. Reranks all input results according to its algorithm.

            2. Sorts the reranked results based on their new scores.

            3. Returns the top N results, where N is the value specified by this limit.

            Note: This limit is applied per reranking stage. In a chain of rerankers,
            each reranker can have its own limit, potentially reducing the number
            of results at each stage.'
          format: int32
          minimum: 1
      x-vectaraParents:
      - SearchReranker
    SearchParameters:
      type: object
      description: Search parameters to retrieve knowledge for the query.
      properties:
        offset:
          description: Specifies how many results into the result to skip. This is
            useful for pagination.
          type: integer
          format: int32
          default: 0
          minimum: 0
        limit:
          description: The maximum number of results returned.
          type: integer
          format: int32
          minimum: 1
          default: 10
        context_configuration:
          $ref: '#/components/schemas/ContextConfiguration'
        reranker:
          $ref: '#/components/schemas/SearchReranker'
      example:
        limit: 50
    CitationParameters:
      description: Style the generator should use when making citations.
      type: object
      properties:
        style:
          description: 'The citation style to be used in summary. Can be one of: *
            `numeric` - Citations formatted as simple numerals: \[1\], \[2\] ... *
            `none` - Citations removed from text. * `html` - Citation formatted as
            a URL like `<a href="url_pattern">text_pattern</a>`. * `markdown` - Formatted
            as `[text_pattern](url_pattern)`.'
          type: string
          enum:
          - none
          - numeric
          - html
          - markdown
        url_pattern:
          description: The URL pattern if the citation_style is set to `html` or `markdown`.
            The pattern can access metadata attributes in the document or part. e.g.
            `https://my.doc/foo/{doc.id}/{part.id}` The default `url_pattern` is an
            empty string.
          type: string
          example: https://vectara.com/documents/{doc.id}
        text_pattern:
          description: The text pattern if the citation_style is set to `html` or
            `markdown`. This pattern sets the href for HTML or the text within `[]`
            in markdown, and defaults to N being the index of result if it is not
            set. The default citation style looks like `[N](<url_pattern>)` for markdown.
            You can use metadata attributes in the `text_pattern`. For example, the
            pattern `{doc.title}` with citation style `markdown` would result in final
            citation output like `[Title](<url_pattern>)` when the document's metadata
            includes `{"title":"Title"}`.
          type: string
          example: '{doc.title}'
    GenerationParameters:
      description: The parameters to control generation.
      type: object
      properties:
        enabled:
          description: Whether generation is enabled for this query. This field is
            ignored if using chat.
          type: boolean
          default: true
        generation_preset_name:
          description: "The preset values to use to feed the query results and other\
            \ context to the model.  \n\nA `generation_preset` is an object with a\
            \ bundle of properties that specifies: \n* The `prompt_template` that\
            \ is rendered and then sent to the LLM. \n* The LLM used. * `model_parameter`s\
            \ such as temperature.\n\nAll of these properties except the model can\
            \ be overridden by setting them in this object. Even when a `prompt_template`\
            \ is set, the `generation_preset_name` is used to set the model used.\
            \ See `model_parameters.model` if you want to set the model explicitly.\n\
            \nIf `generation_preset_name` is not set, the Vectara platform will use\
            \ the default model and prompt.'\n"
          type: string
          minLength: 1
          example: mockingbird-2.0
        prompt_name:
          description: Use `generation_preset_name` instead of `prompt_name`.
          type: string
          minLength: 1
          example: mockingbird-2.0
          deprecated: true
        max_used_search_results:
          description: The maximum number of search results to be available to the
            prompt.
          type: integer
          format: int32
          minimum: 0
          default: 5
        prompt_template:
          description: Vectara manages both system and user roles and prompts for
            the generative LLM out of the box by default. However, users can override
            the `prompt_template` via this variable. The `prompt_template` is in the
            form of an Apache Velocity template. For more details on how to configure
            the `prompt_template`, see the [long-form documentation](https://docs.vectara.com/docs/prompts/vectara-prompt-engine).
          type: string
          example: "[\n  {\"role\": \"system\", \"content\": \"You are a helpful search\
            \ assistant.\"},\n  #foreach ($qResult in $vectaraQueryResults)\n    \
            \ {\"role\": \"user\", \"content\": \"Given the $vectaraIdxWord[$foreach.index]\
            \ search result.\"},\n     {\"role\": \"assistant\", \"content\": \"${qResult.getText()}\"\
            \ },\n  #end\n  {\"role\": \"user\", \"content\": \"Generate a summary\
            \ for the query '${vectaraQuery}' based on the above results.\"}\n]\n"
        prompt_text:
          description: This property is deprecated in favor of clearer naming. Use
            `prompt_template`. This property will be ignored if `prompt_template`
            is set.
          type: string
          example: "[\n  {\"role\": \"system\", \"content\": \"You are a helpful search\
            \ assistant.\"},\n  #foreach ($qResult in $vectaraQueryResults)\n    \
            \ {\"role\": \"user\", \"content\": \"Given the $vectaraIdxWord[$foreach.index]\
            \ search result.\"},\n     {\"role\": \"assistant\", \"content\": \"${qResult.getText()}\"\
            \ },\n  #end\n  {\"role\": \"user\", \"content\": \"Generate a summary\
            \ for the query '${vectaraQuery}' based on the above results.\"}\n]\n"
          deprecated: true
        max_response_characters:
          description: 'Controls the length of the generated output. This is a rough
            estimate and not a hard limit: the end output can be longer or shorter
            than this value. This is generally implemented by including the `max_response_characters`
            in the prompt, and the LLM''s instruction following capability dictates
            how closely the generated output is limited.'
          type: integer
          format: int32
          example: 300
          minimum: 0
        response_language:
          $ref: '#/components/schemas/Language'
        model_parameters:
          title: ModelParameters
          description: 'The parameters for the model. WARNING: This is an experimental
            feature, and breakable at any point with virtually no notice. It is meant
            for experimentation to converge on optimal parameters that can then be
            set in the prompt definitions.'
          type: object
          properties:
            llm_name:
              description: The model (e.g., `gpt-4`) to use for summarization. If
                specified, it will override the model behind `generation_preset_name`.
              type: string
              example: gpt4
            max_tokens:
              description: The maximum number of tokens to be returned by the model.
              type: integer
              format: int32
              minimum: 1
            temperature:
              description: The sampling temperature to use. Higher values make the
                output more random, while lower values make it more focused and deterministic.
              type: number
              format: float
            frequency_penalty:
              description: Higher values penalize new tokens based on their existing
                frequency in the text so far, decreasing the model's likelihood to
                repeat the same line verbatim.
              type: number
              format: float
            presence_penalty:
              description: Higher values penalize new tokens based on whether they
                appear in the text so far, increasing the model's likelihood to talk
                about new topics.
              type: number
              format: float
        citations:
          $ref: '#/components/schemas/CitationParameters'
        enable_factual_consistency_score:
          description: Enable returning the factual consistency score with query results.
          type: boolean
          default: true
    QueryCorpusRequest:
      description: Request to search a specific corpus within a customer account and
        optionally generate a response using RAG techniques.
      type: object
      properties:
        query:
          description: The search query string, which is the question the user is
            asking.
          type: string
          maxLength: 5000
        search:
          title: SearchCorpusParameters
          description: The parameters to search one corpus.
          allOf:
          - $ref: '#/components/schemas/SearchCorpus'
          - $ref: '#/components/schemas/SearchParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
        save_history:
          description: Indicates whether to save the query to query history.
          type: boolean
        intelligent_query_rewriting:
          description: '[Tech Preview] Indicates whether to enable intelligent query
            rewriting. When enabled, the platform will attempt to extract metadata
            filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting)
            for more details.'
          type: boolean
          default: false
      required:
      - query
      example:
        query: How to configure OAuth2 for microservices in Kubernetes?
        search:
          metadata_filter: doc.topic = 'authentication' and doc.platform = 'kubernetes'
          lexical_interpolation: 0.005
          limit: 50
          context_configuration:
            sentences_before: 2
            sentences_after: 2
            start_tag: <em>
            end_tag: </em>
          reranker:
            type: customer_reranker
            reranker_name: Rerank_Multilingual_v1
            limit: 50
            include_context: true
        generation:
          generation_preset_name: vectara-summary-ext-24-05-med-omni
          max_used_search_results: 10
          citations:
            style: markdown
            url_pattern: https://vectara.com/documents/{doc.id}
            text_pattern: '{doc.title}'
        save_history: true
        intelligent_query_rewriting: true
    StreamSearchResponse:
      description: The search response results.
      type: object
      properties:
        type:
          description: When the streaming event has the search results, the type will
            be `search_results`.
          type: string
          default: search_results
        search_results:
          description: The ranked search results.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
        rewritten_queries:
          description: The rewritten queries for the corpora that were searched. Only
            populated when `intelligent_query_rewriting` is enabled.
          type: array
          example:
          - corpus_key: fin_docs
            filter_extraction:
              query: ESG compliance trends in EU
              metadata_filter: doc.industry = 'banking' AND doc.year = 2023
          - corpus_key: legal_docs
            filter_extraction:
              query: ESG regulations for EU banks
              metadata_filter: doc.jurisdiction = 'EU' AND doc.year = 2023
          items:
            $ref: '#/components/schemas/RewrittenQuery'
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
    FactualConsistencyScore:
      description: Event containing the factual consistency score.
      type: object
      properties:
        type:
          description: When the streaming event contains the factual consistency score,
            the type will be `factual_consistency_score`.
          type: string
          default: factual_consistency_score
        factual_consistency_score:
          description: The probability that the summary is factually consistent with
            the results.
          type: number
          format: float
      x-vectaraParents:
      - QueryStreamedResponse
      - ChatStreamedResponse
    QueryStreamedResponse:
      description: An individual event sent with Server-sent Events (SSE) when the
        query request is streamed.
      type: object
      discriminator:
        propertyName: type
        mapping:
          search_results: '#/components/schemas/StreamSearchResponse'
          generation_chunk: '#/components/schemas/StreamGenerationChunk'
          generation_end: '#/components/schemas/StreamGenerationEnd'
          factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
          generation_info: '#/components/schemas/GenerationInfo'
          error: '#/components/schemas/StreamError'
          end: '#/components/schemas/StreamResponseEnd'
      oneOf:
      - $ref: '#/components/schemas/StreamSearchResponse'
      - $ref: '#/components/schemas/StreamGenerationChunk'
      - $ref: '#/components/schemas/StreamGenerationEnd'
      - $ref: '#/components/schemas/StreamResponseEnd'
      - $ref: '#/components/schemas/FactualConsistencyScore'
      - $ref: '#/components/schemas/GenerationInfo'
      - $ref: '#/components/schemas/StreamError'
    KeyedSearchCorpus:
      description: A corpus with its identifying key for use in search operations
        within a customer account.
      allOf:
      - $ref: '#/components/schemas/SearchCorpus'
      - type: object
        properties:
          corpus_key:
            $ref: '#/components/schemas/CorpusKey'
          query:
            description: Query for a particular corpus that will override the overall
              query if present.
            type: string
            maxLength: 5000
            example: What are some important facts in my-corpus?
      required:
      - corpus_key
    SearchCorporaParameters:
      description: The parameters to search one or more corpora.
      allOf:
      - type: object
        properties:
          corpora:
            description: The corpora that you want to search.
            type: array
            items:
              $ref: '#/components/schemas/KeyedSearchCorpus'
            minItems: 1
      - $ref: '#/components/schemas/SearchParameters'
      required:
      - corpora
    QueryRequest:
      description: Query one or more corpora.
      type: object
      properties:
        query:
          description: The search query string, which is the question the user is
            asking.
          type: string
          maxLength: 5000
          example: Am I allowed to bring pets to work?
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
        save_history:
          description: Indicates whether to save the query to query history.
          type: boolean
        intelligent_query_rewriting:
          description: '[Tech Preview] Indicates whether to enable intelligent query
            rewriting. When enabled, the platform will attempt to extract metadata
            filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting)
            for more details.'
          type: boolean
          default: false
      example:
        query: Summarize risk exposure and QA issues across divisions
        search:
          corpora:
          - corpus_key: ops_manuals
            metadata_filter: doc.topic = 'QA' AND doc.severity = 'high'
            lexical_interpolation: 0.005
          - corpus_key: fin_docs
            metadata_filter: doc.region = 'EMEA' AND doc.type = 'risk_report'
            lexical_interpolation: 0.005
          context_configuration:
            sentences_before: 2
            sentences_after: 2
            start_tag: <em>
            end_tag: </em>
          reranker:
            type: customer_reranker
            reranker_name: Rerank_Multilingual_v1
        generation:
          generation_preset_name: vectara-summary-ext-24-05-med-omni
          response_language: eng
          enable_factual_consistency_score: true
        stream_response: false
      required:
      - query
      - search
    RephraseSpan:
      description: During the query pipeline, the query may be rephrased to better
        suit the corpus.
      type: object
      properties:
        type:
          description: This value is always `rephrase`.
          type: string
        latency_millis:
          description: Time taken in milliseconds.
          type: integer
        started_at:
          description: When the span started.
          type: string
          format: date-time
        rephrased_query:
          description: Query made to the corpora.
          type: string
      x-vectaraParents:
      - QueryHistorySpan
    SearchSpan:
      description: The search portion of the query pipeline. This occurs before any
        reranking span.
      type: object
      properties:
        type:
          description: This value is always `search`.
          type: string
        latency_millis:
          description: Time taken in milliseconds.
          type: integer
        started_at:
          description: ISO date time that indicates when the span started.
          type: string
          format: date-time
        search_results:
          description: The search results before reranking.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
      x-vectaraParents:
      - QueryHistorySpan
    RerankedSearchResult:
      description: An individual reranked search result from a query.
      type: object
      properties:
        text:
          description: The document part altered by the context configuration that
            matches the query.
          type: string
        score:
          description: The score of the individual result.
          type: number
          format: double
        original_score:
          description: The original score of the individual result before reranking.
          type: number
          format: double
    RerankSpan:
      description: The reranking of the search result.
      type: object
      properties:
        type:
          description: This value is always `rerank`.
          type: string
        latency_millis:
          description: Time taken in milliseconds.
          type: integer
        started_at:
          description: When the span started.
          type: string
          format: date-time
        reranked_search_results:
          description: The new search results after reranking.
          type: array
          items:
            $ref: '#/components/schemas/RerankedSearchResult'
      x-vectaraParents:
      - QueryHistorySpan
    GenerationSpan:
      description: The generation by an LLM.
      type: object
      properties:
        type:
          description: This value is always `generation`.
          type: string
        latency_millis:
          description: Time taken in milliseconds.
          type: integer
        started_at:
          description: When the span started.
          type: string
          format: date-time
        prompt:
          description: The text sent as a prompt to the LLM.
          type: string
        generation:
          description: The text generated from the LLM.
          type: string
      x-vectaraParents:
      - QueryHistorySpan
    FactualConsistencyScoreSpan:
      description: The factual consistency of the generation.
      type: object
      properties:
        type:
          description: This value is always `fcs`.
          type: string
        latency_millis:
          description: Time taken in milliseconds.
          type: integer
        started_at:
          description: When the span started.
          type: string
          format: date-time
        score:
          description: The probability that the summary is factually consistent with
            the results.
          type: number
          format: float
      x-vectaraParents:
      - QueryHistorySpan
    RewrittenQueryWarning:
      description: "The warning for the rewritten query.\n *  `no_filter_attrs`: Corpus\
        \ has no filter attributes.\n *  `extracted_empty_filter`: No filter found\
        \ in the query to extract or the platform failed to extract it.\n *  `failed_to_parse_extracted_filter`:\
        \ Failed to parse the extracted filter due to invalid syntax.\n *  `failure`:\
        \ Unexpected error occurred."
      type: string
      enum:
      - no_filter_attrs
      - extracted_empty_filter
      - failed_to_parse_extracted_filter
      - failure
    RewrittenQuerySpan:
      description: Provides detailed information about a rewritten query generated
        for a specific corpus when intelligent query rewriting is enabled.
      type: object
      properties:
        type:
          description: Indicates the type of span. This value is always `rewritten_query`.
          type: string
        corpus_key:
          description: The corpus key that the query was made on.
          type: string
        latency_millis:
          description: Time taken in milliseconds.
          type: integer
        started_at:
          description: ISO date time that indicates when the span started.
          type: string
          format: date-time
        warnings:
          description: Warnings that occurred during query rewriting.
          items:
            $ref: '#/components/schemas/RewrittenQueryWarning'
        filter_extraction:
          $ref: '#/components/schemas/FilterExtraction'
      x-vectaraParents:
      - QueryHistorySpan
    QueryHistorySpan:
      description: Portion of the query history.
      type: object
      discriminator:
        propertyName: type
        mapping:
          rephrase: '#/components/schemas/RephraseSpan'
          search: '#/components/schemas/SearchSpan'
          rerank: '#/components/schemas/RerankSpan'
          generation: '#/components/schemas/GenerationSpan'
          fcs: '#/components/schemas/FactualConsistencyScoreSpan'
          rewritten_query: '#/components/schemas/RewrittenQuerySpan'
      oneOf:
      - $ref: '#/components/schemas/RephraseSpan'
      - $ref: '#/components/schemas/SearchSpan'
      - $ref: '#/components/schemas/RerankSpan'
      - $ref: '#/components/schemas/GenerationSpan'
      - $ref: '#/components/schemas/FactualConsistencyScoreSpan'
      - $ref: '#/components/schemas/RewrittenQuerySpan'
    QueryHistory:
      description: A complete record of a previously executed query, including the
        request parameters and response.
      type: object
      properties:
        id:
          description: The ID of the query history.
          type: string
          example: qry_1234567890
        query:
          $ref: '#/components/schemas/QueryRequest'
        chat_id:
          description: The ID of the chat the query is a part of.
          type: string
          example: chat_1234567890
        latency_millis:
          description: Time taken to complete the query, measured in milliseconds.
          type: integer
          example: 150
        started_at:
          description: ISO date time indicating when the query was first received.
          type: string
          format: date-time
          example: '2025-06-01T12:00:00Z'
        spans:
          description: Parts of the query pipeline. Each span explains what happened
            during that stage of the query pipeline.
          type: array
          items:
            $ref: '#/components/schemas/QueryHistorySpan'
    QueryHistorySummary:
      description: A summary of a previously executed query, including metadata but
        not full results.
      type: object
      properties:
        id:
          description: The ID of the query history.
          type: string
          example: qry_1234567890
        query:
          description: The actual query made.
          type: string
          maxLength: 5000
        corpus_key:
          description: The corpus key that the query was made on.
          type: string
          example: eu_carbon
        started_at:
          description: ISO date time indicating when the query was first received.
          type: string
          format: date-time
          example: '2025-06-01T12:00:00Z'
        latency_millis:
          description: Time that the query took in milliseconds.
          type: integer
          example: 50
        chat_id:
          description: The unique ID of the chat associated with the query, if this
            query is part of a chat.
          type: string
          example: chat_1234567890
        generation:
          description: Generated response to the query, if requested.
          type: string
          example: The carbon reduction efforts by EU banks in 2023 show a significant
            increase, with a 20% rise in initiatives driven by regulatory pressure.
        factual_consistency_score:
          description: The factual consistency score of the generation.
          type: number
          format: float
          example: 0.98
    ListQueryHistoriesResponse:
      description: An array of query histories.
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/QueryHistorySummary'
        metadata:
          description: The metadata for the list of query histories.
          type: object
          properties:
            page_key:
              description: A query parameter required when requesting the next page
                of results.
              type: string
    Chat:
      description: A chat conversation with associated metadata and settings.
      type: object
      properties:
        id:
          description: ID of the chat.
          type: string
          pattern: cht_.+$
          example: cht_123456789
        first_query:
          description: The first query of the chat.
          type: string
          example: What are the arbitration terms in the Delaware employment contract?
        first_answer:
          description: The first answer of the chat.
          type: string
          example: Clause 9.2 mandates binding arbitration through AAA with venue
            in Delaware and a 30-day opt-out. California law governs the agreement.
        enabled:
          description: Indicates whether this chat is enabled and can have further
            turns.
          type: boolean
          example: true
        created_at:
          description: Specifies when this chat was created.
          type: string
          format: date-time
    ListChatsResponse:
      description: Response containing a list of chat conversations.
      type: object
      properties:
        chats:
          description: List of chats.
          type: array
          items:
            $ref: '#/components/schemas/Chat'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    ChatParameters:
      type: object
      description: Parameters to control chat behavior.
      properties:
        store:
          description: Indicates whether to store chat messages and response messages.
          type: boolean
          default: true
    ChatRequest:
      description: Request to start or continue a chat conversation with a large language
        model.
      type: object
      properties:
        query:
          description: The chat message or question.
          type: string
          maxLength: 5000
          example: What are the carbon reduction efforts by EU banks in 2023?
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        chat:
          $ref: '#/components/schemas/ChatParameters'
        save_history:
          description: Indicates whether to save the chat in both the chat and query
            history. This overrides `chat.store`.
          type: boolean
          default: true
        intelligent_query_rewriting:
          description: '[Tech Preview] Indicates whether to enable intelligent query
            rewriting. When enabled, the platform will attempt to extract metadata
            filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting)
            for more details.'
          type: boolean
          default: false
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
      required:
      - query
      - search
    ChatFullResponse:
      description: Full response to a chat question when the result is not streamed.
      type: object
      properties:
        chat_id:
          description: If the chat response was stored, the ID of the chat.
          type: string
          example: cht_123456789
        turn_id:
          description: If the chat response was stored, the ID of the turn.
          type: string
          example: trn_987654321
        answer:
          description: The message from the chat model for the chat message.
          type: string
          example: EU banks in 2023 have increased carbon reduction initiatives by
            20%, driven by new EU regulations mandating annual emissions reporting.
        response_language:
          description: The language that the answer is expected to be.
          $ref: '#/components/schemas/Language'
          example: eng
        search_results:
          description: The ranked search results that the chat model used.
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
        factual_consistency_score:
          description: Indicates the probability that the summary is factually consistent
            with the results. The system excludes this property if it encounters excessively
            large outputs or search results.
          type: number
          format: float
        rendered_prompt:
          description: The rendered prompt sent to the LLM. Useful when creating customer
            `prompt_template` templates.
          type: string
          example: '[{"role": "system", "content": "You are an ESG analyst."}, {"role":
            "user", "content": "What are the carbon reduction initiatives by EU banks
            in 2023?"}, {"role": "assistant", "content": "${vectaraQueryResults[0].getText()}"}]'
        warnings:
          description: Non-fatal warnings that occurred during request processing
          type: array
          items:
            $ref: '#/components/schemas/QueryWarning'
        rephrased_query:
          description: View the actual query made to backend that was rephrased by
            the LLM from the input query.
          type: string
          example: Carbon reduction efforts by EU banks in 2023?
        rewritten_queries:
          description: The rewritten queries for the corpora that were searched. Only
            populated when intelligent_query_rewriting is enabled.
          type: array
          items:
            $ref: '#/components/schemas/RewrittenQuery'
          example:
          - corpus_key: fin_docs
            filter_extraction:
              query: ESG compliance trends in EU
              metadata_filter: doc.industry = 'banking' AND doc.year = 2023
          - corpus_key: legal_docs
            filter_extraction:
              query: ESG regulations for EU banks 2023
              metadata_filter: doc.jurisdiction = 'EU' AND doc.year = 2023
    ChatInfoResponse:
      description: Information about the chat.
      type: object
      properties:
        type:
          description: This will be `chat_info` when the stream event contains information
            about how the chat is stored.
          type: string
          default: chat_info
        chat_id:
          description: ID of the chat.
          type: string
          pattern: cht_.+$
          example: cht_123456789
        turn_id:
          description: ID of the turn.
          type: string
          pattern: trn_.+$
          example: trn_987654321
      x-vectaraParents:
      - ChatStreamedResponse
    ChatStreamedResponse:
      description: An individual event when the response is streamed.
      type: object
      discriminator:
        propertyName: type
        mapping:
          search_results: '#/components/schemas/StreamSearchResponse'
          chat_info: '#/components/schemas/ChatInfoResponse'
          generation_chunk: '#/components/schemas/StreamGenerationChunk'
          generation_end: '#/components/schemas/StreamGenerationEnd'
          generation_info: '#/components/schemas/GenerationInfo'
          factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
          end: '#/components/schemas/StreamResponseEnd'
          error: '#/components/schemas/StreamError'
      oneOf:
      - $ref: '#/components/schemas/StreamSearchResponse'
      - $ref: '#/components/schemas/ChatInfoResponse'
      - $ref: '#/components/schemas/StreamGenerationChunk'
      - $ref: '#/components/schemas/StreamGenerationEnd'
      - $ref: '#/components/schemas/GenerationInfo'
      - $ref: '#/components/schemas/FactualConsistencyScore'
      - $ref: '#/components/schemas/StreamResponseEnd'
      - $ref: '#/components/schemas/StreamError'
    Turn:
      description: A single message exchange in a chat conversation, representing
        one user input and the corresponding response.
      type: object
      properties:
        id:
          description: The ID of the turn.
          type: string
          pattern: trn_.+$
          example: trn_987654321
        chat_id:
          description: The ID of the chat the turn resides in.
          type: string
          pattern: cht_.+$
          example: cht_123456789
        query:
          description: The query made to produce this turn.
          type: string
          maxLength: 5000
          example: How do you turn this widget?
        answer:
          description: The response to the query.
          type: string
          example: The widget turns counter clockwise.
        enabled:
          description: Indicates whether the turn is enabled and shown in future turns
            of the chat.
          type: boolean
          example: true
        created_at:
          description: Specifies when the turn was created.
          type: string
          format: date-time
    ListChatTurnsResponse:
      description: Response containing a list of turns (message exchanges) within
        a chat conversation.
      type: object
      properties:
        turns:
          description: List of turns.
          type: array
          items:
            $ref: '#/components/schemas/Turn'
    UpdateTurnRequest:
      description: Request to update a specific turn (message exchange) within a chat
        conversation.
      type: object
      properties:
        enabled:
          description: Indicates whether to disable a turn. It will disable this turn
            and all subsequent turns. Enabling a turn is not implemented.
          type: boolean
          example: false
    Prompt:
      description: A prompt that can be used with a LLM. A prompt is the template
        that is used to render the text sent to the LLM. It also contains various
        default model settings such as temperature.
      type: object
      properties:
        id:
          description: The ID of the prompt.
          type: string
          pattern: pmt_.*
        name:
          description: Name of the prompt. This is used as the `prompt_name` in a
            query.
          type: string
        description:
          description: The description of the prompt.
          type: string
        enabled:
          description: Indicates whether the prompt is enabled.
          type: boolean
        default:
          description: Indicates if this prompt is the default prompt used with the
            LLM.
          type: boolean
    LLM:
      description: A LLM can be used to enhance query results with a response, and
        be used as the responder during a chat.
      type: object
      properties:
        id:
          description: The ID of the LLM.
          type: string
          pattern: llm_.*
          example: llm_1021844
        name:
          description: Name of the LLM.
          type: string
          example: Claude 3.7 Sonnet
        description:
          description: The description of the LLM.
          type: string
          example: The Anthropic Claude 3.7 Sonnet model.
        enabled:
          description: Indicates whether the LLM is enabled.
          type: boolean
        default:
          description: If this is the default LLM, it is used in queries when the
            generator is not specified.
          type: boolean
        prompts:
          description: List of prompts that the model can use. This is deprecated;
            see `/v2/generation_presets` instead.
          items:
            $ref: '#/components/schemas/Prompt'
          deprecated: true
    ListLLMsResponse:
      description: Response containing a list of Large Language Models available for
        generative AI capabilities.
      type: object
      properties:
        llms:
          description: List of LLMs.
          type: array
          items:
            $ref: '#/components/schemas/LLM'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    BearerAuth:
      type: object
      description: Bearer token authentication
      properties:
        type:
          description: Must be "bearer" for bearer token auth
          type: string
          default: bearer
          example: bearer
        token:
          description: The bearer token to use for authentication
          type: string
          example: abcdef......
      required:
      - type
      - token
      x-vectaraParents:
      - RemoteAuth
    HeaderAuth:
      type: object
      description: Custom header-based authentication
      properties:
        type:
          description: Must be "header" for header-based auth
          type: string
          default: header
          example: header
        header:
          description: The header name to use (e.g. x-api-key)
          type: string
          example: x-api-key
        value:
          description: The header value to use
          type: string
          example: sk-ant.....
      required:
      - type
      - header
      - value
      x-vectaraParents:
      - RemoteAuth
    RemoteAuth:
      type: object
      description: Authentication configuration for an LLM
      discriminator:
        propertyName: type
        mapping:
          bearer: '#/components/schemas/BearerAuth'
          header: '#/components/schemas/HeaderAuth'
      oneOf:
      - $ref: '#/components/schemas/BearerAuth'
      - $ref: '#/components/schemas/HeaderAuth'
      required:
      - type
    OpenAILLMRequestBase:
      description: Common fields for OpenAI-compatible and Responses API LLM requests.
      type: object
      properties:
        name:
          description: Name to reference the LLM. This will be used in other endpoints
            (like query) when using this LLM. If this name conflicts with a global
            LLM (a LLM that is preconfigured with the Vectara platform), then it will
            override that LLM for all usages.
          type: string
          example: Claude 3.7 Sonnet
          minLength: 1
          maxLength: 255
        description:
          description: Description of the LLM.
          type: string
          default: ''
          maxLength: 1000
          nullable: false
          example: The Anthropic Claude 3.7 Sonnet model
        model:
          description: The model name to use with the API (e.g. gpt-4, claude-2, etc).
            This is used in the API request to the remote LLM provider.
          type: string
          example: claude-3-7-sonnet-20250219
        uri:
          description: The URI endpoint for the API (can be OpenAI or any compatible
            API endpoint)
          type: string
          format: uri
          example: https://api.anthropic.com/v1/chat/completions
        auth:
          $ref: '#/components/schemas/RemoteAuth'
        headers:
          description: Additional HTTP headers to include with requests to the LLM
            API.
          type: object
          additionalProperties:
            type: string
        test_model_parameters:
          description: Any additional parameters that are required for the LLM during
            the test call.
          type: object
          additionalProperties: true
          example:
            max_tokens: 512
      required:
      - name
      - uri
    CreateOpenAILLMRequest:
      description: Request to create an OpenAI-compatible Large Language Model connection.
      type: object
      allOf:
      - $ref: '#/components/schemas/OpenAILLMRequestBase'
      - type: object
        properties:
          type:
            description: Must be "openai-compatible" for OpenAI and OpenAI-compatible
              APIs (like Anthropic Claude, Azure OpenAI, etc)
            type: string
            default: openai-compatible
          model:
            description: The model name to use with the API (e.g. gpt-4, claude-2,
              etc). This is used in the API request to the remote LLM provider.
            type: string
            minLength: 1
        required:
        - type
        - model
      x-vectaraParents:
      - CreateLLMRequest
    CreateOpenAIResponsesLLMRequest:
      description: Request to create an OpenAI Responses API Large Language Model
        connection for reasoning models like o1, o3.
      type: object
      allOf:
      - $ref: '#/components/schemas/OpenAILLMRequestBase'
      - type: object
        properties:
          type:
            description: Must be "openai-responses" for OpenAI Responses API (reasoning
              models like o1, o3)
            type: string
            default: openai-responses
          model:
            description: The model name to use with the Responses API (e.g. o1-preview,
              o1-mini). This is used in the API request to the remote LLM provider.
            type: string
            minLength: 1
        required:
        - type
        - model
      x-vectaraParents:
      - CreateLLMRequest
    VertexAiApiKeyAuth:
      description: API key authentication for Vertex AI
      type: object
      properties:
        type:
          description: Must be "api_key" for API key authentication
          type: string
          default: api_key
        api_key:
          description: The Google Cloud API key for authentication
          type: string
      required:
      - type
      - api_key
      x-vectaraParents:
      - VertexAiAuth
    VertexAiServiceAccountAuth:
      description: Service account authentication for Vertex AI
      type: object
      properties:
        type:
          description: Must be "service_account" for service account authentication
          type: string
          default: service_account
        key_json:
          description: The service account JSON key file contents as a string
          type: string
      required:
      - type
      - key_json
      x-vectaraParents:
      - VertexAiAuth
    VertexAiAuth:
      description: Authentication configuration for Vertex AI
      type: object
      discriminator:
        propertyName: type
        mapping:
          api_key: '#/components/schemas/VertexAiApiKeyAuth'
          service_account: '#/components/schemas/VertexAiServiceAccountAuth'
      oneOf:
      - $ref: '#/components/schemas/VertexAiApiKeyAuth'
      - $ref: '#/components/schemas/VertexAiServiceAccountAuth'
      required:
      - type
    CreateVertexAILLMRequest:
      description: Request to create a Vertex AI Large Language Model connection for
        Gemini models.
      type: object
      properties:
        type:
          description: Must be "vertex-ai" for Google Cloud Vertex AI Gemini models
          type: string
          default: vertex-ai
        name:
          description: Name to reference the LLM. This will be used in other endpoints
            (like query) when using this LLM. If this name conflicts with a global
            LLM (a LLM that is preconfigured with the Vectara platform), then it will
            override that LLM for all usages.
          type: string
        description:
          description: Description of the LLM.
          type: string
          default: ''
          nullable: false
        model:
          description: The model name to use (e.g. gemini-2.5-flash, gemini-2.5-pro,
            gemini-2.0-experimental-1219, etc).
          type: string
        uri:
          description: The URI endpoint for the Vertex AI API
          type: string
          format: uri
          example: https://aiplatform.googleapis.com/v1/projects/my-project/locations/us-central1
        auth:
          $ref: '#/components/schemas/VertexAiAuth'
        test_model_parameters:
          description: Any additional parameters that are required for the LLM during
            the test call.
          type: object
          additionalProperties: true
      required:
      - type
      - name
      - model
      - uri
      - auth
      x-vectaraParents:
      - CreateLLMRequest
    CreateLLMRequest:
      description: Request to create a Large Language Model connection for generative
        capabilities.
      type: object
      discriminator:
        propertyName: type
        mapping:
          openai-compatible: '#/components/schemas/CreateOpenAILLMRequest'
          openai-responses: '#/components/schemas/CreateOpenAIResponsesLLMRequest'
          vertex-ai: '#/components/schemas/CreateVertexAILLMRequest'
      oneOf:
      - $ref: '#/components/schemas/CreateOpenAILLMRequest'
      - $ref: '#/components/schemas/CreateOpenAIResponsesLLMRequest'
      - $ref: '#/components/schemas/CreateVertexAILLMRequest'
      required:
      - type
    ChatCompletionRequestMessage:
      description: A message in the chat completion request, representing part of
        the conversation.
      type: object
      required:
      - role
      - content
      properties:
        role:
          type: string
          description: The role of the author of this message. Common values include
            'system', 'user', 'assistant', 'function', and 'tool'.
        content:
          type: string
          description: The contents of the message.
        name:
          type: string
          description: The name of the author of this message, used to connect messages
            in a conversation.
    CreateChatCompletionRequest:
      description: The request object for creating a chat completion with an OpenAI-compatible
        interface. This object is compatible with OpenAI's chat completion schema
        and supports customizable parameters for response generation.
      type: object
      required:
      - messages
      - model
      properties:
        model:
          type: string
          description: The ID of the model to use. This field is required.
        messages:
          type: array
          description: An ordered array of messages that represent the full context
            of the conversation to date. Each message includes a `role` and `content`.
          minItems: 1
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
        stream:
          type: boolean
          description: Optional. When set to `true`, the API streams partial message
            deltas as they become available, similar to ChatGPT's streaming mode.
          default: false
      additionalProperties: true
    ChatCompletionResponseMessage:
      description: A message in the chat completion response from the assistant.
      type: object
      required:
      - role
      properties:
        role:
          type: string
          description: The role of the author of this message, typically 'assistant'
            for responses.
      additionalProperties: true
    ChatCompletionResponseChoice:
      description: A single chat completion choice returned in the response
      type: object
      required:
      - index
      - message
      properties:
        index:
          type: integer
          description: The index of the choice in the array of choices.
        message:
          $ref: '#/components/schemas/ChatCompletionResponseMessage'
      additionalProperties: true
    CreateChatCompletionResponse:
      description: Response object containing the generated chat completion.
      type: object
      required:
      - object
      - choices
      properties:
        object:
          type: string
          enum:
          - chat.completion
          description: The object type, which is always 'chat.completion'.
        choices:
          type: array
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than `1`.
          items:
            $ref: '#/components/schemas/ChatCompletionResponseChoice'
      additionalProperties: true
    ChatCompletionStreamResponseDelta:
      description: A partial message update to be merged with previous chunks in a
        streaming response.
      type: object
      properties:
        role:
          type: string
          description: The role of the author of this message, typically 'assistant'
            for responses.
      additionalProperties: true
    ChatCompletionStreamResponseChoice:
      description: A single chat completion chunk choice in a streaming response.
      type: object
      required:
      - index
      - delta
      properties:
        index:
          type: integer
          description: The index of the choice in the array of choices.
        delta:
          $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
      additionalProperties: true
    CreateChatCompletionStreamResponse:
      description: The response object for streaming chat completions in chunks.
      type: object
      required:
      - object
      - choices
      properties:
        object:
          type: string
          enum:
          - chat.completion.chunk
          description: The object type, which is always 'chat.completion.chunk' for
            streaming responses.
        choices:
          type: array
          description: A list of chat completion chunks.
          items:
            $ref: '#/components/schemas/ChatCompletionStreamResponseChoice'
      additionalProperties: true
    GenerationPreset:
      description: Bundle of default values used when calling generation. All values
        except model name can be overridden at generation time.
      type: object
      properties:
        name:
          description: Name of the generation preset to be used with configuring generation.
          type: string
          example: Mockingbird 2.0
        description:
          description: Description of the generation preset.
          type: string
          example: Mockingbird LLM 2.0 prompt for summarizing query results as an
            answer. Designed for RAG.
        llm_name:
          description: Name of the model that these presets are used with. The list
            of available names can be fetched by the `GET /v2/llms` endpoint.
          type: string
          example: mockingbird-2.0
        prompt_template:
          description: Preset template used to render the prompt sent to generation.
          type: string
        max_used_search_results:
          description: Preset maximum number of search results that will be available
            to the prompt.
          type: integer
          format: int32
          minimum: 1
          example: 50
        max_tokens:
          description: Preset maximum number of tokens to be returned by the generation.
          type: integer
          format: int32
          minimum: 1
          example: 500
        temperature:
          description: The sampling temperature to use. Higher values make the output
            more random, while lower values make it more focused and deterministic.
          type: number
          format: float
          example: 0.4
        frequency_penalty:
          description: Higher values penalize new tokens based on their existing frequency
            in the generation so far, decreasing the model's likelihood to repeat
            the same line verbatim.
          type: number
          format: float
          example: 0.2
        presence_penalty:
          description: Higher values penalize new tokens based on whether they appear
            in the generation so far, increasing the model's likelihood to talk about
            new topics.
          type: number
          format: float
          example: 0.2
        enabled:
          description: Indicates whether the prompt is enabled.
          type: boolean
        default:
          description: Indicates if this prompt is the default prompt used with the
            LLM.
          type: boolean
    ListGenerationPresetsResponse:
      description: Response containing a list of generation presets for configuring
        RAG behavior.
      type: object
      properties:
        generation_presets:
          description: List of generation presets.
          type: array
          items:
            $ref: '#/components/schemas/GenerationPreset'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    EvaluateFactualConsistencyRequest:
      description: Request to evaluate the factual consistency of a generated text
        against source documents.
      type: object
      required:
      - generated_text
      - source_texts
      properties:
        model_parameters:
          description: The model parameters for the evaluation.
          type: object
          properties:
            model_name:
              description: The name of the model to use for evaluation. Only hhem_v2.3
                is supported.
              type: string
              example: hhem_v2.3
              default: hhem_v2.3
        generated_text:
          type: string
          description: The generated text (e.g., summary or answer) to evaluate for
            factual consistency.
        source_texts:
          type: array
          description: The source documents or text snippets against which to evaluate
            factual consistency.
          items:
            type: string
    EvaluateFactualConsistencyResponse:
      description: Results of the factual consistency evaluation.
      type: object
      required:
      - score
      properties:
        score:
          type: number
          format: double
          description: A prediction score that must be greater than 0 but less than
            1 from HHEM, monotonically indicates the likelihood of hallucinations.
          minimum: 0
          maximum: 1
    Encoder:
      description: A model that converts text into vector embeddings for semantic
        search.
      type: object
      properties:
        id:
          description: The Encoder ID.
          type: string
          pattern: enc_[0-9]+$
          example: enc_1
        name:
          description: The encoder name, `boomerang-2023-q3`.
          type: string
          example: openai-text-encoder
        type:
          description: The encoder type
          example: openai-compatible
          type: string
          default: vectara
        output_dimensions:
          description: When this encoder is used to create an embedding, it shows
            the count of dimensions for the output embedding. A high dimensionality
            will consume more storage space, but it allows for an increase in the
            quality of the embedding.
          type: integer
          format: int32
          example: 1536
        description:
          description: The encoder description.
          type: string
        default:
          description: Indicates whether the default encoder is used when creating
            a corpus.
          type: boolean
          example: true
        enabled:
          description: Indicates whether the encoder is enabled.
          type: boolean
          example: true
    ListEncodersResponse:
      description: Response containing a list of available encoders for converting
        text to vector embeddings.
      type: object
      properties:
        encoders:
          type: array
          items:
            $ref: '#/components/schemas/Encoder'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateOpenAIEncoderRequest:
      description: Configuration for an OpenAI-compatible encoder
      type: object
      properties:
        type:
          description: Must be "openai-compatible" for OpenAI and OpenAI-compatible
            APIs
          type: string
          default: openai-compatible
        name:
          description: A unique name for the encoder
          type: string
          example: openai-text-encoder
        description:
          description: A description of what this encoder does
          type: string
          example: description
        output_dimensions:
          description: The number of dimensions in the output embedding vector. If
            provided and the model supports truncation, the response will be truncated
            to this number of dimensions.
          type: integer
          format: int32
          minimum: 1
        uri:
          description: The URI endpoint for the embedding API (can be OpenAI or any
            compatible embedding API endpoint)
          type: string
          format: uri
          example: https://api.openai.com/v1/embeddings
        model:
          description: The model name to use for embeddings
          type: string
          example: text-embedding-ada-002
        auth:
          $ref: '#/components/schemas/RemoteAuth'
      required:
      - name
      - description
      - uri
      - model
      x-vectaraParents:
      - CreateEncoderRequest
    CreateEncoderRequest:
      type: object
      description: Request to create a new encoder
      discriminator:
        propertyName: type
        mapping:
          openai-compatible: '#/components/schemas/CreateOpenAIEncoderRequest'
      oneOf:
      - $ref: '#/components/schemas/CreateOpenAIEncoderRequest'
      required:
      - type
    Reranker:
      description: A reranker can be used in query or chat endpoints to reorder the
        search results.
      type: object
      properties:
        id:
          description: The ID of the reranker.
          type: string
          pattern: rnk_[0-9]+$
        name:
          description: The name of the reranker.
          type: string
        description:
          description: The description of the reranker.
          type: string
        enabled:
          description: Whether the reranker is enabled.
          type: boolean
    ListRerankersResponse:
      description: Response containing a list of available rerankers for improving
        search result ordering.
      type: object
      properties:
        rerankers:
          description: An array of rerankers.
          type: array
          items:
            $ref: '#/components/schemas/Reranker'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    TableExtractor:
      description: A table extractor can be used to extract tabular data from documents
        during indexing.
      type: object
      properties:
        name:
          description: The name of the table extractor.
          type: string
          example: textract
        is_default:
          description: Indicates whether it is the default extractor when not specified
            during indexing.
          type: boolean
        description:
          description: The description of the table extractor.
          type: string
          example: Uses the AWS Textract service to extract tables.
        generation:
          $ref: '#/components/schemas/TableGenerationSpec'
    ListTableExtractorsResponse:
      type: object
      description: Response containing a list of available table extractors for document
        processing
      properties:
        table_extractors:
          description: An array of table extractors.
          type: array
          items:
            $ref: '#/components/schemas/TableExtractor'
    HallucinationCorrector:
      description: A hallucination corrector that detects and corrects hallucinations
        in generated text.
      type: object
      properties:
        id:
          description: The unique ID for the Hallucination Corrector (HC).
          type: string
          pattern: hcm_[0-9]+$
          example: hcm_520721853
        name:
          description: The hallucination corrector name, typically including the base
            name and variant.
          type: string
          example: vhc-small-1.0
        type:
          description: The hallucination corrector type. Defaults to `vectara`.
          type: string
          default: vectara
        description:
          description: "A short description of the hallucination corrector\u2019s\
            \ purpose."
          type: string
          example: Basic model for hallucination correction in AI-generated text.
        enabled:
          description: Indicates whether the hallucination corrector is enabled and
            available for use in hallucination correction workflows.
          type: boolean
          example: true
    ListHallucinationCorrectorsResponse:
      description: Response containing a list of hallucination correctors.
      type: object
      properties:
        hallucination_correctors:
          description: An array of hallucination correctors that match the request
            parameters.
          type: array
          items:
            $ref: '#/components/schemas/HallucinationCorrector'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    HcmSourceDocument:
      description: An array of source documents used to verify the factual accuracy
        of the generated text. Each document should reflect the context used to generate
        the original text.
      type: object
      required:
      - text
      properties:
        text:
          type: string
          description: The full text content of the source document. Hallucination
            correction uses this content as the factual basis for correcting the generated
            text.
    HallucinationCorrectionRequest:
      description: The request to detect and correct hallucinations in generated text.
      type: object
      required:
      - generated_text
      - documents
      - model_name
      properties:
        generated_text:
          type: string
          description: The generated text to be evaluated. The hallucination corrector
            reviews this text and applies corrections based on the provided source
            documents.
        documents:
          type: array
          description: The source documents that were used to generate the text.
          items:
            $ref: '#/components/schemas/HcmSourceDocument'
        model_name:
          type: string
          description: The name of the LLM model to use for hallucination correction.
          example: vhc-large-1.0
        query:
          type: string
          description: Optional query that provides context for the expected response
            format and factual information. When provided, enables query-aware hallucination
            correction that considers the specific response format and factual context
            expected for the query.
          required: false
    CorrectionItem:
      description: A single correction applied to a span of text in the generated
        text.
      type: object
      required:
      - original_text
      - corrected_text
      - explanation
      properties:
        original_text:
          type: string
          description: The original text containing a hallucination or error.
        corrected_text:
          type: string
          description: The corrected version of the text.
        explanation:
          type: string
          description: An explanation of why the correction was needed for the text.
    HallucinationCorrectionResponse:
      description: The response that contains the hallucination correction results.
      type: object
      required:
      - corrected_text
      - corrections
      properties:
        corrections:
          type: array
          description: A list of corrections applied to the text, with explanations.
          items:
            $ref: '#/components/schemas/CorrectionItem'
        corrected_text:
          type: string
          description: The revised version of the text, with minimal edits made to
            correct unsupported or inaccurate statements. If no corrections are needed,
            this value is identical to the original text.
        model:
          type: string
          description: The name of the model used for hallucination correction.
    JobState:
      description: Enum representing the possible states of a background job.
      type: string
      enum:
      - unknown
      - queued
      - started
      - completed
      - failed
      - failed_will_retry
      - aborted
    Job:
      description: A background job for processing long-running operations on the
        platform.
      type: object
      properties:
        id:
          description: The ID of the job.
          type: string
          pattern: job_.+$
          example: job_1234
        type:
          description: The type of job.
          type: string
          enum:
          - rebuild_vector_index
          - replace_filter_attributes
          - unknown
        corpus_keys:
          description: The corpora that this job belongs to. It may not belong to
            any corpora.
          type: array
          items:
            $ref: '#/components/schemas/CorpusKey'
        state:
          $ref: '#/components/schemas/JobState'
        created_at:
          description: Specifies when the job was created.
          type: string
          format: date-time
        started_at:
          description: Specifies when the job was started.
          type: string
          format: date-time
        completed_at:
          description: Specifies when the job was completed.
          type: string
          format: date-time
        created_by_username:
          description: The username of the user who created the job. This property
            may be missing, e.g., if the job was created by the system, not a user.
          type: string
    ListJobsResponse:
      description: Response containing a list of background jobs and their current
        states.
      type: object
      properties:
        jobs:
          description: An array of jobs.
          type: array
          items:
            $ref: '#/components/schemas/Job'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    ApiRole:
      description: Roles that a user or an app client can take on.
      type: string
      enum:
      - owner
      - administrator
      - billing_administrator
      - corpus_administrator
      - corpus_developer
      - agent_administrator
      - agent_viewer
      - agent_developer
    CorpusRole:
      description: Corpus-specific role assignment.
      type: object
      properties:
        corpus_key:
          description: The key of the corpus this role applies to.
          type: string
        role:
          description: The role assigned for this specific corpus.
          type: string
          enum:
          - owner
          - administrator
          - viewer
          - editor
      required:
      - corpus_key
      - role
    AgentRole:
      description: Agent-specific role assignment.
      type: object
      properties:
        agent_key:
          description: The ID of the agent this role applies to.
          type: string
        role:
          description: The role assigned for this specific agent.
          type: string
          enum:
          - agent_administrator
          - agent_viewer
          - agent_developer
      required:
      - agent_id
      - role
    ApiOperationPolicy:
      description: Policy to allow operations if only using the specified resource.
      type: object
      properties:
        allow_any_resource:
          description: If any resource is allowed for the operation.
          type: boolean
          default: true
        allowed_resources:
          description: Object with keys of resource paths to a list of allowed resources.
            A resource path starts with either body, path, or implicit. A body or
            path resource is within the operation body, and an implicit resource is
            a resource implied by the request.
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
      - allow_any_resource
    ApiPolicy:
      description: What actions a principal can take on the Vectara platform.
      type: object
      properties:
        name:
          description: The name of the API role.
          type: string
        allowed_operations:
          description: Operations that are allowed by the API role. Each operation
            may only allow certain resources that are described by a resource path
            to resource value map. If the value is null, then the operation is allowed
            on any resource.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ApiOperationPolicy'
      required:
      - name
      - allowed_operations
    User:
      description: A user account with associated profile information and permissions.
      type: object
      properties:
        id:
          description: The Vectara ID for the user.
          type: string
          pattern: usr_.+
        email:
          description: The email address for the user.
          type: string
          format: email
        username:
          description: The username for the user.
          type: string
        enabled:
          description: Indicates whether the user is enabled or disabled.
          type: boolean
        description:
          description: The description of the user.
          type: string
        created_at:
          description: When the user was created.
          type: string
          format: date-time
        updated_at:
          description: When a user property was last updated.
          type: string
          format: date-time
        api_roles:
          description: The customer-level role names of the user.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
        corpus_roles:
          description: Corpus-specific role assignments for the user.
          type: array
          items:
            $ref: '#/components/schemas/CorpusRole'
        agent_roles:
          description: Agent-specific role assignments for the user.
          type: array
          items:
            $ref: '#/components/schemas/AgentRole'
        api_policy:
          $ref: '#/components/schemas/ApiPolicy'
    ListUsersResponse:
      description: Response containing a list of user accounts.
      type: object
      properties:
        users:
          description: List of users.
          type: array
          items:
            $ref: '#/components/schemas/User'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateUserRequest:
      description: Request to create a new user account in the system.
      type: object
      properties:
        email:
          description: The email address for the user.
          type: string
          format: email
        username:
          description: The username for the user. The value defaults to the email.
          type: string
        description:
          description: The description of the user.
          type: string
        api_roles:
          description: The customer-level role names assigned to the user.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
        corpus_roles:
          description: Corpus-specific role assignments for the user.
          type: array
          items:
            $ref: '#/components/schemas/CorpusRole'
        agent_roles:
          description: Agent-specific role assignments for the user.
          type: array
          items:
            $ref: '#/components/schemas/AgentRole'
      required:
      - email
    UpdateUserRequest:
      description: Request to update an existing user's properties or permissions.
      type: object
      properties:
        enabled:
          description: Indicates whether to enable or disable the user.
          type: boolean
        api_roles:
          description: The new customer-level role names of the user.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
        corpus_roles:
          description: New corpus-specific role assignments for the user.
          type: array
          items:
            $ref: '#/components/schemas/CorpusRole'
        agent_roles:
          description: New agent-specific role assignments for the user.
          type: array
          items:
            $ref: '#/components/schemas/AgentRole'
        description:
          description: The description of the user.
          type: string
    ApiKeyRole:
      description: 'Role of the API key. A serving API key can only perform query
        type requests on its corpora. A serving and indexing key can perform both
        indexing and query type requests on its corpora.

        A personal API key has all the same permissions as the creator of the API
        key.'
      type: string
      enum:
      - serving
      - serving_and_indexing
      - personal
    ApiKey:
      description: An API key used to authenticate and authorize requests to the Vectara
        platform.
      type: object
      properties:
        id:
          description: The ID of the API key.
          type: string
          pattern: aky_.*
        name:
          description: The human-readable name of the API key.
          type: string
        secret_key:
          description: The key used in API requests. The key should be kept secure.
          type: string
        enabled:
          description: If this API key is enabled.
          type: boolean
        api_key_role:
          $ref: '#/components/schemas/ApiKeyRole'
        api_policy:
          $ref: '#/components/schemas/ApiPolicy'
    ListApiKeysResponse:
      description: Response containing a list of API keys for the authenticated customer.
      type: object
      properties:
        api_keys:
          description: List of API keys.
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateApiKeyRequest:
      description: Request to create a new API key for authenticating with the platform.
      type: object
      properties:
        name:
          description: The human-readable name of the API key.
          type: string
        api_key_role:
          $ref: '#/components/schemas/ApiKeyRole'
        corpus_keys:
          description: Corpora this API key has roles on if it is not a Personal API
            key. This property should be null or missing if this `api_key_role` is
            `personal`.
          type: array
          items:
            $ref: '#/components/schemas/CorpusKey'
      required:
      - name
      - api_key_role
    UpdateApiKeyRequest:
      description: Request to update an existing API key's properties or permissions.
      type: object
      properties:
        enabled:
          description: Indicates whether to disable or enable an API key.
          type: boolean
    AppClient:
      description: An OAuth application client configuration used for authentication.
      type: object
      properties:
        id:
          description: The Vectara App Client ID. This ID is not used during an OAuth
            flow.  However, the ID used within the Vectara API.
          type: string
          pattern: app_.+$
        name:
          description: The human-readable name of the App Client.
          type: string
        description:
          description: Description of the App Client.
          type: string
        client_id:
          description: The client ID used with the OAuth flow.
          type: string
        client_secret:
          description: The client secret used in API requests.  The secret should
            be kept secure.
          type: string
        api_roles:
          description: The API roles attached to the App Client.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
        api_policy:
          $ref: '#/components/schemas/ApiPolicy'
    ListAppClientsResponse:
      description: Response containing a list of OAuth application clients.
      type: object
      properties:
        app_clients:
          description: List of App Clients.
          type: array
          items:
            $ref: '#/components/schemas/AppClient'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
    CreateClientCredentialsRequest:
      description: Create an App Client which allows you to call Vectara APIs using
        OAuth 2.0 client credentials.
      type: object
      properties:
        name:
          description: Name of the client credentials.
          type: string
        description:
          description: Description of the client credentials.
          type: string
        type:
          description: This will always be the value `client_credentials`.
          type: string
          default: client_credentials
        api_roles:
          description: API roles that the client credentials will have.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
      required:
      - name
      - type
      x-vectaraParents:
      - CreateAppClientRequest
    CreateAppClientRequest:
      description: Request to create a new OAuth application client for the platform.
      type: object
      discriminator:
        propertyName: type
        mapping:
          client_credentials: '#/components/schemas/CreateClientCredentialsRequest'
      oneOf:
      - $ref: '#/components/schemas/CreateClientCredentialsRequest'
      required:
      - type
    UpdateAppClientRequest:
      description: Request to update an existing OAuth application client's properties.
      type: object
      properties:
        description:
          description: The new App Client description.
          type: string
        api_roles:
          description: The new roles attached to the App Client. These roles will
            replace the current roles.
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
    ToolServerId:
      description: Unique identifier for a tool server.
      type: string
      pattern: ^tsr_.*
      example: tsr_rag_search
    ToolServerName:
      description: The human-readable name of a tool server.
      type: string
      minLength: 1
      maxLength: 50
      example: RAG Search Server
    ToolServerType:
      description: The type of tool server.
      type: string
      enum:
      - mcp
      example: mcp
    ToolServerTransport:
      description: The transport protocol to use for connecting to the server.
      type: string
      enum:
      - sse
      example: sse
    ToolServer:
      description: Represents a tool server that can provide various functionalities.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ToolServerId'
        name:
          $ref: '#/components/schemas/ToolServerName'
        type:
          $ref: '#/components/schemas/ToolServerType'
        description:
          description: A detailed description of what this tool server does.
          type: string
          example: Provides RAG search capabilities for documents.
        uri:
          description: The URI of the server.
          type: string
          format: uri
          example: https://api.example.com/sse/
        headers:
          description: Optional HTTP headers to include when connecting to the server.
          type: object
          additionalProperties:
            type: string
          example:
            Content-Type: application/json
        transport:
          $ref: '#/components/schemas/ToolServerTransport'
          default: sse
        enabled:
          description: Whether the tool server is currently enabled and available
            for use.
          type: boolean
          default: true
        metadata:
          description: Arbitrary metadata associated with the tool server.
          type: object
          additionalProperties: true
          example:
            version: '1.0'
        created_at:
          description: Timestamp when the tool server was created.
          type: string
          format: date-time
        updated_at:
          description: Timestamp when the tool server was last updated.
          type: string
          format: date-time
      required:
      - name
      - type
      - uri
      - transport
      - enabled
    ListToolServersResponse:
      description: Response containing a list of tool servers.
      type: object
      properties:
        tool_servers:
          description: List of tool servers.
          type: array
          items:
            $ref: '#/components/schemas/ToolServer'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      required:
      - tool_servers
    CreateToolServerRequest:
      description: Request object for creating a new tool server.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ToolServerName'
        type:
          $ref: '#/components/schemas/ToolServerType'
        description:
          description: A detailed description of what this tool server does.
          type: string
          example: Provides RAG search capabilities for documents.
        uri:
          description: The URI of the tool server.
          type: string
          format: uri
          example: https://api.example.com/rag_search
        headers:
          description: Optional HTTP headers to include when connecting to the server.
          type: object
          additionalProperties:
            type: string
        transport:
          $ref: '#/components/schemas/ToolServerTransport'
          default: sse
        auth:
          $ref: '#/components/schemas/RemoteAuth'
          description: Authentication configuration for connecting to the tool server.
        enabled:
          description: Whether the tool server is currently enabled and available
            for use.
          type: boolean
          default: true
        metadata:
          description: Arbitrary metadata associated with the tool server.
          type: object
          additionalProperties: true
      required:
      - name
      - type
      - uri
      - transport
    UpdateToolServerRequest:
      description: Request object for updating an existing tool server.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ToolServerName'
        description:
          description: A detailed description of what this tool server does.
          type: string
          example: Provides Vectara specific functionalities.
        uri:
          description: The URI of the tool server.
          type: string
          format: uri
          example: https://api.example.com/vectara_mcp/sse/
        headers:
          description: Optional HTTP headers to include when connecting to the server.
          type: object
          additionalProperties:
            type: string
        transport:
          $ref: '#/components/schemas/ToolServerTransport'
        auth:
          $ref: '#/components/schemas/RemoteAuth'
          description: Authentication configuration for connecting to the tool server.
        enabled:
          description: Whether the tool server is currently enabled and available
            for use.
          type: boolean
        metadata:
          description: Arbitrary metadata associated with the tool server.
          type: object
          additionalProperties: true
    ToolId:
      description: Unique identifier for a tool.
      type: string
      pattern: ^tol_.*
      example: tol_123e4567-e89b-12d3-a456-426614174000
    McpToolAnnotations:
      description: Optional hints about tool behaviour/metadata.
      type: object
      properties:
        read_only_hint:
          description: If true, the tool does not modify its environment.
          type: boolean
        destructive_hint:
          description: If true, the tool may perform destructive updates.
          type: boolean
        idempotent_hint:
          description: If true, repeated calls with same args have no additional effect.
          type: boolean
        open_world_hint:
          description: If true, tool interacts with external entities.
          type: boolean
      additionalProperties: true
    McpTool:
      description: An MCP (Model Context Protocol) tool that connects to external
        MCP servers for extended functionality.
      type: object
      properties:
        type:
          description: This should always be `mcp`.
          type: string
          default: mcp
          example: mcp
        id:
          $ref: '#/components/schemas/ToolId'
        server_id:
          description: The unique identifier of the MCP server this tool is associated
            with.
          $ref: '#/components/schemas/ToolServerId'
        name:
          description: Unique identifier for the tool in the MCP server.
          type: string
        title:
          description: Human-readable title of the tool.
          type: string
        description:
          description: A detailed description of what the tool does and how it can
            be used.
          type: string
        enabled:
          description: Whether the tool is currently enabled and available for use.
          type: boolean
          default: true
        created_at:
          description: Timestamp when the tool was created.
          type: string
          format: date-time
        updated_at:
          description: Timestamp when the tool was last updated.
          type: string
          format: date-time
        input_schema:
          description: The schema that defines the expected input structure for the
            MCP tool.
          type: object
          additionalProperties: true
          example:
            type: object
            properties:
              query:
                type: string
                description: The search query to send to the MCP server.
              max_results:
                type: integer
                description: The maximum number of results to return.
        annotations:
          $ref: '#/components/schemas/McpToolAnnotations'
      required:
      - type
      - id
      - name
      - description
      - enabled
      - input_schema
      x-vectaraParents:
      - Tool
    CorporaSearchTool:
      description: A corpora search tool that searches through Vectara corpora to
        find relevant information.
      type: object
      properties:
        type:
          description: This should always be `corpora_search`.
          type: string
          default: corpora_search
          example: corpora_search
        id:
          $ref: '#/components/schemas/ToolId'
        name:
          description: Unique identifier for the tool.
          type: string
        title:
          description: Human-readable title of the tool.
          type: string
        description:
          description: A detailed description of what the tool does and how it can
            be used.
          type: string
        enabled:
          description: Whether the tool is currently enabled and available for use.
          type: boolean
          default: true
        created_at:
          description: Timestamp when the tool was created.
          type: string
          format: date-time
        updated_at:
          description: Timestamp when the tool was last updated.
          type: string
          format: date-time
        input_schema:
          description: The schema that defines the expected input structure for the
            corpora search tool.
          type: object
          additionalProperties: true
          example:
            type: object
            properties:
              query:
                type: string
                description: The search query to execute against the corpora.
      required:
      - type
      - id
      - name
      - description
      - enabled
      - input_schema
      x-vectaraParents:
      - Tool
    WebSearchTool:
      description: A web search tool that searches the internet for relevant information.
      type: object
      properties:
        type:
          description: This should always be `web_search`.
          type: string
          default: web_search
          example: web_search
        id:
          $ref: '#/components/schemas/ToolId'
        name:
          description: Unique identifier for the tool.
          type: string
        title:
          description: Human-readable title of the tool.
          type: string
        description:
          description: A detailed description of what the tool does and how it can
            be used.
          type: string
        enabled:
          description: Whether the tool is currently enabled and available for use.
          type: boolean
          default: true
        created_at:
          description: Timestamp when the tool was created.
          type: string
          format: date-time
        updated_at:
          description: Timestamp when the tool was last updated.
          type: string
          format: date-time
        input_schema:
          description: The schema that defines the expected input structure for the
            web search tool.
          type: object
          additionalProperties: true
          example:
            type: object
            properties:
              query:
                type: string
                description: The search query to execute on the web.
              limit:
                type: integer
                description: The maximum number of results to return.
      required:
      - type
      - id
      - name
      - description
      - enabled
      - input_schema
      x-vectaraParents:
      - Tool
    Tool:
      description: A tool that can be used by agents to perform specific actions or
        operations.
      discriminator:
        propertyName: type
        mapping:
          mcp: '#/components/schemas/McpTool'
          corpora_search: '#/components/schemas/CorporaSearchTool'
          web_search: '#/components/schemas/WebSearchTool'
      oneOf:
      - $ref: '#/components/schemas/McpTool'
      - $ref: '#/components/schemas/CorporaSearchTool'
      - $ref: '#/components/schemas/WebSearchTool'
    ListToolsResponse:
      description: Response containing a list of tools.
      type: object
      properties:
        tools:
          description: List of tools.
          type: array
          items:
            $ref: '#/components/schemas/Tool'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      required:
      - tools
    UpdateMcpToolRequest:
      description: Request object for updating an existing MCP tool.
      type: object
      properties:
        type:
          description: This should always be `mcp`.
          type: string
          default: mcp
          example: mcp
        enabled:
          description: Whether the tool is enabled.
          type: boolean
      required:
      - type
      x-vectaraParents:
      - UpdateToolRequest
    UpdateToolRequest:
      description: Request to update a tool. Supports MCP tools.
      discriminator:
        propertyName: type
        mapping:
          mcp: '#/components/schemas/UpdateMcpToolRequest'
      oneOf:
      - $ref: '#/components/schemas/UpdateMcpToolRequest'
    InstructionId:
      description: The unique identifier for an instruction.
      type: string
      pattern: ins_[0-9a-zA-Z_-]+$
      example: ins_customer_support_init
    InstructionName:
      description: The human-readable name of an instruction.
      type: string
      minLength: 1
      maxLength: 50
      example: Customer Support Initial Instruction
    TemplateType:
      description: The templating engine used for instructions.
      type: string
      enum:
      - velocity
      default: velocity
      example: velocity
    InitialInstruction:
      description: An initial instruction that provides guidance to the agent before
        user messages.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InstructionId'
        type:
          description: The type of instruction.
          type: string
          default: initial
          example: initial
        name:
          $ref: '#/components/schemas/InstructionName'
        description:
          description: A detailed description of what this instruction does.
          type: string
        template_type:
          $ref: '#/components/schemas/TemplateType'
        template:
          description: The instruction template content using the specified template
            engine.
          type: string
          example: 'You are a helpful customer support agent for Acme Corp. Today''s
            date is ${currentDate}. You have access to the following tools: #foreach($tool
            in $tools)${tool.name}#if($foreach.hasNext), #end#end'
        version:
          description: The version identifier for this instruction. This is automatically
            incremented when the instruction is updated.
          type: integer
          minimum: 1
          example: 1
        metadata:
          description: Arbitrary metadata associated with the instruction.
          type: object
          additionalProperties: true
        enabled:
          description: Whether the instruction is currently enabled and available
            for use.
          type: boolean
          default: true
        created_at:
          description: Timestamp when the instruction was created.
          type: string
          format: date-time
        updated_at:
          description: Timestamp when the instruction was last updated.
          type: string
          format: date-time
      required:
      - id
      - type
      - name
      - template_type
      - template
      - version
      - enabled
      x-vectaraParents:
      - Instruction
    Instruction:
      description: An instruction that guides agent behavior.
      discriminator:
        propertyName: type
        mapping:
          initial: '#/components/schemas/InitialInstruction'
      oneOf:
      - $ref: '#/components/schemas/InitialInstruction'
    ListInstructionsResponse:
      description: Response containing a list of instructions.
      type: object
      properties:
        instructions:
          description: List of instructions.
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      required:
      - instructions
      - metadata
    CreateInitialInstructionRequest:
      description: Request object for creating a new initial instruction.
      type: object
      properties:
        type:
          description: The type of instruction to create.
          type: string
          default: initial
          example: initial
        name:
          $ref: '#/components/schemas/InstructionName'
        description:
          description: A detailed description of what this instruction does.
          type: string
          example: Provides initial context and guidelines for customer support interactions
        template_type:
          $ref: '#/components/schemas/TemplateType'
        template:
          description: The instruction template content using the specified template
            engine.
          type: string
          example: 'You are a helpful customer support agent for Acme Corp. Today''s
            date is ${currentDate}. You have access to the following tools: #foreach($tool
            in $tools)${tool.name}#if($foreach.hasNext), #end#end'
        metadata:
          description: Arbitrary metadata associated with the instruction.
          type: object
          additionalProperties: true
          default: {}
          example:
            version: 1.0.0
            author: support-team
        enabled:
          description: Whether the instruction should be enabled upon creation.
          type: boolean
          default: true
          example: true
      required:
      - type
      - name
      - template
      x-vectaraParents:
      - CreateInstructionRequest
    CreateInstructionRequest:
      description: Request to create an instruction. Currently only initial instructions
        are supported.
      discriminator:
        propertyName: type
        mapping:
          initial: '#/components/schemas/CreateInitialInstructionRequest'
      oneOf:
      - $ref: '#/components/schemas/CreateInitialInstructionRequest'
    UpdateInitialInstructionRequest:
      description: Request object for updating an existing initial instruction.
      type: object
      properties:
        type:
          description: The type of instruction to update.
          type: string
          default: initial
          example: initial
        name:
          $ref: '#/components/schemas/InstructionName'
        description:
          description: A detailed description of what this instruction does.
          type: string
          example: Enhanced initial context and guidelines for customer support interactions
        template:
          description: The instruction template content using the specified template
            engine.
          type: string
          example: 'You are an expert customer support agent for Acme Corp. Today''s
            date is ${currentDate}. Available tools: #foreach($tool in $tools)${tool.name}#if($foreach.hasNext),
            #end#end'
        template_type:
          $ref: '#/components/schemas/TemplateType'
        metadata:
          description: Arbitrary metadata associated with the instruction.
          type: object
          additionalProperties: true
          example:
            version: 1.1.0
            author: support-team
            last_reviewed: '2024-01-15'
        enabled:
          description: Whether the instruction is enabled.
          type: boolean
          example: true
      required:
      - type
      x-vectaraParents:
      - UpdateInstructionRequest
    UpdateInstructionRequest:
      description: Request to update an instruction. Currently only initial instructions
        are supported.
      discriminator:
        propertyName: type
        mapping:
          initial: '#/components/schemas/UpdateInitialInstructionRequest'
      oneOf:
      - $ref: '#/components/schemas/UpdateInitialInstructionRequest'
    TestInstructionRequest:
      description: Request to test an instruction with provided context data.
      type: object
      properties:
        context:
          description: Context data to use when rendering the instruction template.
          type: object
          additionalProperties: true
          example:
            currentDate: '2024-01-15'
            companyName: Acme Corp
        tools:
          description: List of tools to include in the instruction context for testing.
          type: array
          items:
            $ref: '#/components/schemas/Tool'
          default: []
          example: []
    TestInstructionResponse:
      description: Response containing the rendered instruction.
      type: object
      properties:
        rendered_instruction:
          description: The instruction template rendered with the provided context.
          type: string
          example: 'You are a helpful customer support agent for Acme Corp. Today''s
            date is 2024-01-15. You have access to the following tools: Web Search,
            Email Sender'
      required:
      - rendered_instruction
    AgentKey:
      description: A unique key that identifies an agent.
      type: string
      pattern: '[0-9a-zA-Z_-]+$'
      minLength: 1
      maxLength: 50
      example: customer_support
    AgentName:
      description: The human-readable name of an agent.
      type: string
      minLength: 1
      maxLength: 50
      example: Customer Support Agent
    InlineMcpToolConfiguration:
      title: InlineMcpToolConfiguration
      description: An MCP tool configuration defined inline in the agent.
      type: object
      properties:
        type:
          type: string
          description: The type of tool configuration, which is always 'mcp' for inline
            MCP tool configurations.
          default: mcp
        tool_id:
          $ref: '#/components/schemas/ToolId'
        argument_override:
          description: "Optional hardcoded arguments for tool calls. The key specifies\
            \ the location in the tool arguments to overide, and the value specifies\
            \ what to override with. The LLM will not be able to change the parameters,\
            \ nor know those values exist within the tool.\n\nThe values can also\
            \ be dynamic references to context values using $ref with dot notation\
            \ path syntax:\n- Static value: \"fixed_value\" or 123\n- Dynamic reference:\
            \ `{\"$ref\": \"session.metadata.field_name\"}`\n\nReferences are resolved\
            \ at runtime from context:\n- session.metadata.* - Access session metadata\
            \ fields\n- agent.metadata.* - Access agent metadata fields\n\nExample:\n\
            \  `{\"query\": {\"$ref\": \".session.metadata.query\"}}`\n\nIf you want\
            \ to have a real value `\"$ref\"` use `\"$$ref\"`, that is you can escape\
            \ the first $ by using $$."
          type: object
          additionalProperties: true
          example:
            custom_param: value
            limit: 10
      required:
      - tool_id
      - type
      x-vectaraParents:
      - AgentToolConfiguration
    CorporaSearchToolParameters:
      description: LLM-exposed parameters for the corpora search tool that can be
        filled in during execution.
      type: object
      properties:
        query:
          description: The search query string, which is the question the user is
            asking. If not provided, will be filled in by the LLM.
          type: string
          maxLength: 5000
          example: Am I allowed to bring pets to work?
      additionalProperties: false
    CorporaSearchQueryConfiguration:
      description: User-configurable settings for corpora search that are not exposed
        to the LLM.
      type: object
      properties:
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        save_history:
          description: Indicates whether to save the query to query history.
          type: boolean
      required:
      - search
    InlineCorporaSearchToolConfiguration:
      title: InlineCorporaSearchToolConfiguration
      description: A corpora search tool configuration defined inline in the agent.
      type: object
      properties:
        type:
          type: string
          description: The type of tool configuration, which is always 'corpora_search'
            for inline corpora search tool configurations.
          default: corpora_search
        argument_override:
          description: Optional hardcoded arguments for the corpus search call such
            as the query. When specified, these values will be used instead of allowing
            the LLM to fill in those parameters.
          $ref: '#/components/schemas/CorporaSearchToolParameters'
        query_configuration:
          description: User-configurable settings for the corpus search that are not
            exposed to the LLM.
          $ref: '#/components/schemas/CorporaSearchQueryConfiguration'
      required:
      - type
      - query_configuration
      x-vectaraParents:
      - AgentToolConfiguration
    WebSearchToolParameters:
      description: Configurable parameters for the web search tool. If not provided,
        will be filled in by the LLM.
      type: object
      properties:
        query:
          description: The search query to execute.
          type: string
          example: latest AI developments 2024
        limit:
          description: Maximum number of results to return.
          type: integer
          minimum: 1
          example: 10
        provider:
          description: Search provider to use.
          type: string
          enum:
          - tavily
          example: tavily
      additionalProperties: false
    InlineWebSearchToolConfiguration:
      title: InlineWebSearchToolConfiguration
      description: A web search tool configuration defined inline in the agent.
      type: object
      properties:
        type:
          type: string
          description: The type of tool configuration, which is always 'web_search'
            for inline web search tool configurations.
          default: web_search
        argument_override:
          description: Optional hardcoded arguments for the web search tool call such
            as limit etc. When specified, these values will be used instead of allowing
            the LLM to fill in those parameters.
          $ref: '#/components/schemas/WebSearchToolParameters'
      required:
      - type
      x-vectaraParents:
      - AgentToolConfiguration
    AgentToolConfiguration:
      title: AgentToolConfiguration
      description: A tool configuration that can be used by an agent, defined inline
        with a specific configuration type.
      discriminator:
        propertyName: type
        mapping:
          mcp: '#/components/schemas/InlineMcpToolConfiguration'
          corpora_search: '#/components/schemas/InlineCorporaSearchToolConfiguration'
          web_search: '#/components/schemas/InlineWebSearchToolConfiguration'
      oneOf:
      - $ref: '#/components/schemas/InlineMcpToolConfiguration'
      - $ref: '#/components/schemas/InlineCorporaSearchToolConfiguration'
      - $ref: '#/components/schemas/InlineWebSearchToolConfiguration'
      example:
      - type: web_search
        argument_override:
          limit: 5
    RetryConfiguration:
      title: RetryConfiguration
      description: Configuration for automatic retry of failed LLM requests with exponential
        backoff.
      type: object
      properties:
        enabled:
          description: Whether retry is enabled. Enabled by default to provide resilience
            against transient failures.
          type: boolean
          default: true
          example: true
        max_retries:
          description: Maximum number of retry attempts after initial failure.
          type: integer
          minimum: 0
          maximum: 10
          default: 3
          example: 3
        initial_backoff_ms:
          description: Initial backoff time in milliseconds before first retry.
          type: integer
          minimum: 100
          maximum: 60000
          default: 1000
          example: 1000
        max_backoff_ms:
          description: Maximum backoff time in milliseconds between retries.
          type: integer
          minimum: 1000
          maximum: 300000
          default: 30000
          example: 30000
        backoff_factor:
          description: Multiplication factor for exponential backoff between retries.
          type: number
          format: double
          minimum: 1
          maximum: 10
          default: 2
          example: 2
    AgentModel:
      title: AgentModel
      description: Configuration for the model used in this step, including the model
        name and arbitrary parameters.
      type: object
      properties:
        name:
          description: The name of the model to use for this step.
          type: string
          example: gpt-4
        parameters:
          description: Arbitrary model-specific parameters that can be passed to the
            model.
          type: object
          additionalProperties: true
          example:
            temperature: 0.7
            max_tokens: 1000
            top_p: 0.9
        retry_configuration:
          $ref: '#/components/schemas/RetryConfiguration'
          description: Optional retry configuration for handling transient failures.
            When not provided, no retry is performed.
      required:
      - name
    InstructionReference:
      description: A reference to an instruction that can be used by an agent. If
        version is not specified, the latest version will be used. Note that when
        the instruction is updated, agents using it will need to be updated to reference
        the new version explicitly.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InstructionId'
        version:
          description: The specific version of the instruction to use. If not specified,
            the latest version will be used.
          type: integer
          minimum: 1
          example: 1
      required:
      - id
    ReferenceInstruction:
      title: ReferenceInstruction
      description: An instruction specified by reference.
      allOf:
      - $ref: '#/components/schemas/InstructionReference'
      - type: object
        properties:
          type:
            type: string
            description: The type of instruction, used for discrimination.
            default: reference
        required:
        - type
      x-vectaraParents:
      - AgentStepInstruction
    InlineInstruction:
      title: InlineInstruction
      description: An instruction defined inline in the request.
      allOf:
      - $ref: '#/components/schemas/CreateInitialInstructionRequest'
      - type: object
        properties:
          type:
            type: string
            description: The type of instruction, used for discrimination.
            default: inline
        required:
        - type
      x-vectaraParents:
      - AgentStepInstruction
    AgentStepInstruction:
      title: AgentStepInstruction
      description: An instruction that can be used in an agent step, either by reference
        or defined inline.
      discriminator:
        propertyName: type
        mapping:
          reference: '#/components/schemas/ReferenceInstruction'
          inline: '#/components/schemas/InlineInstruction'
      oneOf:
      - $ref: '#/components/schemas/ReferenceInstruction'
      - $ref: '#/components/schemas/InlineInstruction'
      example:
      - type: reference
        name: Customer Support Initial Instruction
        version: 1
      - type: inline
        name: Temporary On-the-fly Guideline
        description: A special instruction for this specific step only.
        template_type: velocity
        template: Please prioritize issues tagged with 'urgent' for the next hour.
    DefaultOutputParser:
      title: DefaultOutputParser
      description: Uses native tool calling capabilities and returns output directly
        to the user. This parser leverages the underlying model's built-in tool calling
        functionality and passes responses through without additional processing.
      type: object
      properties:
        type:
          description: The type of output parser, which is always 'default' for this
            parser type.
          type: string
          default: default
          example: default
      required:
      - type
      x-vectaraParents:
      - AgentOutputParser
    AgentOutputParser:
      title: AgentOutputParser
      description: 'Configuration for how the agent''s output should be parsed and
        formatted.


        The output parser determines how the agent''s responses are processed before
        being returned to the user.

        '
      discriminator:
        propertyName: type
        mapping:
          default: '#/components/schemas/DefaultOutputParser'
      oneOf:
      - $ref: '#/components/schemas/DefaultOutputParser'
    ConversationalAgentStep:
      title: ConversationalAgentStep
      description: A step that receives instructions and responds through dialogue.
        This is a step that gets instructions and engages in conversation with users
        based on those instructions. This only type step supported, with no way to
        go next steps. A conversational step responds to an input following its instructions
        and uses the agent tools. The first response from the model will terminate
        processing the input.
      type: object
      properties:
        type:
          description: The type of step, which is always 'conversational' for this
            step type.
          type: string
          default: conversational
          example: conversational
        instructions:
          description: List of instructions that guide the agent's behavior in this
            step. If no instructions are given, the agent is instructed to be helpful
            and use tools.
          type: array
          items:
            $ref: '#/components/schemas/AgentStepInstruction'
        output_parser:
          $ref: '#/components/schemas/AgentOutputParser'
      required:
      - type
      - instructions
      - output_parser
      x-vectaraParents:
      - AgentStep
    AgentStep:
      title: AgentStep
      description: A step in an agent's execution flow that defines how the agent
        processes and responds to input.
      discriminator:
        propertyName: type
        mapping:
          conversational: '#/components/schemas/ConversationalAgentStep'
      oneOf:
      - $ref: '#/components/schemas/ConversationalAgentStep'
    Agent:
      description: An AI agent that can use tools to provide intelligent responses
        and actions.
      type: object
      properties:
        key:
          $ref: '#/components/schemas/AgentKey'
        name:
          $ref: '#/components/schemas/AgentName'
        description:
          description: A detailed description of the agent's purpose and capabilities.
          type: string
          example: An AI agent specialized in handling customer support inquiries
            using company documentation and support tools.
        tool_configurations:
          description: A map of tool configurations available to the agent. The key
            is the name of the tool configuration and the value is an agent tool configuration.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AgentToolConfiguration'
            nullable: true
          example:
            customer_search:
              type: corpora_search
              argument_override:
                query: customer support documentation
        model:
          $ref: '#/components/schemas/AgentModel'
        first_step:
          $ref: '#/components/schemas/AgentStep'
        metadata:
          description: Arbitrary metadata associated with the agent for customization
            and configuration.
          type: object
          additionalProperties: true
          example:
            department: customer_service
            version: 1.2.0
            owner: support-team
        enabled:
          description: Whether the agent is currently enabled and available for use.
          type: boolean
          default: true
          example: true
        created_at:
          description: Timestamp when the agent was created.
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
        updated_at:
          description: Timestamp when the agent was last updated.
          type: string
          format: date-time
          example: '2024-01-16T14:45:00Z'
      required:
      - key
      - name
      - tool_configurations
      - model
      - first_step
      - enabled
    ListAgentsResponse:
      description: Response containing a list of agents.
      type: object
      properties:
        agents:
          description: List of agents.
          type: array
          items:
            $ref: '#/components/schemas/Agent'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      required:
      - agents
      - metadata
    CreateAgentRequest:
      description: Request object for creating a new agent.
      type: object
      properties:
        key:
          $ref: '#/components/schemas/AgentKey'
          description: A user provided key that uniquely identifies this agent. If
            not provided, one will be auto-generated based on the agent name.
        name:
          $ref: '#/components/schemas/AgentName'
        description:
          description: A detailed description of the agent's purpose and capabilities.
          type: string
          example: An AI agent specialized in handling customer support inquiries
            using company documentation and support tools.
        tool_configurations:
          description: A map of tool configurations available to the agent. The key
            is the name of the tool configuration and the value is the AgentToolConfiguration.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AgentToolConfiguration'
            nullable: true
          example:
            customer_search:
              type: corpora_search
              argument_override:
                query: customer support documentation
        model:
          $ref: '#/components/schemas/AgentModel'
        first_step:
          $ref: '#/components/schemas/AgentStep'
        metadata:
          description: Arbitrary metadata associated with the agent for customization
            and configuration.
          type: object
          additionalProperties: true
          default: {}
          example:
            department: customer_service
            version: 1.0.0
            owner: support-team
        enabled:
          description: Whether the agent should be enabled upon creation.
          type: boolean
          default: true
          example: true
      required:
      - name
      - tool_configurations
      - model
      - first_step
    ReplaceAgentRequest:
      description: Request object for replacing an existing agent completely.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AgentName'
        description:
          description: A detailed description of the agent's purpose and capabilities.
          type: string
          example: An AI agent specialized in handling customer support inquiries
            using company documentation and support tools.
        tool_configurations:
          description: A map of tool configurations available to the agent. The key
            is the name of the tool configuration and the value is an agent tool configuration.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AgentToolConfiguration'
            nullable: true
          example:
            customer_search:
              type: corpora_search
              argument_override:
                query: customer support documentation
        model:
          $ref: '#/components/schemas/AgentModel'
        first_step:
          $ref: '#/components/schemas/AgentStep'
        metadata:
          description: Arbitrary metadata associated with the agent for customization
            and configuration.
          type: object
          additionalProperties: true
          default: {}
          example:
            department: customer_service
            version: 1.2.0
            owner: support-team
        enabled:
          description: Whether the agent is enabled.
          type: boolean
          default: true
          example: true
      required:
      - name
      - tool_configurations
      - model
      - first_step
    UpdateAgentRequest:
      description: Request object for updating an existing agent.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AgentName'
        description:
          description: A detailed description of the agent's purpose and capabilities.
          type: string
          example: An enhanced AI agent specialized in handling customer support inquiries.
        tool_configurations:
          description: A map of tool configurations available to the agent. The key
            is the name of the tool configuration and the value is an agent tool configuration.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AgentToolConfiguration'
            nullable: true
          example:
            customer_search:
              type: corpora_search
              argument_override:
                query: customer support documentation
        model:
          $ref: '#/components/schemas/AgentModel'
        first_step:
          $ref: '#/components/schemas/AgentStep'
        metadata:
          description: Arbitrary metadata associated with the agent for customization
            and configuration.
          type: object
          additionalProperties: true
          example:
            department: customer_service
            version: 1.1.0
            owner: support-team
            last_reviewed: '2024-01-15'
        enabled:
          description: Whether the agent is enabled.
          type: boolean
          example: true
    AgentSessionKey:
      description: A unique key that identifies an agent session.
      type: string
      pattern: '[0-9a-zA-Z_-]+$'
      minLength: 1
      maxLength: 50
      example: customer_support_chat
    AgentSession:
      description: A session for interacting with an agent, allowing conversation
        context.
      type: object
      properties:
        key:
          $ref: '#/components/schemas/AgentSessionKey'
        agent_key:
          $ref: '#/components/schemas/AgentKey'
        name:
          description: Human-readable name for the session.
          type: string
          example: Customer Support Session
        description:
          description: Optional description of the session purpose or context.
          type: string
          example: Helping customer troubleshoot widget installation issues
        metadata:
          description: Arbitrary metadata associated with the session.
          type: object
          additionalProperties: true
          example:
            customer_id: '12345'
            priority: high
            channel: web_chat
        enabled:
          description: Whether the session is currently active and can accept new
            messages.
          type: boolean
          default: true
          example: true
        tti_minutes:
          description: Time-to-idle in minutes for the session. If no events occur
            in the session for this duration, the session will be automatically deleted.
            If not specified, the session will not expire.
          type: integer
          format: int64
          minimum: 0
          default: 0
          example: 60
        created_at:
          description: Timestamp when the session was created.
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
      required:
      - id
      - name
      - agent_key
      - enabled
      - created_at
    ListAgentSessionsResponse:
      description: Response containing a list of agent sessions.
      type: object
      properties:
        sessions:
          description: List of agent sessions.
          type: array
          items:
            $ref: '#/components/schemas/AgentSession'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      required:
      - sessions
      - metadata
    CreateAgentSessionRequest:
      description: Request object for creating a new agent session.
      type: object
      properties:
        key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: A user provided key that uniquely identifies this session.
            If not provided, one will be auto-generated based on the session name.
        name:
          description: Human-readable name for the session.
          type: string
          example: Customer Support Session
        description:
          description: Optional description of the session purpose or context.
          type: string
          example: Helping customer troubleshoot issues
        metadata:
          description: Arbitrary metadata associated with the session.
          type: object
          additionalProperties: true
          default: {}
          example:
            customer_id: '12345'
            priority: medium
            channel: web_chat
        enabled:
          description: Whether the session should be enabled upon creation.
          type: boolean
          default: true
          example: true
        tti_minutes:
          description: Time-to-idle in minutes for the session. If no events occur
            in the session for this duration, the session will be automatically deleted.
            If set to 0, the session will not expire.
          type: integer
          format: int64
          minimum: 0
          default: 0
          example: 60
    UpdateAgentSessionRequest:
      description: Request object for updating an existing agent session.
      type: object
      properties:
        name:
          description: Human-readable name for the session.
          type: string
          example: Updated Session Name
        description:
          description: Optional description of the session purpose or context.
          type: string
          example: Updated session description
        metadata:
          description: Arbitrary metadata associated with the session.
          type: object
          additionalProperties: true
          example:
            customer_id: '12345'
            priority: high
            status: escalated
        enabled:
          description: Whether the session is enabled.
          type: boolean
          example: false
        tti_minutes:
          description: Time-to-idle in minutes for the session. If no events occur
            in the session for this duration, the session will be automatically deleted.
            If set to 0, the session will not expire.
          type: integer
          format: int64
          minimum: 0
          example: 60
    AgentTextInput:
      description: A text input for an agent message.
      type: object
      properties:
        type:
          description: The type of input.
          type: string
          default: text
          example: text
        content:
          description: The text content of the input.
          type: string
          example: I need help with my widget installation
      required:
      - type
      - content
      x-vectaraParents:
      - AgentInput
    AgentInput:
      description: An input that can be provided to an agent message.
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/AgentTextInput'
      oneOf:
      - $ref: '#/components/schemas/AgentTextInput'
    InputMessageEvent:
      title: InputMessageEvent
      description: An input message event from a user.
      type: object
      properties:
        id:
          description: The unique identifier for the event.
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_user_001
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to.
        type:
          description: The type of event.
          type: string
          default: input_message
          example: input_message
        messages:
          description: List of inputs that make up this message.
          type: array
          items:
            $ref: '#/components/schemas/AgentInput'
          example:
          - type: text
            content: I need help with my widget installation
        created_at:
          description: Timestamp when the event was created.
          type: string
          format: date-time
          example: '2024-01-15T10:35:00Z'
      required:
      - id
      - session_key
      - type
      - messages
      - created_at
      x-vectaraParents:
      - AgentEvent
      - AgentStreamedResponse
    ToolInputEvent:
      title: ToolInputEvent
      description: An event representing input to a tool call.
      type: object
      properties:
        id:
          description: The unique identifier for the event.
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_tool_input_001
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to.
        type:
          description: The type of event.
          type: string
          default: tool_input
          example: tool_input
        tool_call_id:
          description: The identifier for the tool call.
          type: string
          example: call_tool_search_001
        tool_configuration_name:
          description: The name of the tool configuration being invoked, as defined
            in the agent's tool_configurations map.
          type: string
          example: customer_search
        tool_name:
          description: Name of the tool being called.
          type: string
          example: web_search
        tool_input:
          description: Input data for the tool.
          type: object
          additionalProperties: true
          example:
            query: weather in San Francisco
        created_at:
          description: Timestamp when the event was created.
          type: string
          format: date-time
          example: '2024-01-15T10:35:00Z'
      required:
      - id
      - session_key
      - type
      - tool_call_id
      - tool_configuration_name
      - tool_name
      - tool_input
      - created_at
      x-vectaraParents:
      - AgentEvent
      - AgentStreamedResponse
    ToolOutputEvent:
      title: ToolOutputEvent
      description: An event representing output from a tool call.
      type: object
      properties:
        id:
          description: The unique identifier for the event.
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_tool_output_001
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to.
        type:
          description: The type of event.
          type: string
          default: tool_output
          example: tool_output
        tool_call_id:
          description: The unique identifier for the tool call, matching the input
            event.
          type: string
          example: call_tool_search_001
        tool_configuration_name:
          description: The name of the tool configuration that was invoked, as defined
            in the agent's tool_configurations map.
          type: string
          example: customer_search
        tool_name:
          description: Name of the tool that was called.
          type: string
          example: web_search
        tool_output:
          description: Output data from the tool.
          type: object
          additionalProperties: true
          example:
            result: "Current weather is 70\xB0F and sunny"
        created_at:
          description: Timestamp when the event was created.
          type: string
          format: date-time
          example: '2024-01-15T10:35:00Z'
      required:
      - id
      - session_key
      - type
      - tool_call_id
      - tool_configuration_name
      - tool_name
      - tool_output
      - created_at
      x-vectaraParents:
      - AgentEvent
      - AgentStreamedResponse
    ThinkingEvent:
      title: ThinkingEvent
      description: An event representing chain-of-thought thinking by the agent.
      type: object
      properties:
        id:
          description: The unique identifier for the event.
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_thinking_001
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to.
        type:
          description: The type of event.
          type: string
          default: thinking
          example: thinking
        content:
          description: Human-readable content of the reasoning process.
          type: string
          example: Analyzing user request and considering available options
        created_at:
          description: Timestamp when the event was created.
          type: string
          format: date-time
          example: '2024-01-15T10:35:00Z'
      required:
      - id
      - session_key
      - type
      - created_at
      x-vectaraParents:
      - AgentEvent
      - AgentStreamedResponse
    AgentOutputEvent:
      title: AgentOutputEvent
      description: An event representing a complete agent response.
      type: object
      properties:
        id:
          description: The unique identifier for the event.
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_output_001
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to.
        type:
          description: The type of event.
          type: string
          default: agent_output
          example: agent_output
        content:
          description: The complete agent response content.
          type: string
          example: Hello! I can help you with your widget installation. Let me guide
            you through the process.
        created_at:
          description: Timestamp when the event was created.
          type: string
          format: date-time
          example: '2024-01-15T10:35:00Z'
      required:
      - id
      - session_key
      - type
      - content
      - created_at
      x-vectaraParents:
      - AgentEvent
      - AgentStreamedResponse
    ContextLimitExceededEvent:
      title: ContextLimitExceededEvent
      description: An event indicating the current request exceeded the LLM's context
        limit.
      type: object
      properties:
        id:
          description: The unique identifier for the event
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to
        type:
          description: The type of event
          type: string
          default: context_limit_exceeded
        context_limit:
          description: The maximum number of tokens allowed by the model
          type: integer
          format: int64
          example: 128000
        actual_tokens:
          description: The actual number of tokens in the request
          type: integer
          format: int64
          example: 140658
        message:
          description: Human-readable error message
          type: string
          example: 'Context limit exceeded: 140658 tokens used, 128000 limit'
        created_at:
          description: Timestamp when the event was created
          type: string
          format: date-time
      required:
      - id
      - session_key
      - type
      - message
      - created_at
      x-vectaraParents:
      - AgentEvent
      - AgentStreamedResponse
    AgentEvent:
      description: An event in an agent session conversation.
      type: object
      discriminator:
        propertyName: type
        mapping:
          input_message: '#/components/schemas/InputMessageEvent'
          tool_input: '#/components/schemas/ToolInputEvent'
          tool_output: '#/components/schemas/ToolOutputEvent'
          thinking: '#/components/schemas/ThinkingEvent'
          agent_output: '#/components/schemas/AgentOutputEvent'
          context_limit_exceeded: '#/components/schemas/ContextLimitExceededEvent'
      oneOf:
      - $ref: '#/components/schemas/InputMessageEvent'
      - $ref: '#/components/schemas/ToolInputEvent'
      - $ref: '#/components/schemas/ToolOutputEvent'
      - $ref: '#/components/schemas/ThinkingEvent'
      - $ref: '#/components/schemas/AgentOutputEvent'
      - $ref: '#/components/schemas/ContextLimitExceededEvent'
      properties:
        id:
          description: The unique identifier for the event.
          type: string
          pattern: aev_[0-9a-zA-Z_-]+$
          example: aev_user_001
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session this event belongs to.
        type:
          description: The type of event.
          type: string
          enum:
          - input_message
          - tool_input
          - tool_output
          - thinking
          - agent_output
          - context_limit_exceeded
          example: input_message
        created_at:
          description: Timestamp when the event was created.
          type: string
          format: date-time
          example: '2024-01-15T10:35:00Z'
      required:
      - id
      - session_key
      - type
      - created_at
    ListAgentEventsResponse:
      description: Response containing a list of agent events.
      type: object
      properties:
        events:
          description: List of agent events.
          type: array
          items:
            $ref: '#/components/schemas/AgentEvent'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      required:
      - events
      - metadata
    CreateInputEvent:
      description: Request object for creating a new input event (user text input
        only).
      type: object
      properties:
        type:
          description: The type of event.
          type: string
          enum:
          - input_message
          default: input_message
          example: input_message
        messages:
          description: List of inputs that make up this event.
          type: array
          items:
            $ref: '#/components/schemas/AgentInput'
          example:
          - type: text
            content: I need help with my widget installation
        stream_response:
          description: Indicates whether the response should be streamed or not.
          type: boolean
          default: false
      required:
      - type
      - messages
    AgentResponse:
      description: Response containing the complete list of events generated by an
        agent.
      type: object
      properties:
        events:
          description: List of all events generated during agent processing.
          type: array
          items:
            $ref: '#/components/schemas/AgentEvent'
        session_key:
          $ref: '#/components/schemas/AgentSessionKey'
          description: The key of the session where these events occurred.
      required:
      - events
      - session_key
    StreamingAgentOutput:
      title: StreamingAgentOutput
      description: A streaming chunk of agent output (SSE only, not stored).
      type: object
      properties:
        type:
          description: The type of streaming event.
          type: string
          default: streaming_agent_output
          example: streaming_agent_output
        content:
          description: The text chunk content.
          type: string
          example: Hello, I can help you with
      required:
      - type
      - content
      x-vectaraParents:
      - AgentStreamedResponse
    StreamingAgentOutputEnd:
      title: StreamingAgentOutputEnd
      description: Signals the end of streaming agent output (SSE only, not stored).
      type: object
      properties:
        type:
          description: The type of streaming event.
          type: string
          default: streaming_agent_output_end
          example: streaming_agent_output_end
      required:
      - type
      x-vectaraParents:
      - AgentStreamedResponse
    StreamingThinking:
      title: StreamingThinking
      description: A streaming chunk of agent thinking (SSE only, not stored).
      type: object
      properties:
        type:
          description: The type of streaming event.
          type: string
          default: streaming_thinking
          example: streaming_thinking
        content:
          description: The thinking chunk content.
          type: string
          example: Let me think about this step
      required:
      - type
      - content
      x-vectaraParents:
      - AgentStreamedResponse
    StreamingThinkingEnd:
      title: StreamingThinkingEnd
      description: Signals the end of streaming thinking (SSE only, not stored).
      type: object
      properties:
        type:
          description: The type of streaming event.
          type: string
          default: streaming_thinking_end
          example: streaming_thinking_end
      required:
      - type
      x-vectaraParents:
      - AgentStreamedResponse
    AgentStreamedResponse:
      description: An individual event sent with Server-sent Events (SSE) when the
        agent response is streamed.
      type: object
      discriminator:
        propertyName: type
        mapping:
          streaming_agent_output: '#/components/schemas/StreamingAgentOutput'
          streaming_agent_output_end: '#/components/schemas/StreamingAgentOutputEnd'
          streaming_thinking: '#/components/schemas/StreamingThinking'
          streaming_thinking_end: '#/components/schemas/StreamingThinkingEnd'
          tool_input: '#/components/schemas/ToolInputEvent'
          tool_output: '#/components/schemas/ToolOutputEvent'
          context_limit_exceeded: '#/components/schemas/ContextLimitExceededEvent'
          error: '#/components/schemas/StreamError'
          end: '#/components/schemas/StreamResponseEnd'
      oneOf:
      - $ref: '#/components/schemas/StreamingAgentOutput'
      - $ref: '#/components/schemas/StreamingAgentOutputEnd'
      - $ref: '#/components/schemas/StreamingThinking'
      - $ref: '#/components/schemas/StreamingThinkingEnd'
      - $ref: '#/components/schemas/ToolInputEvent'
      - $ref: '#/components/schemas/ToolOutputEvent'
      - $ref: '#/components/schemas/ContextLimitExceededEvent'
      - $ref: '#/components/schemas/StreamError'
      - $ref: '#/components/schemas/StreamResponseEnd'
