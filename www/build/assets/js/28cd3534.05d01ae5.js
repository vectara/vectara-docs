"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[6771],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>v});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,v=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(v,o(o({ref:t},c),{},{components:a})):n.createElement(v,o({ref:t},c))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},44276:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={id:"RestUploadFile.java",title:"RestUploadFile.java",sidebar_label:"Java"},o=void 0,s={unversionedId:"getting-started-samples/RestUploadFile.java",id:"getting-started-samples/RestUploadFile.java",title:"RestUploadFile.java",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at java/rest/src/main/java/com/vectara/examples/rest/RestUploadFile.java",source:"@site/docs/getting-started-samples/RestUploadFile.java.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/RestUploadFile.java",permalink:"/docs/getting-started-samples/RestUploadFile.java",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/RestUploadFile.java.md",tags:[],version:"current",frontMatter:{id:"RestUploadFile.java",title:"RestUploadFile.java",sidebar_label:"Java"},sidebar:"someSidebar",previous:{title:"Supported File Types",permalink:"/docs/indexing-apis/file-upload-filetypes"},next:{title:"NodeJS",permalink:"/docs/getting-started-samples/upload_file.js"}},l={},p=[],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,r.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/java/rest/src/main/java/com/vectara/examples/rest/RestUploadFile.java"},"java/rest/src/main/java/com/vectara/examples/rest/RestUploadFile.java")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="java/rest/src/main/java/com/vectara/examples/rest/RestUploadFile.java"',title:'"java/rest/src/main/java/com/vectara/examples/rest/RestUploadFile.java"'},'package com.vectara.examples.rest;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.math.BigInteger;\nimport java.net.URI;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.nio.file.Paths;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Random;\n\npublic class RestUploadFile {\n  \n  /**\n   * Indexes some dummy data to a pre-created corpus in a customer account.\n   *\n   * @param jwtToken A valid JWT token.\n   * @param indexingUrl Indexing URL at which gRPC endpoints are available.\n   * @param customerId The unique customer ID in the Vectara platform.\n   * @param corpusId The unique corpus ID.\n   * @return success or failure.\n   */\n  public static boolean indexFile(\n      String jwtToken, String indexingUrl, long customerId, long corpusId) {\n    Map<Object, Object> data = new LinkedHashMap<>();\n    data.put("c", customerId);\n    data.put("o", corpusId);\n    String filePath = loadFileFromResources();\n    if (filePath == null) {\n      return false;\n    }\n    data.put("file", Paths.get(filePath));\n    // Random 256 length string is used as multipart boundary\n    String boundary = new BigInteger(256, new Random()).toString();\n    try {\n      HttpRequest.Builder builder =\n          HttpRequest.newBuilder()\n              .uri(URI.create(String.format("https://%s/v1/upload", indexingUrl)))\n              .header("Content-Type", "multipart/form-data;boundary=" + boundary)\n              .POST(BodyPublisherHelper.ofMultipartData(data, boundary));\n      builder.header("Authorization", "Bearer " + jwtToken);\n      HttpRequest request = builder.build();\n      HttpResponse<String> response = RestUtil.newHttpClient().send(request, BodyHandlers.ofString());\n      System.out.printf("Index response: %s%n", response.toString());\n      return true;\n    } catch (Exception e) {\n      e.printStackTrace();\n      return false;\n    }\n  }\n\n  private static String loadFileFromResources() {\n    try {\n      InputStream in = RestUploadFile.class.getResourceAsStream("/upload.pdf");\n      File tempFile = File.createTempFile("temp", ".pdf");\n      in.transferTo(new FileOutputStream(tempFile));\n      return tempFile.getAbsolutePath();\n    } catch (Exception e) {\n      e.printStackTrace();\n      return null;\n    }\n  }\n\n}\n\n')))}u.isMDXComponent=!0}}]);