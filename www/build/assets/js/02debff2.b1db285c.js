"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[6269],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(g,s(s({ref:t},l),{},{components:n})):a.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={id:"RestIndexData.cs",title:"RestIndexData.cs",sidebar_label:"C#"},s=void 0,o={unversionedId:"getting-started-samples/RestIndexData.cs",id:"getting-started-samples/RestIndexData.cs",title:"RestIndexData.cs",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at csharp/rest/RestIndexData.cs",source:"@site/docs/getting-started-samples/RestIndexData.cs.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/RestIndexData.cs",permalink:"/docs/getting-started-samples/RestIndexData.cs",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/RestIndexData.cs.md",tags:[],version:"current",frontMatter:{id:"RestIndexData.cs",title:"RestIndexData.cs",sidebar_label:"C#"},sidebar:"someSidebar",previous:{title:"API Definition",permalink:"/docs/indexing-apis/indexing"},next:{title:"Java",permalink:"/docs/getting-started-samples/RestIndex.java"}},d={},c=[],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,r.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/csharp/rest/RestIndexData.cs"},"csharp/rest/RestIndexData.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="csharp/rest/RestIndexData.cs"',title:'"csharp/rest/RestIndexData.cs"'},'using Microsoft.Extensions.FileProviders;\nusing System.Net.Http.Headers;\nusing System.Reflection;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\n\nclass RestIndexData\n{\n    private static Stream ReadFileFromResource(String dir, String fileName)\n    {\n        var embeddedProvider = new EmbeddedFileProvider(Assembly.GetExecutingAssembly());\n        return embeddedProvider.GetFileInfo($"{dir}/{fileName}").CreateReadStream();\n    }\n\n    /// <summary>\n    /// Generates a random key based on the size passed.\n    /// </summary>\n    private static string GetRandomKey(int size)\n    {\n        char[] chars =\n            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".ToCharArray();\n\n        byte[] data = new byte[4 * size];\n        using (var crypto = RandomNumberGenerator.Create())\n        {\n            crypto.GetBytes(data);\n        }\n        StringBuilder result = new StringBuilder(size);\n        for (int i = 0; i < size; i++)\n        {\n            var rnd = BitConverter.ToUInt32(data, i * 4);\n            var idx = rnd % chars.Length;\n\n            result.Append(chars[idx]);\n        }\n        return result.ToString();\n    }\n\n    /// <summary>\n    /// Indexes data to a pre-created corpus in a customer account using FileUpload API.\n    /// </summary>\n    /// <param name="customerId"> The unique customer ID in Vectara platform. </param>\n    /// <param name="corpusId"> The corpus ID to which data will be indexed. </param>\n    /// <param name="indexingEndpoint"> Indexing API endpoint to which calls will be directed. </param>\n    /// <param name="jwtToken"> A valid authentication token. </param>\n    public static void IndexViaUpload(long customerId, long corpusId, String indexingEndpoint, String jwtToken)\n    {\n        using (var client = new HttpClient())\n        {\n            try\n            {\n                var request = new HttpRequestMessage\n                {\n                    RequestUri = new Uri($"https://{indexingEndpoint}/v1/upload"),\n                    Method = HttpMethod.Post,\n                };\n                // Getting a randomly generated key that will be used as boundary in \n                // multipart/form-data request.\n                String boundary = GetRandomKey(8);\n                var multipartContent = new MultipartFormDataContent(boundary);\n                multipartContent.Add(new StringContent(customerId.ToString()), name: "c");\n                multipartContent.Add(new StringContent(corpusId.ToString()), name: "o");\n\n                // File\n                String fileName = "upload.pdf";\n                var fileStreamContent = new StreamContent(ReadFileFromResource("pdf", fileName));\n                multipartContent.Add(fileStreamContent, name: "file", fileName: fileName);\n                fileStreamContent.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");\n\n                request.Content = multipartContent;\n                request.Content.Headers.Remove("Content-Type");\n                request.Content.Headers.Add("Content-Type", "multipart/form-data;boundary=" + boundary);\n                request.Headers.Add("Authorization", $"Bearer {jwtToken}");\n\n                HttpResponseMessage response = client.Send(request);\n                String result = response.Content.ReadAsStringAsync().Result;\n\n                Console.WriteLine(result);\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.Message);\n                return;\n            }\n        }\n    }\n\n    /// <summary>\n    /// Indexes some data to a pre-created corpus in a customer account using index API.\n    /// </summary>\n    /// <param name="customerId"> The unique customer ID in Vectara platform. </param>\n    /// <param name="corpusId"> The corpus ID to which data will be indexed. </param>\n    /// <param name="indexingEndpoint"> Indexing API endpoint to which calls will be directed. </param>\n    /// <param name="jwtToken"> A valid authentication token. </param>\n    public static void Index(long customerId, long corpusId, String indexingEndpoint, String jwtToken)\n    {\n        using (var client = new HttpClient())\n        {\n            try\n            {\n                var request = new HttpRequestMessage\n                {\n                    RequestUri = new Uri($"https://{indexingEndpoint}/v1/index"),\n                    Method = HttpMethod.Post,\n                };\n\n                Dictionary<String, Object> indexData = new();\n                Dictionary<String, Object> document = new();\n                Dictionary<String, Object> section = new();\n                Dictionary<String, Object> docMetadata = new();\n                Dictionary<String, Object> sectionMetadata = new();\n\n                sectionMetadata.Add("SectionHeader", "Aloha!");\n                section.Add("text", "Some dummy text");\n                section.Add("metadataJson", JsonSerializer.Serialize(sectionMetadata));\n\n                docMetadata.Add("Title", "Vectara");\n                // Doc id should be unique for every document within this corpus.\n                document.Add("documentId", "doc-id-456789");\n                document.Add("title", "A Dummy title.");\n                document.Add("metadataJson", JsonSerializer.Serialize(docMetadata));\n                // Sections can be 0 to many. That\'s why following code creates a list and adds\n                // one section to that list. You can add as many as you like.\n                document.Add("section", new List<Object>() {section});\n\n                indexData.Add("customerId", customerId);\n                indexData.Add("corpusId", corpusId);\n                indexData.Add("document", document);\n\n                string jsonData = JsonSerializer.Serialize(indexData);\n\n                request.Content = new StringContent(jsonData);\n                request.Content.Headers.Remove("Content-Type");\n                request.Content.Headers.Add("Content-Type", "application/json");\n\n                request.Headers.Add("customer-id", customerId.ToString());\n                request.Headers.Add("Authorization", $"Bearer {jwtToken}");\n\n                HttpResponseMessage response = client.Send(request);\n                String result = response.Content.ReadAsStringAsync().Result;\n\n                Console.WriteLine(result);\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.Message);\n                return;\n            }\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);