"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[1324],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=i(r),m=s,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[l]="string"==typeof e?e:s,o[1]=p;for(var i=2;i<a;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},97318:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>p,toc:()=>i});var n=r(87462),s=(r(67294),r(3905));const a={id:"rest_create_corpus.py",title:"rest_create_corpus.py",sidebar_label:"Python"},o=void 0,p={unversionedId:"getting-started-samples/rest_create_corpus.py",id:"getting-started-samples/rest_create_corpus.py",title:"rest_create_corpus.py",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at python/vectara-rest/restcreatecorpus.py",source:"@site/docs/getting-started-samples/rest_create_corpus.py.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/rest_create_corpus.py",permalink:"/docs/getting-started-samples/rest_create_corpus.py",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/rest_create_corpus.py.md",tags:[],version:"current",frontMatter:{id:"rest_create_corpus.py",title:"rest_create_corpus.py",sidebar_label:"Python"},sidebar:"someSidebar",previous:{title:"PHP",permalink:"/docs/getting-started-samples/createCorpus.php"},next:{title:"API Definition",permalink:"/docs/admin-apis/delete-corpus"}},c={},i=[],u={toc:i};function l(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,s.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/python/vectara-rest/rest_create_corpus.py"},"python/vectara-rest/rest_create_corpus.py")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="python/vectara-rest/rest_create_corpus.py"',title:'"python/vectara-rest/rest_create_corpus.py"'},'"""Simple example of using the Vectara REST API for creating a corpus.\n"""\n\nimport json\nimport logging\nimport requests\n\ndef _get_create_corpus_json():\n    """ Returns a create corpus json. """\n    corpus = {}\n    corpus["name"] = "Vectara Test Corpus(Python)"\n    corpus["description"] = "An example corpus generated via REST API from Python code."\n\n    return json.dumps({"corpus":corpus})\n\ndef create_corpus(customer_id: int, admin_address: str, jwt_token: str):\n    """Create a corpus.\n    Args:\n        customer_id: Unique customer ID in vectara platform.\n        admin_address: Address of the admin server. e.g., api.vectara.io\n        jwt_token: A valid Auth token.\n\n    Returns:\n        (response, True) in case of success and returns (error, False) in case of failure.\n    """\n\n    post_headers = {\n        "customer-id": f"{customer_id}",\n        "Authorization": f"Bearer {jwt_token}"\n    }\n    response = requests.post(\n        f"https://{admin_address}/v1/create-corpus",\n        data=_get_create_corpus_json(),\n        verify=True,\n        headers=post_headers)\n\n    if response.status_code != 200:\n        logging.error("Create Corpus failed with code %d, reason %s, text %s",\n                       response.status_code,\n                       response.reason,\n                       response.text)\n        return response, False\n    return response, True\n')))}l.isMDXComponent=!0}}]);