"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[7474],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,g=l["".concat(c,".").concat(m)]||l[m]||d[m]||s;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const s={id:"RestQuery.java",title:"RestQuery.java",sidebar_label:"Java"},o=void 0,i={unversionedId:"getting-started-samples/RestQuery.java",id:"getting-started-samples/RestQuery.java",title:"RestQuery.java",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at java/rest/src/main/java/com/vectara/examples/rest/RestQuery.java",source:"@site/docs/getting-started-samples/RestQuery.java.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/RestQuery.java",permalink:"/docs/getting-started-samples/RestQuery.java",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/RestQuery.java.md",tags:[],version:"current",frontMatter:{id:"RestQuery.java",title:"RestQuery.java",sidebar_label:"Java"},sidebar:"someSidebar",previous:{title:"C#",permalink:"/docs/getting-started-samples/RestQueryData.cs"},next:{title:"NodeJS",permalink:"/docs/getting-started-samples/query.js"}},c={},p=[],u={toc:p};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,a.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/java/rest/src/main/java/com/vectara/examples/rest/RestQuery.java"},"java/rest/src/main/java/com/vectara/examples/rest/RestQuery.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="java/rest/src/main/java/com/vectara/examples/rest/RestQuery.java"',title:'"java/rest/src/main/java/com/vectara/examples/rest/RestQuery.java"'},'package com.vectara.examples.rest;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.net.URI;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.util.Iterator;\n\npublic class RestQuery {\n\n  /**\n   * Queries from Vectara Serving platform.\n   *\n   * @param jwtToken A valid JWT token.\n   * @param servingUrl Serving URL at which gRPC endpoints are available.\n   * @param query The query text.\n   * @param customerId The unique customer ID in the Vectara platform.\n   * @param corpusId The unique corpus ID.\n   * @return success or failure.\n   */\n  public static boolean queryData(\n      String jwtToken, String servingUrl, String query, long customerId, long corpusId) {\n    try {\n      String queryJson =\n          String.format(\n              "{\\"query\\":"\n                  + "["\n                    + "{"\n                      + "\\"query\\":\\"%s\\","\n                      + "\\"numResults\\":10,"\n                      + "\\"corpusKey\\":"\n                      + "["\n                        + "{"\n                          + "\\"customerId\\":%d,"\n                          + "\\"corpusId\\":%d,"\n                          + "\\"dim\\":[]"\n                        + "}"\n                      + "]"\n                    + "}"\n                  + "]"\n              + "}",\n              query, customerId, corpusId);\n\n      HttpRequest.Builder builder =\n          HttpRequest.newBuilder()\n              .uri(URI.create(String.format("https://%s/v1/query", servingUrl)))\n              .headers(\n                  "Content-Type", "application/json", "customer-id", String.valueOf(customerId))\n              .POST(BodyPublishers.ofString(queryJson));\n\n      builder.header("Authorization", "Bearer " + jwtToken);\n      HttpRequest request = builder.build();\n      HttpResponse<String> response = RestUtil.newHttpClient().send(request, BodyHandlers.ofString());\n      System.out.printf("Query response: %s", response.toString());\n      JsonNode responseNode = new ObjectMapper().readTree(response.body());\n      Iterator<JsonNode> responseSetArray = responseNode.get("responseSet").elements();\n      while (responseSetArray.hasNext()) {\n        JsonNode responseSet = responseSetArray.next();\n        Iterator<JsonNode> docSections = responseSet.get("response").elements();\n        JsonNode documents = responseSet.get("document"); // array of documents\n        while (docSections.hasNext()) {\n          JsonNode docSection = docSections.next();\n          String matchingText = docSection.get("text").asText();\n          double score = docSection.get("score").asDouble();\n          int documentIndex = docSection.get("documentIndex").asInt();\n          JsonNode doc = documents.get(documentIndex); // doc that this section belongs to\n          String docId = doc.get("id").asText();\n          System.out.printf("[score:%.4f] [docId:%s] [text:%s]%n", score, docId, matchingText);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      e.printStackTrace();\n      return false;\n    }\n  }\n}\n\n')))}l.isMDXComponent=!0}}]);