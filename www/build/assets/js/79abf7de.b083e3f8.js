"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8735],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=p(n),m=r,g=l["".concat(c,".").concat(m)]||l[m]||u[m]||s;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={id:"RestIndex.java",title:"RestIndex.java",sidebar_label:"Java"},o=void 0,i={unversionedId:"getting-started-samples/RestIndex.java",id:"getting-started-samples/RestIndex.java",title:"RestIndex.java",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at java/rest/src/main/java/com/vectara/examples/rest/RestIndex.java",source:"@site/docs/getting-started-samples/RestIndex.java.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/RestIndex.java",permalink:"/docs/getting-started-samples/RestIndex.java",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/RestIndex.java.md",tags:[],version:"current",frontMatter:{id:"RestIndex.java",title:"RestIndex.java",sidebar_label:"Java"},sidebar:"someSidebar",previous:{title:"C#",permalink:"/docs/getting-started-samples/RestIndexData.cs"},next:{title:"NodeJS",permalink:"/docs/getting-started-samples/index_document.js"}},c={},p=[],d={toc:p};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,r.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/java/rest/src/main/java/com/vectara/examples/rest/RestIndex.java"},"java/rest/src/main/java/com/vectara/examples/rest/RestIndex.java")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="java/rest/src/main/java/com/vectara/examples/rest/RestIndex.java"',title:'"java/rest/src/main/java/com/vectara/examples/rest/RestIndex.java"'},'package com.vectara.examples.rest;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.net.URI;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.util.*;\n\npublic class RestIndex {\n  /**\n   * Indexes a document with a single section and a title.\n   * <p>\n   * Document can have one or more sections. Sections can be nested.\n   * Title is not required but if provided, it will also get indexed.\n   *\n   * @param jwtToken    A valid JWT token.\n   * @param indexingUrl Indexing URL at which gRPC endpoints are available.\n   * @param docTitle    document title\n   * @param docText     document text to index\n   * @param docId       document id\n   * @param customerId  The unique customer ID in the Vectara platform.\n   * @param corpusId    The unique corpus ID.\n   * @return success or failure.\n   */\n  public static boolean indexDocument(\n      String jwtToken, String indexingUrl, String docTitle, String docText, String docId, long customerId, long corpusId) {\n    try {\n      ObjectMapper mapper = new ObjectMapper();\n      Map<String, Object> writeRequest = new HashMap<>();\n      writeRequest.put("customerId", customerId);\n      writeRequest.put("corpusId", corpusId);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put("documentId", docId);\n      doc.put("title", docTitle); // optional\n      // let\'s add some metadata to our document (optional)\n      Map<String, String> metadata = new HashMap<>();\n      metadata.put("author", "vectara");\n      metadata.put("date", new Date().toString());\n      // metadata has to be added as a json text\n      doc.put("metadataJson", mapper.writer().writeValueAsString(metadata)); // optional\n      List<Map<String, Object>> section = new LinkedList<>();\n      Map<String, Object> singleSection = new HashMap<>();\n      singleSection.put("text", docText);\n      // each section can have its own metadata also\n      section.add(singleSection);\n      doc.put("section", section);\n      writeRequest.put("document", doc);\n      String indexJsonRequest = mapper.writer().writeValueAsString(writeRequest);\n      System.out.println(indexJsonRequest);\n      HttpRequest.Builder builder = HttpRequest.newBuilder()\n          .uri(URI.create(String.format("https://%s/v1/index", indexingUrl)))\n          .headers("Content-Type", "application/json", "customer-id", String.valueOf(customerId))\n          .POST(HttpRequest.BodyPublishers.ofString(indexJsonRequest));\n      builder.header("Authorization", "Bearer " + jwtToken);\n      HttpRequest httpRequest = builder.build();\n      HttpResponse<String> response = RestUtil.newHttpClient().send(httpRequest, BodyHandlers.ofString());\n      System.out.printf("Index response: %s%n", response.toString());\n      JsonNode responseNode = new ObjectMapper().readTree(response.body());\n      JsonNode status = responseNode.get("status");\n      String statusCode = status.get("code").asText();\n      System.out.println(statusCode);\n      return "OK".equals(statusCode);\n    } catch (Exception e) {\n      e.printStackTrace();\n      return false;\n    }\n  }\n}\n\n')))}l.isMDXComponent=!0}}]);