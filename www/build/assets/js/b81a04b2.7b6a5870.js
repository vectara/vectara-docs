"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8594],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,g=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[p]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},60851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={id:"JWTFetcher.cs",title:"JWTFetcher.cs",sidebar_label:"C#"},s=void 0,c={unversionedId:"getting-started-samples/JWTFetcher.cs",id:"getting-started-samples/JWTFetcher.cs",title:"JWTFetcher.cs",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at csharp/common/JWTFetcher.cs",source:"@site/docs/getting-started-samples/JWTFetcher.cs.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/JWTFetcher.cs",permalink:"/docs/getting-started-samples/JWTFetcher.cs",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/JWTFetcher.cs.md",tags:[],version:"current",frontMatter:{id:"JWTFetcher.cs",title:"JWTFetcher.cs",sidebar_label:"C#"},sidebar:"someSidebar",previous:{title:"Client Credentials Grant",permalink:"/docs/authentication"},next:{title:"Java",permalink:"/docs/getting-started-samples/JwtFetcher.java"}},o={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,a.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/csharp/common/JWTFetcher.cs"},"csharp/common/JWTFetcher.cs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="csharp/common/JWTFetcher.cs"',title:'"csharp/common/JWTFetcher.cs"'},'namespace VectaraExampleCommon;\n\nusing System.Text.Json;\n\n/// <summary>\n/// A class that makes an HTTP POST call to obtain a JWT Token based on authentication URL,\n/// client ID and client secret.\n/// </summary>\npublic class JWTFetcher\n{\n    public String authDomain { get; set; }\n    public String clientId { get; set; }\n    public String clientSecret { get; set; }\n\n    private string Base64Encode(String clientId, String clientSecret)\n    {\n        String text = clientId + ":" + clientSecret;\n        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(text);\n        return System.Convert.ToBase64String(plainTextBytes);\n    }\n\n    /// <summary>\n    /// Fetches a client_credentials JWT Token based on authentication URL, client ID and \n    /// client secret.\n    /// </summary>\n    public String? FetchClientCredentials()\n    {\n        if (String.IsNullOrEmpty(authDomain) ||\n            String.IsNullOrEmpty(clientId) ||\n            String.IsNullOrEmpty(clientSecret))\n        {\n            return null;\n        }\n\n        if (!authDomain.EndsWith("/oauth2/token"))\n        {\n            if (!authDomain.EndsWith("/"))\n            {\n                authDomain += "/";\n            }\n            authDomain += "oauth2/token";\n        }\n\n        using (var client = new HttpClient())\n        {\n            var request = new HttpRequestMessage\n            {\n                RequestUri = new Uri(authDomain),\n                Method = HttpMethod.Post,\n                Content = new FormUrlEncodedContent(\n                            new Dictionary<string, string> {\n                                    {"grant_type", "client_credentials"},\n                                    {"client_id", clientId}\n                            })\n            };\n            request.Headers.Add("Authorization", "Basic " + Base64Encode(clientId, clientSecret));\n            request.Content.Headers.Remove("Content-Type");\n            request.Content.Headers.Add("Content-Type", "application/x-www-form-urlencoded");\n            try\n            {\n                HttpResponseMessage res = client.Send(request);\n                String result = res.Content.ReadAsStringAsync().Result;\n                var values = JsonSerializer.Deserialize<Dictionary<string, Object>>(result);\n                if (!values.ContainsKey("access_token"))\n                {\n                    Console.WriteLine("Could not retrieve JWT Token.");\n                    return null;\n                }\n                return values["access_token"].ToString();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n                return null;\n            }\n        }\n    }\n}\n\n')))}p.isMDXComponent=!0}}]);