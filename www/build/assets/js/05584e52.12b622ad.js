"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8926],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=l(r),d=a,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(g,s(s({ref:t},u),{},{components:r})):n.createElement(g,s({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6629:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const i={id:"RestApiKeyQueries.java",title:"RestApiKeyQueries.java",sidebar_label:"Java"},s=void 0,o={unversionedId:"getting-started-samples/RestApiKeyQueries.java",id:"getting-started-samples/RestApiKeyQueries.java",title:"RestApiKeyQueries.java",description:"This is a complete example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at java/rest/src/main/java/com/vectara/examples/rest/RestApiKeyQueries.java",source:"@site/docs/getting-started-samples/RestApiKeyQueries.java.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/RestApiKeyQueries.java",permalink:"/docs/getting-started-samples/RestApiKeyQueries.java",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/RestApiKeyQueries.java.md",tags:[],version:"current",frontMatter:{id:"RestApiKeyQueries.java",title:"RestApiKeyQueries.java",sidebar_label:"Java"},sidebar:"someSidebar",previous:{title:"C#",permalink:"/docs/getting-started-samples/RestApiKeyQueries.cs"},next:{title:"PHP",permalink:"/docs/getting-started-samples/queryDataApiKey.php"}},p={},l=[],u={toc:l};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is a complete example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,a.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/java/rest/src/main/java/com/vectara/examples/rest/RestApiKeyQueries.java"},"java/rest/src/main/java/com/vectara/examples/rest/RestApiKeyQueries.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="java/rest/src/main/java/com/vectara/examples/rest/RestApiKeyQueries.java"',title:'"java/rest/src/main/java/com/vectara/examples/rest/RestApiKeyQueries.java"'},'package com.vectara.examples.rest;\n\nimport com.beust.jcommander.JCommander;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.HttpClient.Version;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.time.Duration;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * A class that demonstrates how Vectara Serving API can be called using REST and an\n * API Key for authentication.\n */\npublic class RestApiKeyQueries {\n  private static final Logger LOGGER = Logger.getLogger(RestBasicOperations.class.getName());\n\n  public static void main(String[] argv) {\n    RestArgs args = new RestArgs();\n    JCommander.newBuilder().addObject(args).build().parse(argv);\n    if (args.apiKey == null) {\n      LOGGER.log(Level.SEVERE, "Please provide an API Key to run this example.");\n      System.exit(1);\n    }\n    String apiKey = args.apiKey;\n\n    var result = queryData(apiKey, args.servingEndpoint, "test", args.customerId, args.corpusId);\n    if (!result) {\n      LOGGER.log(Level.SEVERE, "Querying failed. Please see previous logs for details.");\n      System.exit(1);\n    }\n  }\n\n  private static boolean queryData(String apiKey,\n                                   String servingUrl,\n                                   String query,\n                                   Long customerId,\n                                   Long corpusId) {\n    try {\n      String queryJson =\n          String.format(\n              "{\\"query\\":"\n                  + "["\n                    + "{"\n                      + "\\"query\\":\\"%s\\","\n                      + "\\"numResults\\":10,"\n                      + "\\"corpusKey\\":"\n                        + "["\n                          + "{"\n                            + "\\"customerId\\":%d,"\n                              + "\\"corpusId\\":%d,"\n                              + "\\"dim\\":[]"\n                          + "}"\n                        + "]"\n                    + "}"\n                  + "]"\n              + "}",\n              query, customerId, corpusId);\n\n      var httpClient = HttpClient.newBuilder()\n          .version(Version.HTTP_2)\n          .followRedirects(Redirect.NORMAL)\n          .connectTimeout(Duration.ofSeconds(20))\n          .build();\n\n      HttpRequest.Builder builder =\n          HttpRequest.newBuilder()\n              .uri(URI.create(String.format("https://%s/v1/query", servingUrl)))\n              .headers(\n                  "Content-Type", "application/json", "customer-id", String.valueOf(customerId))\n              .POST(BodyPublishers.ofString(queryJson));\n\n      builder.header("x-api-key", apiKey);\n      HttpRequest request = builder.build();\n      HttpResponse<String> response = httpClient.send(request, BodyHandlers.ofString());\n      LOGGER.info(String.format("Querying response: %s", response.toString()));\n      return true;\n    } catch (IOException | InterruptedException e) {\n      LOGGER.log(Level.SEVERE, String.format("Error while indexing data: %s", e));\n      return false;\n    }\n  }\n}\n\n')))}c.isMDXComponent=!0}}]);