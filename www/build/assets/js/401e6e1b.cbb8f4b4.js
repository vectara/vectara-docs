"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[1045,2917],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),r=n(67294),o=n(86010),i=n(72389),s=n(67392),l=n(7094),d=n(12466);const c="tabList__CuJ",p="tabItem_LNqP";function u(e){const{lazy:t,block:n,defaultValue:i,values:u,groupId:m,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=u??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,s.l)(v,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==b&&!v.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,l.U)(),[w,C]=(0,r.useState)(b),N=[],{blockElementScrollPositionUntilNextRender:x}=(0,d.o5)();if(null!=m){const e=k[m];null!=e&&e!==w&&v.some((t=>t.value===e))&&C(e)}const O=e=>{const t=e.currentTarget,n=N.indexOf(t),a=v[n].value;a!==w&&(x(t),C(a),null!=m&&y(m,String(a)))},T=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},v.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>N.push(e),onKeyDown:T,onClick:O},i,{className:(0,o.Z)("tabs__item",p,i?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},78473:(e,t,n)=>{n.r(t),n.d(t,{Config:()=>p,assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),o=n(53487);const i={},s=void 0,l={unversionedId:"definitions",id:"definitions",title:"definitions",description:"",source:"@site/docs/definitions.md",sourceDirName:".",slug:"/definitions",permalink:"/docs/definitions",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/definitions.md",tags:[],version:"current",frontMatter:{}},d={},c=[];function p(e){return o.g[e.v]}const u={toc:c,Config:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}))}m.isMDXComponent=!0},60979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),o=(n(65488),n(85162),n(78473));const i={id:"metadata",title:"Reading Metadata",sidebar_label:"Metadata"},s=void 0,l={unversionedId:"search-apis/interpreting-responses/metadata",id:"search-apis/interpreting-responses/metadata",title:"Reading Metadata",description:"In , when you",source:"@site/docs/search-apis/interpreting-responses/metadata.md",sourceDirName:"search-apis/interpreting-responses",slug:"/search-apis/interpreting-responses/metadata",permalink:"/docs/search-apis/interpreting-responses/metadata",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/search-apis/interpreting-responses/metadata.md",tags:[],version:"current",frontMatter:{id:"metadata",title:"Reading Metadata",sidebar_label:"Metadata"},sidebar:"someSidebar",previous:{title:"Batched Queries",permalink:"/docs/search-apis/batched-queries"},next:{title:"Scores",permalink:"/docs/search-apis/interpreting-responses/intepreting-scores"}},d={},c=[{value:"Combining document and section metadata",id:"combining-document-and-section-metadata",level:2},{value:"Filtering",id:"filtering",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In ",(0,r.kt)(o.Config,{v:"names.product",mdxType:"Config"}),", when you\n",(0,r.kt)("a",{parentName:"p",href:"/docs/indexing-apis/indexing"},"index a document"),", it will consist of both a\ntop-level ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," object and a series of ",(0,r.kt)("inlineCode",{parentName:"p"},"Section"),"s which can be nested.\nBoth can contain separate metadata, including some metadata\nthat ",(0,r.kt)(o.Config,{v:"names.product",mdxType:"Config"})," will auto-generate.  A good example of\nthis is that you could have a document which has some global attributes like\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"URL")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"owner")," but individual sections will have a ",(0,r.kt)("inlineCode",{parentName:"p"},"section")," attribute\nand a ",(0,r.kt)("inlineCode",{parentName:"p"},"lang"),"."),(0,r.kt)("p",null,"Here's an example response with different metadata at these different levels:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "responseSet": [\n        {\n            "response": [\n                {\n                    "text": "Answer to the Ultimate Question of Life, the Universe, and Everything, is 42.",\n                    "score": 0.1401531994342804,\n                    "documentIndex": 0,\n                    "corpusKey": {\n                        "customerId": 0,\n                        "corpusId": 1234,\n                        "semantics": 0,\n                        "metadataFilter": "",\n                        "dim": []\n                    },\n                    "metadata": [\n                        {\n                            "name": "speaker",\n                            "value": "Deep Thought"\n                        },\n                        {\n                            "name": "lang",\n                            "value": "eng"\n                        },\n                        {\n                            "name": "section",\n                            "value": "2"\n                        },\n                        {\n                            "name": "offset",\n                            "value": "316"\n                        }\n                    ]\n                },\n                {\n                    "text": "Sometimes the questions are complicated and the answers are simple.",\n                    "score": 0.13511724770069122,\n                    "documentIndex": 1,\n                    "corpusKey": {\n                        "customerId": 0,\n                        "corpusId": 1234,\n                        "semantics": 0,\n                        "metadataFilter": "",\n                        "dim": []\n                    },\n                    "metadata": [\n                        {\n                            "name": "lang",\n                            "value": "eng"\n                        },\n                        {\n                            "name": "section",\n                            "value": "17"\n                        },\n                        {\n                            "name": "offset",\n                            "value": "171"\n                        }\n                    ]\n                },\n            ],\n            "status": [],\n            "document": [\n                {\n                    "id": "hitchhikers-guide",\n                    "metadata": [\n                        {\n                            "name": "author",\n                            "value": "Douglas Adams"\n                        },\n                        {\n                            "name": "publicationyear",\n                            "value": "1979"\n                        }\n                    ]\n                },\n                {\n                    "id": "authors-quotes",\n                    "metadata": [\n                        {\n                            "name": "author",\n                            "value": "Dr. Seuss"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    "status": []\n}\n')),(0,r.kt)("p",null,"Within a given item in the ",(0,r.kt)("inlineCode",{parentName:"p"},"responseSet")," array, you'll see there's a ",(0,r.kt)("inlineCode",{parentName:"p"},"response"),"\nand a ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," section (among others).  The ",(0,r.kt)("inlineCode",{parentName:"p"},"response")," section holds\nsection-level metadata and the ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," section holds document-level\nmetadata.  The reason for this split is that there may be multiple sections\nfrom the same document in the response, and this allows for deduplication of\ndocument-level metadata, which can reduce the total time for the response."),(0,r.kt)("h2",{id:"combining-document-and-section-metadata"},"Combining document and section metadata"),(0,r.kt)("p",null,"In order to display metadata for a particular section, you may want to combine\nit with the document-level metadata.  To do so, look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"documentIndex"),"\nvalue.  This tells you which index into the ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," array you should grab\nassociated ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," from."),(0,r.kt)("p",null,"For example, the first result in the ",(0,r.kt)("inlineCode",{parentName:"p"},"response"),' array ("Answer to the Ultimate\nQuestion of Life, the Universe, and Everything, is 42.") has a ',(0,r.kt)("inlineCode",{parentName:"p"},"documentIndex"),"\nvalue of ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and has metadata of ",(0,r.kt)("inlineCode",{parentName:"p"},"speaker:Deep Thought"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lang:eng"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"section:2"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"offset:316"),".  These are the section-level metadata for this\nresult."),(0,r.kt)("p",null,"Because the ",(0,r.kt)("inlineCode",{parentName:"p"},"documentIndex")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", we look at the first result in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"document")," array to find the document-level metadata and document ID.  In this\ncase, the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"hitchhikers-guide")," and the document-level metadata is\n",(0,r.kt)("inlineCode",{parentName:"p"},"author:Douglas Adams")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"publicationyear:1979"),"."),(0,r.kt)("p",null,"Depending on your use case, you might want to combine these metadata elements\ntogether for display purposes."),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"document"),"- and ",(0,r.kt)("inlineCode",{parentName:"p"},"section"),"-level metadata to filter in a\nsearch operation.  For more information on how to apply filter expressions at\neither the document or section/part level, please see the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/search-apis/sql/filter-overview"},"filter expression")," documentation."))}u.isMDXComponent=!0},53487:e=>{e.exports=JSON.parse('{"g":{"domains.rest.serving":"api.vectara.io","domains.rest.admin":"api.vectara.io","domains.rest.indexing":"api.vectara.io","domains.grpc.serving":"serving.vectara.io","domains.grpc.admin":"admin.vectara.io","domains.grpc.indexing":"indexing.vectara.io","domains.oauth":"vectara-prod-${CUSTOMER_ID}.auth.us-west-2.amazoncognito.com","package.protobuf":"com.vectara","package.java":"com.vectara","package.php":"Com\\\\Vectara","names.company":"Vectara","names.product":"Vectara"}}')}}]);