"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[5779],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>_});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(t),m=s,_=d["".concat(c,".").concat(m)]||d[m]||l[m]||o;return t?r.createElement(_,i(i({ref:n},u),{},{components:t})):r.createElement(_,i({ref:n},u))}));function _(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[d]="string"==typeof e?e:s,i[1]=a;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=t(87462),s=(t(67294),t(3905));const o={id:"app.js",title:"app.js",sidebar_label:"NodeJS"},i=void 0,a={unversionedId:"getting-started-samples/app.js",id:"getting-started-samples/app.js",title:"app.js",description:"This is a complete example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at nodejs/rest/app.js",source:"@site/docs/getting-started-samples/app.js.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/app.js",permalink:"/docs/getting-started-samples/app.js",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/app.js.md",tags:[],version:"current",frontMatter:{id:"app.js",title:"app.js",sidebar_label:"NodeJS"},sidebar:"someSidebar",previous:{title:"Python",permalink:"/docs/getting-started-samples/rest_api_key_queries.py"},next:{title:"Data Encryption",permalink:"/docs/encryption"}},c={},p=[],u={toc:p};function d(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is a complete example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,s.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/nodejs/rest/app.js"},"nodejs/rest/app.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="nodejs/rest/app.js"',title:'"nodejs/rest/app.js"'},"/**\n * This nodejs (express-based) server exposes endpoints that can be called via HTTP/POST. All of \n * these endpoints call the Vectara APIs via HTTP/REST, and return the results.\n * \n * The exposed endpoints are as follows:\n * 1. queryData             Queries a corpus using OAuth2 as authentication mechanism.\n * 2. queryDataWithApiKey   Queries a corpus using API Key as authentication mechanism.\n * 3. uploadFile            Uploads a file to a Vectara corpus.\n * 4. createCorpus          Creates a new corpus.\n * 5. resetCorpus           Resets a corpus.\n * 6. deleteCorpus          Deletes a corpus.\n */\n\nconst express = require('express');\nconst axios = require('axios');\nconst create_corpus = require('./create_corpus')\nconst delete_corpus = require('./delete_corpus')\nconst reset_corpus = require('./reset_corpus')\nconst index_document = require('./index_document');\nconst upload_file = require('./upload_file');\nconst query = require('./query')\n\nconst app = express();\n\napp.use(express.json());\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\napp.post('/queryData', (req, res) => {\n    const { serving_endpoint, customer_id, corpus_id, auth_url, client_id, client_secret } = req.body;\n    getJwtToken(auth_url, client_id, client_secret)\n        .then((token) => {\n            query.query(customer_id, corpus_id, serving_endpoint, token)\n                .then((result) => {\n                    res.send(result.data);\n                })\n        })\n        .catch((err) => {\n            error = {\n                detail: \"Could not obtain OAuth token.\",\n                message : err.message,\n                code: err.code\n            }\n            res.send(JSON.stringify(error));\n        });\n});\n\napp.post('/queryDataWithApiKey', (req, res) => {\n    const { serving_endpoint, customer_id, corpus_id, api_key } = req.body;\n    query.queryWithAPIKey (customer_id, corpus_id, serving_endpoint, api_key)\n        .then((result) => {\n            if (result.status != 200) {\n                res.send(result.status);\n            } else {\n                res.send(result.data);\n            }\n        })\n        .catch((err) => {\n            console.log(err);\n            res.send(JSON.stringify(err));\n        })\n});\n\napp.post('/createCorpus', (req, res) => {\n    const { admin_endpoint, customer_id, auth_url, client_id, client_secret } = req.body;\n    getJwtToken(auth_url, client_id, client_secret)\n        .then((token) => {\n            create_corpus.createCorpus(customer_id, admin_endpoint, token)\n                .then((result) => {\n                    res.send(result.data);\n                })\n        })\n        .catch((err) => {\n            error = {\n                detail: \"Could not obtain OAuth token.\",\n                message : err.message,\n                code: err.code\n            }\n            res.send(JSON.stringify(error));\n        });\n});\n\napp.post('/resetCorpus', (req, res) => {\n    const { admin_endpoint, customer_id, auth_url, client_id, client_secret, corpus_id } = req.body;\n    getJwtToken(auth_url, client_id, client_secret)\n        .then((token) => {\n            reset_corpus.resetCorpus(customer_id, corpus_id, admin_endpoint, token)\n                .then((result) => {\n                    res.send(result.data);\n                })\n        })\n        .catch((err) => {\n            error = {\n                detail: \"Could not obtain OAuth token.\",\n                message : err.message,\n                code: err.code\n            }\n            res.send(JSON.stringify(error));\n        });\n});\n\napp.post('/deleteCorpus', (req, res) => {\n    const { admin_endpoint, customer_id, auth_url, client_id, client_secret, corpus_id } = req.body;\n    getJwtToken(auth_url, client_id, client_secret)\n        .then((token) => {\n            delete_corpus.deleteCorpus(customer_id, corpus_id, admin_endpoint, token)\n                .then((result) => {\n                    res.send(result.data);\n                })\n        })\n        .catch((err) => {\n            error = {\n                detail: \"Could not obtain OAuth token.\",\n                message : err.message,\n                code: err.code\n            }\n            res.send(JSON.stringify(error));\n        });\n});\n\napp.post('/uploadFile', (req, res) => {\n    const { indexing_endpoint, customer_id, corpus_id, auth_url, client_id, client_secret } = req.body;\n    getJwtToken(auth_url, client_id, client_secret)\n        .then((token) => {\n            upload_file.uploadFile(customer_id, corpus_id, indexing_endpoint, token)\n            .then((result) => {\n                res.send(result.data);\n            })\n        })\n        .catch((err) => {\n            error = {\n                detail: \"Could not obtain OAuth token.\",\n                message : err.message,\n                code: err.code\n            }\n            res.send(JSON.stringify(error));\n        });\n});\n\napp.post('/indexDocument', (req, res) => {\n    const { indexing_endpoint, customer_id, corpus_id, auth_url, client_id, client_secret } = req.body;\n    getJwtToken(auth_url, client_id, client_secret)\n        .then((token) => {\n            index_document.indexDocument(customer_id, corpus_id, indexing_endpoint, token)\n            .then((result) => {\n                res.send(result.data);\n            })\n        })\n        .catch((err) => {\n            error = {\n                detail: \"Could not obtain OAuth token.\",\n                message : err.message,\n                code: err.code\n            }\n            res.send(JSON.stringify(error));\n        });\n});\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n\nfunction getJwtToken(auth_url, client_id, client_secret) {\n    const url = `${auth_url}/oauth2/token`;\n    const encoded = Buffer.from(`${client_id}:${client_secret}`).toString('base64');\n    const config = {\n        headers: {\n            'Authorization': `Basic ${encoded}`\n        }\n    };\n\n    return new Promise((resolve, reject) => {\n        axios.post(url, new URLSearchParams({\n            'grant_type': 'client_credentials',\n            'client_id': client_id\n        }), config)\n            .then((result) => {\n                resolve(result.data.access_token);\n            })\n            .catch((err) => {\n                console.log(err);\n                reject(err);\n            });\n    })\n}\n")))}d.isMDXComponent=!0}}]);