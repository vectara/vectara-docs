"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[4715],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={id:"JwtFetcher.java",title:"JwtFetcher.java",sidebar_label:"Java"},o=void 0,c={unversionedId:"getting-started-samples/JwtFetcher.java",id:"getting-started-samples/JwtFetcher.java",title:"JwtFetcher.java",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at java/auth/src/main/java/com/vectara/auth/JwtFetcher.java",source:"@site/docs/getting-started-samples/JwtFetcher.java.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/JwtFetcher.java",permalink:"/docs/getting-started-samples/JwtFetcher.java",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/JwtFetcher.java.md",tags:[],version:"current",frontMatter:{id:"JwtFetcher.java",title:"JwtFetcher.java",sidebar_label:"Java"},sidebar:"someSidebar",previous:{title:"C#",permalink:"/docs/getting-started-samples/JWTFetcher.cs"},next:{title:"PHP",permalink:"/docs/getting-started-samples/getJwtToken.php"}},s={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,a.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/java/auth/src/main/java/com/vectara/auth/JwtFetcher.java"},"java/auth/src/main/java/com/vectara/auth/JwtFetcher.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="java/auth/src/main/java/com/vectara/auth/JwtFetcher.java"',title:'"java/auth/src/main/java/com/vectara/auth/JwtFetcher.java"'},'package com.vectara.auth;\n\nimport com.auth0.jwt.JWT;\nimport com.google.gson.Gson;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.HttpClient.Version;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.time.Duration;\nimport java.util.Base64;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.annotation.Nullable;\n\n/**\n * A helper that retrieves a JSON Web Token from an authorization code grant. Most of the details\n * for how to format the HTTP request can be found at:\n *\n * <p>https://aws.amazon.com/blogs/mobile/understanding-amazon-cognito-user-pool-oauth-2-0-grants/\n */\npublic class JwtFetcher {\n  private static final Logger LOGGER = Logger.getLogger(JwtFetcher.class.getName());\n\n  private URI tokenEndpoint;\n  private URI redirectUri;\n  private String clientId;\n  private String clientSecret;\n\n  private HttpClient httpClient;\n\n  /**\n   * Construct a JWT fetcher for machine-to-machine authentication (also known as "client\n   * credentials").\n   */\n  public JwtFetcher(URI authDomain, String clientId, String clientSecret) {\n    init(authDomain, null, clientId, clientSecret);\n  }\n\n  /**\n   * Initializes a new HTTPClient object\n   * @param authDomain    Vectara auth domain such as https://vectara.auth.us-west-2.amazoncognito.com\n   * @param redirectUri   Redirect URI where caller will be redirected after successful\n   *                      authentication. Can be null.\n   * @param clientId      Vectara client ID such as "259xxxxxxxxxxxxxxxxxxxxxxxxxx9p"\n   * @param clientSecret  Vectara client secret such as "2vxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxt"\n   */\n  private void init(\n      URI authDomain, @Nullable URI redirectUri, String clientId, String clientSecret) {\n    String strAuthDomain = authDomain.toASCIIString();\n    if (strAuthDomain.endsWith("/oauth2/token")) {\n      tokenEndpoint = asUrl(strAuthDomain);\n    } else {\n      if (!strAuthDomain.endsWith("/")) {\n        strAuthDomain += "/";\n      }\n      tokenEndpoint = asUrl(strAuthDomain + "oauth2/token");\n    }\n    this.redirectUri = redirectUri;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    httpClient =\n        HttpClient.newBuilder()\n            .version(Version.HTTP_2)\n            .followRedirects(Redirect.NORMAL)\n            .connectTimeout(Duration.ofSeconds(20))\n            .build();\n  }\n\n  private URI asUrl(String url) {\n    return URI.create(url);\n  }\n\n  public String fetchClientCredentialsJwt() {\n    HttpRequest.Builder builder =\n        HttpRequest.newBuilder()\n            .uri(tokenEndpoint)\n            .header("Content-Type", "application/x-www-form-urlencoded")\n            .POST(\n                BodyPublishers.ofString(\n                    String.format(\n                        "grant_type=%s&client_id=%s&redirect_uri=%s",\n                        "client_credentials", clientId, redirectUri)));\n    builder.header(\n        "Authorization",\n        "Basic " + Base64.getEncoder().encodeToString((clientId + ":" + clientSecret).getBytes()));\n    HttpRequest request = builder.build();\n\n    try {\n      HttpResponse<String> response = httpClient.send(request, BodyHandlers.ofString());\n      Map<String, Object> map = new Gson().fromJson(response.body(), Map.class);\n      if (map.containsKey("error")) {\n        LOGGER.log(\n            Level.SEVERE,\n            String.format(\n                "Error while retrieving JWT Token: %s", String.valueOf(map.get("error"))));\n        return null;\n      }\n      if (map.containsKey("access_token")) {\n        return JWT.decode(String.valueOf(map.get("access_token"))).getToken();\n      }\n      return null;\n    } catch (IOException | InterruptedException e) {\n      LOGGER.log(Level.SEVERE, String.format("Error while retrieving JWT Token: %s", e));\n      return null;\n    }\n  }\n}\n\n')))}u.isMDXComponent=!0}}]);