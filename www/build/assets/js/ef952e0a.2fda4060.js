"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[839],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(67294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var u=n.createContext({}),p=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(u.Provider,{value:r},e.children)},l="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=p(t),d=s,m=l["".concat(u,".").concat(d)]||l[d]||y[d]||a;return t?n.createElement(m,o(o({ref:r},c),{},{components:t})):n.createElement(m,o({ref:r},c))}));function m(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i[l]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},60096:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=t(87462),s=(t(67294),t(3905));const a={id:"rest_query.py",title:"rest_query.py",sidebar_label:"Python"},o=void 0,i={unversionedId:"getting-started-samples/rest_query.py",id:"getting-started-samples/rest_query.py",title:"rest_query.py",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at python/vectara-rest/rest_query.py",source:"@site/docs/getting-started-samples/rest_query.py.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/rest_query.py",permalink:"/docs/getting-started-samples/rest_query.py",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/rest_query.py.md",tags:[],version:"current",frontMatter:{id:"rest_query.py",title:"rest_query.py",sidebar_label:"Python"},sidebar:"someSidebar",previous:{title:"PHP",permalink:"/docs/getting-started-samples/queryData.php"},next:{title:"Reranking",permalink:"/docs/search-apis/reranking"}},u={},p=[],c={toc:p};function l(e){let{components:r,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,s.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/python/vectara-rest/rest_query.py"},"python/vectara-rest/rest_query.py")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="python/vectara-rest/rest_query.py"',title:'"python/vectara-rest/rest_query.py"'},'"""Simple example of using the Vectara REST API for searching a corpus.\n"""\n\nimport json\nimport logging\nimport requests\n\ndef _get_query_json(customer_id: int, corpus_id: int, query_value: str):\n    """ Returns a query json. """\n    query = {}\n    query_obj = {}\n\n    query_obj["query"] = query_value\n    query_obj["num_results"] = 10\n\n    corpus_key = {}\n    corpus_key["customer_id"] = customer_id\n    corpus_key["corpus_id"] = corpus_id\n\n    query_obj["corpus_key"] = [ corpus_key ]\n    query["query"] = [ query_obj ]\n    return json.dumps(query)\n\n\ndef query(customer_id: int, corpus_id: int, query_address: str, jwt_token: str, query: str):\n    """This method queries the data.\n    Args:\n        customer_id: Unique customer ID in vectara platform.\n        corpus_id: ID of the corpus to which data needs to be indexed.\n        query_address: Address of the querying server. e.g., api.vectara.io\n        jwt_token: A valid Auth token.\n\n    Returns:\n        (response, True) in case of success and returns (error, False) in case of failure.\n\n    """\n    post_headers = {\n        "customer-id": f"{customer_id}",\n        "Authorization": f"Bearer {jwt_token}"\n    }\n\n    response = requests.post(\n        f"https://{query_address}/v1/query",\n        data=_get_query_json(customer_id, corpus_id, query),\n        verify=True,\n        headers=post_headers)\n\n    if response.status_code != 200:\n        logging.error("Query failed with code %d, reason %s, text %s",\n                       response.status_code,\n                       response.reason,\n                       response.text)\n        return response, False\n    return response, True\n')))}l.isMDXComponent=!0}}]);