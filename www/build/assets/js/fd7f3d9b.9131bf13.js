"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[6592],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,d=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(d,".").concat(m)]||u[m]||l[m]||s;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=m;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const s={id:"rest_index_document.py",title:"rest_index_document.py",sidebar_label:"Python"},i=void 0,a={unversionedId:"getting-started-samples/rest_index_document.py",id:"getting-started-samples/rest_index_document.py",title:"rest_index_document.py",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at python/vectara-rest/restindexdocument.py",source:"@site/docs/getting-started-samples/rest_index_document.py.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/rest_index_document.py",permalink:"/docs/getting-started-samples/rest_index_document.py",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/rest_index_document.py.md",tags:[],version:"current",frontMatter:{id:"rest_index_document.py",title:"rest_index_document.py",sidebar_label:"Python"},sidebar:"someSidebar",previous:{title:"PHP",permalink:"/docs/getting-started-samples/indexDocument.php"},next:{title:"API Definition",permalink:"/docs/indexing-apis/core_indexing"}},d={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,o.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/python/vectara-rest/rest_index_document.py"},"python/vectara-rest/rest_index_document.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="python/vectara-rest/rest_index_document.py"',title:'"python/vectara-rest/rest_index_document.py"'},'"""Simple example of using the Vectara REST API for indexing.\n"""\n\nimport json\nimport logging\nimport requests\n\ndef _get_index_request_json(customer_id: int, corpus_id: int):\n    """ Returns some example data to index. """\n    document = {}\n    document["document_id"] = "doc-id-2"\n    # Note that the document ID must be unique for a given corpus\n    document["title"] = "Another example Title"\n    document["metadata_json"] = json.dumps(\n        {\n            "book-name": "Another example title",\n            "collection": "Mathematics",\n            "author": "Example Author"\n        }\n    )\n    sections = []\n    section = {}\n    section["text"] = "The answer to the ultimate question of life, the universe, and everything is 42."\n    sections.append(section)\n    document["section"] = sections\n\n    request = {}\n    request[\'customer_id\'] = customer_id\n    request[\'corpus_id\'] = corpus_id\n    request[\'document\'] = document\n\n    return json.dumps(request)\n\ndef index_document(customer_id: int, corpus_id: int, idx_address: str, jwt_token: str):\n    """ Indexes content to the corpus.\n    Args:\n        customer_id: Unique customer ID in vectara platform.\n        corpus_id: ID of the corpus to which data needs to be indexed.\n        idx_address: Address of the indexing server. e.g., api.vectara.io\n        jwt_token: A valid Auth token.\n\n    Returns:\n        (response, True) in case of success and returns (error, False) in case of failure.\n\n    """\n\n    post_headers = {\n        "Authorization": f"Bearer {jwt_token}",\n        "customer-id": f"{customer_id}"\n    }\n    response = requests.post(\n        f"https://{idx_address}/v1/index",\n        data=_get_index_request_json(customer_id, corpus_id),\n        verify=True,\n        headers=post_headers)\n\n    if response.status_code != 200:\n        logging.error("REST upload failed with code %d, reason %s, text %s",\n                       response.status_code,\n                       response.reason,\n                       response.text)\n        return response, False\n    return response, True\n')))}u.isMDXComponent=!0}}]);