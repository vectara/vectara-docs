"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[7298],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,m=u["".concat(p,".").concat(f)]||u[f]||c[f]||a;return n?r.createElement(m,s(s({ref:t},d),{},{components:n})):r.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},44777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={id:"rest_upload_file.py",title:"rest_upload_file.py",sidebar_label:"Python"},s=void 0,i={unversionedId:"getting-started-samples/rest_upload_file.py",id:"getting-started-samples/rest_upload_file.py",title:"rest_upload_file.py",description:"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at python/vectara-rest/restuploadfile.py",source:"@site/docs/getting-started-samples/rest_upload_file.py.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/rest_upload_file.py",permalink:"/docs/getting-started-samples/rest_upload_file.py",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/rest_upload_file.py.md",tags:[],version:"current",frontMatter:{id:"rest_upload_file.py",title:"rest_upload_file.py",sidebar_label:"Python"},sidebar:"someSidebar",previous:{title:"PHP",permalink:"/docs/getting-started-samples/uploadFile.php"},next:{title:"Deleting Documents",permalink:"/docs/indexing-apis/deleting-documents"}},p={},l=[],d={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is an example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,o.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/python/vectara-rest/rest_upload_file.py"},"python/vectara-rest/rest_upload_file.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="python/vectara-rest/rest_upload_file.py"',title:'"python/vectara-rest/rest_upload_file.py"'},'"""Simple example of using the Vectara REST API for uploading files.\n"""\n\nimport json\nimport logging\nimport requests\n\ndef _get_upload_file_json():\n    """ Returns some example JSON file upload data. """\n    document = {}\n    document["document_id"] = "doc-id-1"\n    # Note that the document ID must be unique for a given corpus\n    document["title"] = "An example Title"\n    document["metadata_json"] = json.dumps(\n        {\n            "book-name": "An example title",\n            "collection": "Philosophy",\n            "author": "Example Author"\n        }\n    )\n    sections = []\n    section = {}\n    section["text"] = "An example text that needs to be indexed."\n    sections.append(section)\n    document["section"] = sections\n\n    return json.dumps(document)\n\ndef upload_file(customer_id: int, corpus_id: int, idx_address: str, jwt_token: str):\n    """ Uploads a file to the corpus.\n    Args:\n        customer_id: Unique customer ID in vectara platform.\n        corpus_id: ID of the corpus to which data needs to be indexed.\n        idx_address: Address of the indexing server. e.g., api.vectara.io\n        jwt_token: A valid Auth token.\n\n    Returns:\n        (response, True) in case of success and returns (error, False) in case of failure.\n\n    """\n\n    post_headers = {\n        "Authorization": f"Bearer {jwt_token}"\n    }\n    response = requests.post(\n        f"https://{idx_address}/v1/upload?c={customer_id}&o={corpus_id}",\n        files={"file": ("test.json", _get_upload_file_json(), "application/json")},\n        verify=True,\n        headers=post_headers)\n\n    if response.status_code != 200:\n        logging.error("REST upload failed with code %d, reason %s, text %s",\n                       response.status_code,\n                       response.reason,\n                       response.text)\n        return response, False\n    return response, True\n')))}u.isMDXComponent=!0}}]);