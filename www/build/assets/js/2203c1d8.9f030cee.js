"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[811],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},l="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,p=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),l=u(r),d=a,m=l["".concat(s,".").concat(d)]||l[d]||y[d]||p;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=r.length,i=new Array(p);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[l]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<p;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3985:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>p,metadata:()=>o,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const p={id:"queryDataApiKey.php",title:"queryDataApiKey.php",sidebar_label:"PHP"},i=void 0,o={unversionedId:"getting-started-samples/queryDataApiKey.php",id:"getting-started-samples/queryDataApiKey.php",title:"queryDataApiKey.php",description:"This is a complete example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at php/rest/queryDataApiKey.php",source:"@site/docs/getting-started-samples/queryDataApiKey.php.md",sourceDirName:"getting-started-samples",slug:"/getting-started-samples/queryDataApiKey.php",permalink:"/docs/getting-started-samples/queryDataApiKey.php",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/getting-started-samples/queryDataApiKey.php.md",tags:[],version:"current",frontMatter:{id:"queryDataApiKey.php",title:"queryDataApiKey.php",sidebar_label:"PHP"},sidebar:"someSidebar",previous:{title:"Java",permalink:"/docs/getting-started-samples/RestApiKeyQueries.java"},next:{title:"Python",permalink:"/docs/getting-started-samples/rest_api_key_queries.py"}},s={},u=[],c={toc:u};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is a complete example of using the platform via REST.  For more sample code, including any dependencies this file has, please have a look at our GitHub examples repository.  This file can be found in that repo at ",(0,a.kt)("a",{href:"https://github.com/vectara/getting-started/tree/main/language-examples/php/rest/queryDataApiKey.php"},"php/rest/queryDataApiKey.php")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="php/rest/queryDataApiKey.php"',title:'"php/rest/queryDataApiKey.php"'},"<?php\n/**\n * Queries a corpus corpus in Vectara platform using HTTP/REST.\n *\n * @customer_id         Unique customer ID in Vectara platform.\n * @corpus_id           ID of corpus to be queried.\n * @serving_endpoint    The endpoint of Vectara Querying server.\n * @api_key             The API Key from Vectara platform.\n * @query               The query text.\n *\n * Returns              The result of query rest call.\n */\n\n\n$url = 'https://' . $_POST['serving_endpoint'] . '/v1/query';\n$customer_id = $_POST['customer_id'];\n$corpus_id = $_POST['corpus_id'];\n$query = $_POST['query'];\n$api_key = $_POST['api_key'];\n\n$query_data = [\n    'query' => $query,\n    'numResults' => 10,\n    'corpusKey' => [\n        [\n            'customerId' => $customer_id,\n            'corpusId' => $corpus_id,\n        ],\n    ],\n];\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    'Content-Type:application/json',\n    'x-api-key:' . strval($api_key),\n    'customer-id: ' . strval($customer_id),\n]);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['query' => [$query_data]]));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$result = curl_exec($ch);\ncurl_close($ch);\n\necho $result;\n?>\n\n")))}l.isMDXComponent=!0}}]);