"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[1569,2917],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(67294),a=n(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(87462),a=n(67294),s=n(86010),o=n(72389),i=n(67392),l=n(7094),u=n(12466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:o,values:d,groupId:m,className:h}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??f.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,i.l)(g,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:b}=(0,l.U)(),[w,N]=(0,a.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=m){const e=k[m];null!=e&&e!==w&&g.some((t=>t.value===e))&&N(e)}const x=e=>{const t=e.currentTarget,n=T.indexOf(t),r=g[n].value;r!==w&&(C(t),N(r),null!=m&&b(m,String(r)))},q=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,s.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},h)},g.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:q,onClick:x},o,{className:(0,s.Z)("tabs__item",p,o?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,a.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},78473:(e,t,n)=>{n.r(t),n.d(t,{Config:()=>p,assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),s=n(53487);const o={},i=void 0,l={unversionedId:"definitions",id:"definitions",title:"definitions",description:"",source:"@site/docs/definitions.md",sourceDirName:".",slug:"/definitions",permalink:"/docs/definitions",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/definitions.md",tags:[],version:"current",frontMatter:{}},u={},c=[];function p(e){return s.g[e.v]}const d={toc:c,Config:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}))}m.isMDXComponent=!0},65426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),s=(n(65488),n(85162),n(78473));n(53487);const o={id:"search",title:"Search API",sidebar_label:"API Definition"},i=void 0,l={unversionedId:"search-apis/search",id:"search-apis/search",title:"Search API",description:"Endpoint Address",source:"@site/docs/search-apis/search.md",sourceDirName:"search-apis",slug:"/search-apis/search",permalink:"/docs/search-apis/search",draft:!1,editUrl:"https://github.com/vectara/vectara-docs/tree/master/www/docs/search-apis/search.md",tags:[],version:"current",frontMatter:{id:"search",title:"Search API",sidebar_label:"API Definition"},sidebar:"someSidebar",previous:{title:"Deleting Documents",permalink:"/docs/indexing-apis/deleting-documents"},next:{title:"C#",permalink:"/docs/getting-started-samples/RestQueryData.cs"}},u={},c=[{value:"Endpoint Address",id:"endpoint-address",level:2},{value:"Full Definition",id:"full-definition",level:2},{value:"Service",id:"service",level:3},{value:"Query",id:"query",level:3},{value:"Corpus Key",id:"corpus-key",level:3},{value:"Response",id:"response",level:3},{value:"ResponseSet",id:"responseset",level:3},{value:"Attribute",id:"attribute",level:3},{value:"Batch Query and Response",id:"batch-query-and-response",level:3},{value:"Advanced Scenarios",id:"advanced-scenarios",level:2},{value:"Searching Multiple Corpora",id:"searching-multiple-corpora",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"endpoint-address"},"Endpoint Address"),(0,a.kt)(s.Config,{v:"names.product",mdxType:"Config"})," exposes a REST endpoint at the following URL to search content from a corpus:",(0,a.kt)("code",null,"https://",(0,a.kt)(s.Config,{v:"domains.rest.serving",mdxType:"Config"}),"/v1/query"),(0,a.kt)("p",null,"Once you've indexed data into one or more corpora, you're ready to run queries\nand display the results. This page provides a detailed reference guide for how\nto do that."),(0,a.kt)("h2",{id:"full-definition"},"Full Definition"),(0,a.kt)("p",null,"The full definition of the gRPC interface is covered below."),(0,a.kt)("h3",{id:"service"},"Service"),(0,a.kt)("p",null,"Fundamentally, the system accepts a query and returns a response, which contains\na list of results. However, for efficiency, one or more queries can be batched\ninto a single request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"service QueryService {\n  rpc Query(BatchQueryRequest) returns (BatchQueryResponse) { }\n}\n")),(0,a.kt)("h3",{id:"query"},"Query"),(0,a.kt)("p",null,"A single query consists of a ",(0,a.kt)("strong",{parentName:"p"},"query"),", which is specified in plain text. For\nexample, ",(0,a.kt)("em",{parentName:"p"},'"Where can I buy the latest iPhone?"'),". Optionally, the ",(0,a.kt)("strong",{parentName:"p"},"query\ncontext")," provides additional information that the system may use to refine the\nresults. For example, ",(0,a.kt)("em",{parentName:"p"},'"The Apple store near my house is closed due to Covid."')),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"start")," field controls the starting position within the list of results,\nwhile ",(0,a.kt)("strong",{parentName:"p"},"num_results")," dictates how many results are returned. Thus, setting\n",(0,a.kt)("inlineCode",{parentName:"p"},"start=5")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"num_results=20")," would return twenty results beginning at position\nfive. These fields are mainly used to provide pagination."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CorpusKey")," specifies a list of corpora against which to run the\nquery. While it's most often the case that a query is run against a single\ncorpus, it's sometimes useful to run against several in parallel."),(0,a.kt)("p",null,"Finally, the ",(0,a.kt)("strong",{parentName:"p"},"reranking configuration")," enables reranking of results, to\nfurther increase relevance in certain scenarios. For details, see\n",(0,a.kt)("a",{parentName:"p",href:"#reranking"},"Reranking")," under the Advanced Scenarios section below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message QueryRequest {\n  string query = 5;\n  string query_context = 10;\n\n  uint32 start = 15;\n  uint32 num_results = 20;\n  repeated CorpusKey corpus_key = 25;\n\n  // Configuration options for reranking.\n  message RerankingConfig {\n    uint32 reranker_id = 5;\n  }\n  RerankingConfig reranking_config = 30;\n}\n")),(0,a.kt)("h3",{id:"corpus-key"},"Corpus Key"),(0,a.kt)("p",null,"At the most basic level, the corpus key specifies the id of the corpus being\nsearched. Specifying the ",(0,a.kt)("strong",{parentName:"p"},"customer_id")," is optional, since it defaults to the\ncustomer attached to the gRPC request."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"metadata_filter")," allows specifying a predicate expression that restricts\nthe search to a part of the corpus. The filter is written in a simplified SQL\ndialect and can reference metadata that was marked as filterable during corpus\ncreation. See the ",(0,a.kt)("a",{parentName:"p",href:"sql/filter-overview"},"Filter Expressions Overview")," for a\ndescription of their syntax, and ",(0,a.kt)("a",{parentName:"p",href:"/docs/admin-apis/admin"},"Corpus Administration")," to learn how\nreferenceable metadata is specified during corpus creation."),(0,a.kt)("p",null,"If the corpus specifies custom dimensions, weights can be assigned to each\ndimension as well."),(0,a.kt)("p",null,"Finally, it's possible to override the semantic interpretation of the query\nstring. Usually, the default settings for the corpus are sufficient. In more\nadvanced scenarios, it's desirable to force it to be treated as a query, or,\nmore rarely, as a response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message CorpusKey {\n  uint32 customer_id = 5;\n  uint32 corpus_id = 10;\n\n  enum Semantics {\n    DEFAULT = 0;\n    QUERY = 1;\n    RESPONSE = 2;\n  }\n  Semantics semantics = 15;\n\n  repeated CustomDimension dim = 20;\n  string metadata_filter = 25;\n}\n")),(0,a.kt)("h3",{id:"response"},"Response"),(0,a.kt)("p",null,"The response message encapsulates a single query result. It is a subdocument\nprovided at indexing time. The ",(0,a.kt)("strong",{parentName:"p"},"text")," is the subdocument text, the ",(0,a.kt)("strong",{parentName:"p"},"score"),"\nindicates how well the text answers the query (higher scores are better)."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"metadata")," list holds any subdocument-level metadata that was stored with\nthe item at indexing time. The ",(0,a.kt)("strong",{parentName:"p"},"corpus_key")," indicates which corpus the result\ncame from: recall that a single query can execute against multiple corpora."),(0,a.kt)("p",null,"Finally, the ",(0,a.kt)("strong",{parentName:"p"},"document_index")," points at a specific document within the\nenclosing response set's ",(0,a.kt)("strong",{parentName:"p"},"document")," array. This is useful for retrieving the\ndocument id and document-level metadata."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"message Response {\n  string text = 5;\n  float score = 10;\n  repeated Attribute metadata = 20;\n  uint32 document_index = 25;     // Pointer to the document in the ResponseSet.\n  CorpusKey corpus_key = 30;\n}\n")),(0,a.kt)("h3",{id:"responseset"},"ResponseSet"),(0,a.kt)("p",null,"The response set groups a list of responses, sorted in order of score, together\nwith a list of ",(0,a.kt)("strong",{parentName:"p"},"statuses")," and enclosing ",(0,a.kt)("strong",{parentName:"p"},"documents"),". Since it's possible for\nseveral results to come from the same document, the length of the document list\nmay be less than the length of the response list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"message ResponseSet {\n  repeated Response response = 5;\n  repeated Status status = 10;    // Potentially multiple warnings.\n\n  message Document {\n    string id = 5;\n    repeated Attribute metadata = 10;\n  }\n  repeated Document document = 15;\n}\n")),(0,a.kt)("h3",{id:"attribute"},"Attribute"),(0,a.kt)("p",null,"Attribute represents a named piece of metadata. Both the ",(0,a.kt)("strong",{parentName:"p"},"name")," and its\n",(0,a.kt)("strong",{parentName:"p"},"value")," are string typed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"message Attribute {\n  string name = 5;\n  string value = 10;\n}\n")),(0,a.kt)("h3",{id:"batch-query-and-response"},"Batch Query and Response"),(0,a.kt)("p",null,"The batch query request and response messages simply aggregate several\nindividual queries and response sets, respectively. The response sets will match\nthe queries in both number and order, so, for example, the third response set in\nthe batch response will correspond with the third query in the batch request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message BatchQueryRequest {\n  repeated QueryRequest query = 5;\n}\n\nmessage BatchQueryResponse {\n  repeated ResponseSet response_set = 5;\n\n  repeated Status status = 1000;\n}\n")),(0,a.kt)("h2",{id:"advanced-scenarios"},"Advanced Scenarios"),(0,a.kt)("h3",{id:"searching-multiple-corpora"},"Searching Multiple Corpora"),(0,a.kt)("p",null,"Sometimes, it's advantageous to search multiple corpora at the same time.  In\nthose cases, you need two things:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Permissions (e.g. via an API key) that's set up to have access to all of\nthe corpora you're interested in searching"),(0,a.kt)("li",{parentName:"ol"},"A modification to the query body as outlined below")),(0,a.kt)("p",null,"The query body modification that's necessary is that ",(0,a.kt)("inlineCode",{parentName:"p"},"corpusKey")," can take an\narray of objects.  So if you're currently searching 1 corpus as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'...\n"corpusKey": [\n  {\n    "customerId": 1234,\n    "corpusId": 5678,\n    "semantics": 0,\n    "metadataFilter": "",\n    "dim": []\n  }\n]\n...\n')),(0,a.kt)("p",null,"As long as the API key you're using has permissions to each of these corpora,\nyou can search multiple corpora at once as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'...\n"corpusKey": [\n  {\n    "customerId": 1234,\n    "corpusId": 5678,\n    "semantics": 0,\n    "metadataFilter": "",\n    "dim": []\n  },\n  {\n    "customerId": 1234,\n    "corpusId": 9876,\n    "semantics": 0,\n    "metadataFilter": "",\n    "dim": []\n  }\n]\n...\n')),(0,a.kt)("p",null,"This then means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," will return results across the queried\ncorpora.  The ",(0,a.kt)("inlineCode",{parentName:"p"},"corpusKey")," will be returned in the response for each document\nif you need to use it in your application."))}d.isMDXComponent=!0},53487:e=>{e.exports=JSON.parse('{"g":{"domains.rest.serving":"api.vectara.io","domains.rest.admin":"api.vectara.io","domains.rest.indexing":"api.vectara.io","domains.grpc.serving":"serving.vectara.io","domains.grpc.admin":"admin.vectara.io","domains.grpc.indexing":"indexing.vectara.io","domains.oauth":"vectara-prod-${CUSTOMER_ID}.auth.us-west-2.amazoncognito.com","package.protobuf":"com.vectara","package.java":"com.vectara","package.php":"Com\\\\Vectara","names.company":"Vectara","names.product":"Vectara"}}')}}]);