"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
var fs_1 = require("fs");
var path_1 = __importDefault(require("path"));
var generators_1 = require("./generators");
var parsers_1 = require("./parsers");
function validateOptions(_a) {
    var options = _a.options, validate = _a.validate;
    var fileDescriptorsPath = options.fileDescriptorsPath, protoDocsPath = options.protoDocsPath, sidebarPath = options.sidebarPath;
    // fileDescriptorsPath is an existing json file
    if (!fileDescriptorsPath || !fs_1.existsSync(fileDescriptorsPath)) {
        throw new Error('Expected fileDescriptorsPath option to reference a present file.');
    }
    // protoDocsPath is a directory. we only check if it's a directory if it already exists.
    if (!protoDocsPath || (fs_1.existsSync(protoDocsPath) && !fs_1.lstatSync(protoDocsPath).isDirectory())) {
        throw new Error('Expected protoDocsPath option to reference a directory.');
    }
    // sidebarPath is a present file
    if (!sidebarPath) {
        throw new Error('Expected sidebarPath option to reference a file.');
    }
    return options;
}
exports.validateOptions = validateOptions;
;
function plugin(context, options) {
    return {
        name: "docusaurus-protobuffet-plugin",
        extendCli: function (cli) {
            cli
                .command("generate-proto-docs")
                .description("Generate documentation for a protobuf workspace.")
                .action(function () {
                // read file descriptors JSON file
                var fileDescriptorsInput = JSON.parse(fs_1.readFileSync(options.fileDescriptorsPath).toString());
                var fileDescriptors = parsers_1.parseFileDescriptors(fileDescriptorsInput);
                // generate markdown files for each in fileDescriptors
                var docFiles = generators_1.generateDocFiles(fileDescriptors);
                // write files to appropriate directories
                docFiles.forEach(function (docFile) {
                    var fileName = options.protoDocsPath + "/" + docFile.fileName + ".mdx";
                    var fileDir = path_1.default.dirname(fileName);
                    // ensure directory exists
                    fs_1.mkdirSync(fileDir, { recursive: true });
                    // write file
                    fs_1.writeFileSync(fileName, docFile.fileContents);
                });
                // generate sidebar object for all files
                var sidebarFileContents = generators_1.generateSidebarFileContents(docFiles);
                // write sidebar object
                fs_1.writeFileSync(options.sidebarPath, sidebarFileContents);
            });
        },
        getThemePath: function () {
            return path_1.default.resolve(__dirname, "./theme");
        }
    };
}
exports.default = plugin;
