"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDocFiles = void 0;
var utils_1 = require("../utils");
var generateDocFiles = function (fileDescriptors) {
    var files = fileDescriptors.files;
    return files.map(generateDocFile);
};
exports.generateDocFiles = generateDocFiles;
var generateDocFile = function (fileDescriptor) { return ({
    fileContents: generateDocFileContents(fileDescriptor),
    fileName: fileDescriptor.name,
    fileDescriptor: fileDescriptor,
}); };
var generateDocFileContents = function (fileDescriptor) {
    // TODO: run through prettier for consistent formatting.
    return ("---\ntitle: " + utils_1.getLeafFileName(fileDescriptor.name) + "\nhide_title: true\n---\n\nimport { ProtoMessage, ProtoServiceMethod, ProtoEnum } from '@theme/ProtoFile';\n\n## `" + utils_1.getLeafFileName(fileDescriptor.name) + "`\n_**path** " + fileDescriptor.name + "_\n\n_**package** " + fileDescriptor.package + "_\n\n" + fileDescriptor.description + "\n\n---\n\n" + [
        generateMessageSectionMdx(fileDescriptor.messages),
        generateEnumSectionMdx(fileDescriptor.enums),
        generateServiceSectionMdx(fileDescriptor.services),
    ].filter(Boolean).map(function (section) { return section + "\n---\n"; }).join("") + "\n\n  ");
};
var generateMessageSectionMdx = function (messages) {
    if (messages.length == 0) {
        return null;
    }
    return ("## Messages\n\n" + messages.map(function (message, i) { return ("\n### `" + message.longName + "`\n<ProtoMessage key={" + i + "} message={" + JSON.stringify(message) + "} />\n"); }).join("\n"));
};
var generateEnumSectionMdx = function (enums) {
    if (enums.length == 0) {
        return null;
    }
    return ("## Enums\n\n" + enums.map(function (enumb, i) { return ("\n### `" + enumb.longName + "`\n<ProtoEnum key={" + i + "} enumb={" + JSON.stringify(enumb) + "} />\n"); }).join("\n"));
};
var generateServiceSectionMdx = function (services) {
    if (services.length == 0) {
        return null;
    }
    return ("## Services\n\n" + services.map(function (service, i) { return ("\n### `" + service.name + "`\n\n" + service.description + "\n\n" + service.methods.map(function (method, i) { return ("\n#### `" + method.name + "`\n<ProtoServiceMethod key={'" + method.name + "-" + i + "'} method={" + JSON.stringify(method) + "} />\n"); }).join("\n") + "\n"); }).join("\n"));
};
